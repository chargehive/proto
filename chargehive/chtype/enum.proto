syntax = "proto3";

package chargehive.chtype;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.goproto_enum_prefix_all) = false;
option (gogoproto.goproto_registration) = true;
option go_package = "github.com/chargehive/proto/golang/chargehive/chtype";
option php_namespace = "ChargeHive\\Chtype";
option php_metadata_namespace = "ChargeHive\\Chtype\\Metadata";

enum Status {
  STATUS_INVALID = 0;
  //Pre Setup 1-9
  STATUS_PENDING = 1;
  //Setup 10-29
  STATUS_SETUP = 10;
  STATUS_PROVISIONING = 20;
  //Active 30-49
  STATUS_ACTIVE = 30;
  //Inactive 50-69
  STATUS_SUSPENDED = 50;
  STATUS_CANCELLED = 60;
  //Unavailable 70+
  STATUS_ARCHIVED = 70;
  STATUS_DELETED = 90;
}

enum ActorType {
  ACTOR_TYPE_INVALID = 0;
  ACTOR_TYPE_CONSUMER = 1;
  ACTOR_TYPE_MERCHANT = 2;
  ACTOR_TYPE_CHARGEHIVE = 3;
  ACTOR_TYPE_WALLET = 4;
  ACTOR_TYPE_CONNECTOR = 5;
  ACTOR_TYPE_PAYMENT_PROCESSOR = 6;
  ACTOR_TYPE_PAYMENT_NETWORK = 7;
  ACTOR_TYPE_ACQUIRING_BANK = 8;
  ACTOR_TYPE_ISSUING_BANK = 9;
  ACTOR_TYPE_RECOVERY_AGENT = 10;
  ACTOR_TYPE_EXCHANGE = 11;
  ACTOR_TYPE_POLICY = 12;
}

enum HandlerType {
  HANDLER_TYPE_INVALID = 0;
  HANDLER_TYPE_WEB = 1;
  HANDLER_TYPE_CLI = 2;
  HANDLER_TYPE_API = 3;
  HANDLER_TYPE_MOBILE = 4;
  HANDLER_TYPE_PASSTHROUGH = 5;
}

enum TransactionType {
  TRANSACTION_TYPE_INVALID = 0;
  TRANSACTION_TYPE_AUTHORIZE = 1;
  TRANSACTION_TYPE_CAPTURE = 2;
  TRANSACTION_TYPE_REFUND = 3;
  TRANSACTION_TYPE_CANCEL = 4;
  TRANSACTION_TYPE_DISPUTE = 5;
  TRANSACTION_TYPE_VERIFY = 6;
  TRANSACTION_TYPE_EXPIRED = 7;
  TRANSACTION_TYPE_INTERNAL = 99;
}

enum TransactionSubType {
  TRANSACTION_SUB_TYPE_INVALID = 0;
  TRANSACTION_SUB_TYPE_IDENTIFY = 1;
  TRANSACTION_SUB_TYPE_CHALLENGE = 2;
  TRANSACTION_SUB_TYPE_CAPTURE_AUTH = 3;
  TRANSACTION_SUB_TYPE_NONE = 4;
}

enum PaymentMethodType {
  PAYMENT_METHOD_TYPE_INVALID = 0;
  PAYMENT_METHOD_TYPE_CARD = 1;
  PAYMENT_METHOD_TYPE_PAYPAL = 2;
  PAYMENT_METHOD_TYPE_DIRECTDEBIT = 3;
  PAYMENT_METHOD_TYPE_CRYPTOCURRENCY = 4;
  PAYMENT_METHOD_TYPE_APPLEPAY = 5;
  PAYMENT_METHOD_TYPE_GOOGLEPAY = 6;
  PAYMENT_METHOD_TYPE_NONE = 7;
}

enum ContractType {
  CONTRACT_TYPE_INVALID = 0;
  CONTRACT_TYPE_NONE = 1;
  CONTRACT_TYPE_PAYMENT = 2;
  CONTRACT_TYPE_SUBSCRIPTION_INITIAL = 3;
  CONTRACT_TYPE_SUBSCRIPTION_RENEWAL = 4;
  CONTRACT_TYPE_ONECLICK = 5;
}

enum Environment {
  ENVIRONMENT_INVALID = 0;
  ENVIRONMENT_BLACKBOX = 1; //Processed in code
  ENVIRONMENT_TEST = 2; //Processed against a test environment
  ENVIRONMENT_LIVE = 3; //Processed in a live environment
  ENVIRONMENT_MOCK = 4; //Mocked environment
}

enum ProductType {
  PRODUCT_TYPE_INVALID = 0;
  PRODUCT_TYPE_PRODUCT = 1;
  PRODUCT_TYPE_SERVICE = 2;
  PRODUCT_TYPE_SUBSCRIPTION = 3;
}

enum SKUType {
  SKU_TYPE_INVALID = 0;
  SKU_TYPE_PRIMARY = 1;
  SKU_TYPE_ADDON = 2;
  SKU_TYPE_UPSELL = 3;
}

enum DeliveryType {
  DELIVERY_TYPE_INVALID = 0;
  DELIVERY_TYPE_NONE = 1;
  DELIVERY_TYPE_PHYSICAL = 2;
  DELIVERY_TYPE_VIRTUAL = 3;
}

enum DeliveryStandard {
  DELIVERY_STANDARD_INVALID = 0;
  DELIVERY_STANDARD_SAME_DAY = 1;
  DELIVERY_STANDARD_NEXT_DAY = 2;
  DELIVERY_STANDARD_TWO_DAY = 3;
  DELIVERY_STANDARD_ECONOMY = 4;
  DELIVERY_STANDARD_OTHER = 5;
  DELIVERY_STANDARD_NONE = 6;
}

enum TermType {
  TERM_TYPE_INVALID = 0;
  TERM_TYPE_ONE_TIME = 1;
  TERM_TYPE_MINUTE = 3;
  TERM_TYPE_DAY = 4;
  TERM_TYPE_WEEK = 5;
  TERM_TYPE_MONTH = 6;
  TERM_TYPE_YEAR = 7;
  TERM_TYPE_NONE = 8;
}

enum FailureType {
  FAILURE_TYPE_INVALID = 0;
  FAILURE_TYPE_NONE = 1; //Nothing went wrong
  FAILURE_TYPE_SOFT = 2; //Should be able to retry and may work
  FAILURE_TYPE_HARD = 3; //Retry without changing the payload will continue to fail
  FAILURE_TYPE_RETRY = 4; //Must Retry
  FAILURE_TYPE_INTERNAL = 5; //Server Error
}

enum TransactionResult {
  TRANSACTION_RESULT_INVALID = 0;
  TRANSACTION_RESULT_SUCCESS = 1;
  TRANSACTION_RESULT_DECLINED = 2;
  TRANSACTION_RESULT_VERIFY = 3;
  TRANSACTION_RESULT_PENDING = 5;
  TRANSACTION_RESULT_PENDING_SUCCESS = 6;
  TRANSACTION_RESULT_RETRY = 7;
  TRANSACTION_RESULT_EXPIRED = 8;
  TRANSACTION_RESULT_PARTIAL_SUCCESS = 9;
  TRANSACTION_RESULT_FAILURE = 10;
}

enum VerificationStatus {
  VERIFICATION_STATUS_INVALID = 0;
  VERIFICATION_STATUS_NOT_CHECKED = 1;
  VERIFICATION_STATUS_PASSED = 2;
  VERIFICATION_STATUS_FAILED = 3;
  VERIFICATION_STATUS_CONTINUE = 4;
}

enum VerifyRequestType {
  VERIFY_REQUEST_TYPE_INVALID = 0;
  VERIFY_REQUEST_TYPE_IDENTIFY = 1; //Frictionless Auth
  VERIFY_REQUEST_TYPE_CHALLENGE = 2; //User Prompt Auth
  VERIFY_REQUEST_TYPE_NONE = 3;
}

enum Liability {
  LIABILITY_INVALID = 0;
  LIABILITY_UNKNOWN = 1;
  LIABILITY_MERCHANT = 2;
  LIABILITY_ISSUER = 3;
}
