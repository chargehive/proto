<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: chargehive/chtype/transaction.proto

namespace ChargeHive\Chtype\Metadata;

class Transaction
{
    public static $is_initialized = false;

    public static function initOnce() {
        $pool = \Google\Protobuf\Internal\DescriptorPool::getGeneratedPool();

        if (static::$is_initialized == true) {
          return;
        }
        \ChargeHive\Chtype\Metadata\Generic::initOnce();
        \ChargeHive\Chtype\Metadata\Enum::initOnce();
        \ChargeHive\Chtype\Metadata\Fraud::initOnce();
        \ChargeHive\Chtype\Metadata\ResponseCodes::initOnce();
        \GPBMetadata\Google\Protobuf\Timestamp::initOnce();
        $pool->internalAddGeneratedFile(
            '
Ç
#chargehive/chtype/transaction.protochargehive.chtypechargehive/chtype/enum.protochargehive/chtype/fraud.proto&chargehive/chtype/response_codes.protogoogle/protobuf/timestamp.proto"Ù

Transaction
token_id (	
transaction_id (	5
details (2$.chargehive.chtype.TransactionDetail:
payment_type (2$.chargehive.chtype.PaymentMethodType
payment_scheme (	<
transaction_type (2".chargehive.chtype.TransactionType1
request_amount (2.chargehive.chtype.Amount4
transacted_amount (2.chargehive.chtype.Amount1
contract	 (2.chargehive.chtype.ContractType
statement_descriptor
 (	4
result (2$.chargehive.chtype.TransactionResult<
verify_request (2$.chargehive.chtype.VerifyRequestData4
failure_type (2.chargehive.chtype.FailureType
arn (	7
verified (2%.chargehive.chtype.VerificationStatus/
	liability (2.chargehive.chtype.Liability8
attempt_detail (2 .chargehive.chtype.AttemptDetail5
fraud_results (2.chargehive.chtype.FraudResult3
response (2!.chargehive.chtype.ResponseDetail
source_transaction_id (	
payment_method_id (	C
transaction_sub_type (2%.chargehive.chtype.TransactionSubType>
ancillary_transactions (2.chargehive.chtype.Transaction
requested_connector_id (	#
requested_connector_library (	4
transaction_time (2.google.protobuf.TimestampB
payment_provider (2(.chargehive.chtype.PaymentMethodProviderE
payment_input_type (2).chargehive.chtype.PaymentMethodInputType
	auth_code (	"½
TransactionDetail
actor_id (	
actor_version (	0

actor_type (2.chargehive.chtype.ActorType
transaction_id (	3
requested_amount (2.chargehive.chtype.Amount3
processed_amount (2.chargehive.chtype.Amount/
fee_estimate (2.chargehive.chtype.Amount-

fee_actual (2.chargehive.chtype.Amount.

start_time	 (2.google.protobuf.Timestamp,
end_time
 (2.google.protobuf.Timestamp
was_successful (3
environment (2.chargehive.chtype.Environment3
response (2!.chargehive.chtype.ResponseDetailB
verification_result (2%.chargehive.chtype.VerificationResultQ
additional_data (28.chargehive.chtype.TransactionDetail.AdditionalDataEntry
authorization_code (	/
	liability (2.chargehive.chtype.Liability
connector_library (	
connector_id (	
primary (

network_id (	
psp_transaction_id (	5
AdditionalDataEntry
key (	
value (	:8"‘
VerifyRequestData2
type (2$.chargehive.chtype.VerifyRequestType<
data (2..chargehive.chtype.VerifyRequestData.DataEntry
connector_library (	3
environment (2.chargehive.chtype.Environment
required (H

methodData (24.chargehive.chtype.VerifyRequestData.MethodDataEntry+
	DataEntry
key (	
value (	:81
MethodDataEntry
key (	
value (	:8"ÿ
ThreeDSResult
eci (	
cavv (	
xid (	

enrollment (	
result (	
signature_status (	
server_transaction_id (	
status (	
major_version	 (
version
 (	
pa_req (	
acs_url (	
pa_res (	

id (	-
	timestamp (2.google.protobuf.Timestamp/
	liability (2.chargehive.chtype.Liability
sdk_response (	"ª
VerificationResult#
address_verification_result (	
cvv_verification_result (	
fraud_result (	8
threeds_result (2 .chargehive.chtype.ThreeDSResult"Ç
AttemptDetail
ChargeTransactionNumber (
ChargeAttemptNumber ( 
AttemptTransactionNumber (
AttemptMethodCascade (
AttemptConnectorCascade (
IsPrimaryMethod ("m
InitialTransactionData
	charge_id (	
transaction_id (	
connector_id (	

network_id (	BgZ4github.com/chargehive/proto/golang/chargehive/chtypeÊChargeHive\\ChtypeâChargeHive\\Chtype\\Metadatabproto3'
        , true);

        static::$is_initialized = true;
    }
}

