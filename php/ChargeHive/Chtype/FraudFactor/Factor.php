<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: chargehive/chtype/fraud.proto

namespace ChargeHive\Chtype\FraudFactor;

use UnexpectedValueException;

/**
 * Protobuf type <code>chargehive.chtype.FraudFactor.Factor</code>
 */
class Factor
{
    /**
     * Generated from protobuf enum <code>FRAUD_FACTOR_INVALID = 0;</code>
     */
    const FRAUD_FACTOR_INVALID = 0;
    /**
     * Generated from protobuf enum <code>FRAUD_FACTOR_VERIFICATION = 1;</code>
     */
    const FRAUD_FACTOR_VERIFICATION = 1;
    /**
     * Generated from protobuf enum <code>FRAUD_FACTOR_VALIDATION = 2;</code>
     */
    const FRAUD_FACTOR_VALIDATION = 2;
    /**
     * Generated from protobuf enum <code>FRAUD_FACTOR_VELOCITY = 3;</code>
     */
    const FRAUD_FACTOR_VELOCITY = 3;
    /**
     * Generated from protobuf enum <code>FRAUD_FACTOR_TRUST = 4;</code>
     */
    const FRAUD_FACTOR_TRUST = 4;
    /**
     * Generated from protobuf enum <code>FRAUD_FACTOR_DURATION = 5;</code>
     */
    const FRAUD_FACTOR_DURATION = 5;
    /**
     * Generated from protobuf enum <code>FRAUD_FACTOR_OTHER = 6;</code>
     */
    const FRAUD_FACTOR_OTHER = 6;

    private static $valueToName = [
        self::FRAUD_FACTOR_INVALID => 'FRAUD_FACTOR_INVALID',
        self::FRAUD_FACTOR_VERIFICATION => 'FRAUD_FACTOR_VERIFICATION',
        self::FRAUD_FACTOR_VALIDATION => 'FRAUD_FACTOR_VALIDATION',
        self::FRAUD_FACTOR_VELOCITY => 'FRAUD_FACTOR_VELOCITY',
        self::FRAUD_FACTOR_TRUST => 'FRAUD_FACTOR_TRUST',
        self::FRAUD_FACTOR_DURATION => 'FRAUD_FACTOR_DURATION',
        self::FRAUD_FACTOR_OTHER => 'FRAUD_FACTOR_OTHER',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Factor::class, \ChargeHive\Chtype\FraudFactor_Factor::class);

