// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: chargehive/chtype/fraud.proto

package chtype

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SuggestedAction int32

const (
	SuggestedAction_SUGGESTED_ACTION_INVALID       SuggestedAction = 0
	SuggestedAction_SUGGESTED_ACTION_NO_SUGGESTION SuggestedAction = 1
	SuggestedAction_SUGGESTED_ACTION_REVIEW        SuggestedAction = 2
	SuggestedAction_SUGGESTED_ACTION_ALLOW         SuggestedAction = 3
	SuggestedAction_SUGGESTED_ACTION_DENY          SuggestedAction = 4
)

// Enum value maps for SuggestedAction.
var (
	SuggestedAction_name = map[int32]string{
		0: "SUGGESTED_ACTION_INVALID",
		1: "SUGGESTED_ACTION_NO_SUGGESTION",
		2: "SUGGESTED_ACTION_REVIEW",
		3: "SUGGESTED_ACTION_ALLOW",
		4: "SUGGESTED_ACTION_DENY",
	}
	SuggestedAction_value = map[string]int32{
		"SUGGESTED_ACTION_INVALID":       0,
		"SUGGESTED_ACTION_NO_SUGGESTION": 1,
		"SUGGESTED_ACTION_REVIEW":        2,
		"SUGGESTED_ACTION_ALLOW":         3,
		"SUGGESTED_ACTION_DENY":          4,
	}
)

func (x SuggestedAction) Enum() *SuggestedAction {
	p := new(SuggestedAction)
	*p = x
	return p
}

func (x SuggestedAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SuggestedAction) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_fraud_proto_enumTypes[0].Descriptor()
}

func (SuggestedAction) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_fraud_proto_enumTypes[0]
}

func (x SuggestedAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SuggestedAction.Descriptor instead.
func (SuggestedAction) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_fraud_proto_rawDescGZIP(), []int{0}
}

type RiskLevel int32

const (
	RiskLevel_RISK_LEVEL_INVALID     RiskLevel = 0
	RiskLevel_RISK_LEVEL_NOT_RATED   RiskLevel = 1
	RiskLevel_RISK_LEVEL_NEGLIGIBLE  RiskLevel = 10
	RiskLevel_RISK_LEVEL_MINOR       RiskLevel = 30
	RiskLevel_RISK_LEVEL_MODERATE    RiskLevel = 50
	RiskLevel_RISK_LEVEL_SIGNIFICANT RiskLevel = 70
	RiskLevel_RISK_LEVEL_SERVERE     RiskLevel = 90
)

// Enum value maps for RiskLevel.
var (
	RiskLevel_name = map[int32]string{
		0:  "RISK_LEVEL_INVALID",
		1:  "RISK_LEVEL_NOT_RATED",
		10: "RISK_LEVEL_NEGLIGIBLE",
		30: "RISK_LEVEL_MINOR",
		50: "RISK_LEVEL_MODERATE",
		70: "RISK_LEVEL_SIGNIFICANT",
		90: "RISK_LEVEL_SERVERE",
	}
	RiskLevel_value = map[string]int32{
		"RISK_LEVEL_INVALID":     0,
		"RISK_LEVEL_NOT_RATED":   1,
		"RISK_LEVEL_NEGLIGIBLE":  10,
		"RISK_LEVEL_MINOR":       30,
		"RISK_LEVEL_MODERATE":    50,
		"RISK_LEVEL_SIGNIFICANT": 70,
		"RISK_LEVEL_SERVERE":     90,
	}
)

func (x RiskLevel) Enum() *RiskLevel {
	p := new(RiskLevel)
	*p = x
	return p
}

func (x RiskLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RiskLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_fraud_proto_enumTypes[1].Descriptor()
}

func (RiskLevel) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_fraud_proto_enumTypes[1]
}

func (x RiskLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RiskLevel.Descriptor instead.
func (RiskLevel) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_fraud_proto_rawDescGZIP(), []int{1}
}

type FraudFactor_On int32

const (
	FraudFactor_FRAUD_FACTOR_ON_INVALID              FraudFactor_On = 0
	FraudFactor_FRAUD_FACTOR_ON_ADDRESS              FraudFactor_On = 1
	FraudFactor_FRAUD_FACTOR_ON_BROWSER              FraudFactor_On = 2
	FraudFactor_FRAUD_FACTOR_ON_IP                   FraudFactor_On = 3
	FraudFactor_FRAUD_FACTOR_ON_COUNTRY              FraudFactor_On = 4
	FraudFactor_FRAUD_FACTOR_ON_STATE                FraudFactor_On = 5
	FraudFactor_FRAUD_FACTOR_ON_CITY                 FraudFactor_On = 6
	FraudFactor_FRAUD_FACTOR_ON_DEVICE               FraudFactor_On = 7
	FraudFactor_FRAUD_FACTOR_ON_EMAIL                FraudFactor_On = 8
	FraudFactor_FRAUD_FACTOR_ON_EMAIL_DOMAIN         FraudFactor_On = 9
	FraudFactor_FRAUD_FACTOR_ON_DATE                 FraudFactor_On = 10
	FraudFactor_FRAUD_FACTOR_ON_MERCHANT             FraudFactor_On = 11
	FraudFactor_FRAUD_FACTOR_ON_ISSUER               FraudFactor_On = 12
	FraudFactor_FRAUD_FACTOR_ON_BIN                  FraudFactor_On = 13
	FraudFactor_FRAUD_FACTOR_ON_METHOD               FraudFactor_On = 14
	FraudFactor_FRAUD_FACTOR_ON_CUSTOMER             FraudFactor_On = 15
	FraudFactor_FRAUD_FACTOR_ON_AMOUNT               FraudFactor_On = 16
	FraudFactor_FRAUD_FACTOR_ON_PHONE                FraudFactor_On = 17
	FraudFactor_FRAUD_FACTOR_ON_LANGUAGE             FraudFactor_On = 18
	FraudFactor_FRAUD_FACTOR_ON_DISTANCE_TO_BILLING  FraudFactor_On = 19
	FraudFactor_FRAUD_FACTOR_ON_DISTANCE_TO_SHIPPING FraudFactor_On = 20
	FraudFactor_FRAUD_FACTOR_ON_DISTANCE_TO_IP       FraudFactor_On = 21
	FraudFactor_FRAUD_FACTOR_ON_OTHER                FraudFactor_On = 22
)

// Enum value maps for FraudFactor_On.
var (
	FraudFactor_On_name = map[int32]string{
		0:  "FRAUD_FACTOR_ON_INVALID",
		1:  "FRAUD_FACTOR_ON_ADDRESS",
		2:  "FRAUD_FACTOR_ON_BROWSER",
		3:  "FRAUD_FACTOR_ON_IP",
		4:  "FRAUD_FACTOR_ON_COUNTRY",
		5:  "FRAUD_FACTOR_ON_STATE",
		6:  "FRAUD_FACTOR_ON_CITY",
		7:  "FRAUD_FACTOR_ON_DEVICE",
		8:  "FRAUD_FACTOR_ON_EMAIL",
		9:  "FRAUD_FACTOR_ON_EMAIL_DOMAIN",
		10: "FRAUD_FACTOR_ON_DATE",
		11: "FRAUD_FACTOR_ON_MERCHANT",
		12: "FRAUD_FACTOR_ON_ISSUER",
		13: "FRAUD_FACTOR_ON_BIN",
		14: "FRAUD_FACTOR_ON_METHOD",
		15: "FRAUD_FACTOR_ON_CUSTOMER",
		16: "FRAUD_FACTOR_ON_AMOUNT",
		17: "FRAUD_FACTOR_ON_PHONE",
		18: "FRAUD_FACTOR_ON_LANGUAGE",
		19: "FRAUD_FACTOR_ON_DISTANCE_TO_BILLING",
		20: "FRAUD_FACTOR_ON_DISTANCE_TO_SHIPPING",
		21: "FRAUD_FACTOR_ON_DISTANCE_TO_IP",
		22: "FRAUD_FACTOR_ON_OTHER",
	}
	FraudFactor_On_value = map[string]int32{
		"FRAUD_FACTOR_ON_INVALID":              0,
		"FRAUD_FACTOR_ON_ADDRESS":              1,
		"FRAUD_FACTOR_ON_BROWSER":              2,
		"FRAUD_FACTOR_ON_IP":                   3,
		"FRAUD_FACTOR_ON_COUNTRY":              4,
		"FRAUD_FACTOR_ON_STATE":                5,
		"FRAUD_FACTOR_ON_CITY":                 6,
		"FRAUD_FACTOR_ON_DEVICE":               7,
		"FRAUD_FACTOR_ON_EMAIL":                8,
		"FRAUD_FACTOR_ON_EMAIL_DOMAIN":         9,
		"FRAUD_FACTOR_ON_DATE":                 10,
		"FRAUD_FACTOR_ON_MERCHANT":             11,
		"FRAUD_FACTOR_ON_ISSUER":               12,
		"FRAUD_FACTOR_ON_BIN":                  13,
		"FRAUD_FACTOR_ON_METHOD":               14,
		"FRAUD_FACTOR_ON_CUSTOMER":             15,
		"FRAUD_FACTOR_ON_AMOUNT":               16,
		"FRAUD_FACTOR_ON_PHONE":                17,
		"FRAUD_FACTOR_ON_LANGUAGE":             18,
		"FRAUD_FACTOR_ON_DISTANCE_TO_BILLING":  19,
		"FRAUD_FACTOR_ON_DISTANCE_TO_SHIPPING": 20,
		"FRAUD_FACTOR_ON_DISTANCE_TO_IP":       21,
		"FRAUD_FACTOR_ON_OTHER":                22,
	}
)

func (x FraudFactor_On) Enum() *FraudFactor_On {
	p := new(FraudFactor_On)
	*p = x
	return p
}

func (x FraudFactor_On) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FraudFactor_On) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_fraud_proto_enumTypes[2].Descriptor()
}

func (FraudFactor_On) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_fraud_proto_enumTypes[2]
}

func (x FraudFactor_On) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FraudFactor_On.Descriptor instead.
func (FraudFactor_On) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_fraud_proto_rawDescGZIP(), []int{2, 0}
}

type FraudFactor_Factor int32

const (
	FraudFactor_FRAUD_FACTOR_INVALID      FraudFactor_Factor = 0
	FraudFactor_FRAUD_FACTOR_VERIFICATION FraudFactor_Factor = 1
	FraudFactor_FRAUD_FACTOR_VALIDATION   FraudFactor_Factor = 2
	FraudFactor_FRAUD_FACTOR_VELOCITY     FraudFactor_Factor = 3
	FraudFactor_FRAUD_FACTOR_TRUST        FraudFactor_Factor = 4
	FraudFactor_FRAUD_FACTOR_DURATION     FraudFactor_Factor = 5
	FraudFactor_FRAUD_FACTOR_OTHER        FraudFactor_Factor = 6
)

// Enum value maps for FraudFactor_Factor.
var (
	FraudFactor_Factor_name = map[int32]string{
		0: "FRAUD_FACTOR_INVALID",
		1: "FRAUD_FACTOR_VERIFICATION",
		2: "FRAUD_FACTOR_VALIDATION",
		3: "FRAUD_FACTOR_VELOCITY",
		4: "FRAUD_FACTOR_TRUST",
		5: "FRAUD_FACTOR_DURATION",
		6: "FRAUD_FACTOR_OTHER",
	}
	FraudFactor_Factor_value = map[string]int32{
		"FRAUD_FACTOR_INVALID":      0,
		"FRAUD_FACTOR_VERIFICATION": 1,
		"FRAUD_FACTOR_VALIDATION":   2,
		"FRAUD_FACTOR_VELOCITY":     3,
		"FRAUD_FACTOR_TRUST":        4,
		"FRAUD_FACTOR_DURATION":     5,
		"FRAUD_FACTOR_OTHER":        6,
	}
)

func (x FraudFactor_Factor) Enum() *FraudFactor_Factor {
	p := new(FraudFactor_Factor)
	*p = x
	return p
}

func (x FraudFactor_Factor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FraudFactor_Factor) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_fraud_proto_enumTypes[3].Descriptor()
}

func (FraudFactor_Factor) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_fraud_proto_enumTypes[3]
}

func (x FraudFactor_Factor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FraudFactor_Factor.Descriptor instead.
func (FraudFactor_Factor) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_fraud_proto_rawDescGZIP(), []int{2, 1}
}

type FraudResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FraudCheckId     string                 `protobuf:"bytes,1,opt,name=fraud_check_id,json=fraudCheckId,proto3" json:"fraud_check_id,omitempty"`
	OverallScore     *FraudScore            `protobuf:"bytes,2,opt,name=overall_score,json=overallScore,proto3" json:"overall_score,omitempty"`
	SubScores        []*FraudScore          `protobuf:"bytes,3,rep,name=sub_scores,json=subScores,proto3" json:"sub_scores,omitempty"`
	SuggestedAction  SuggestedAction        `protobuf:"varint,4,opt,name=suggested_action,json=suggestedAction,proto3,enum=chargehive.chtype.SuggestedAction" json:"suggested_action,omitempty"`
	ScanTime         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=scan_time,json=scanTime,proto3" json:"scan_time,omitempty"`
	ConnectorLibrary string                 `protobuf:"bytes,6,opt,name=connector_library,json=connectorLibrary,proto3" json:"connector_library,omitempty"`
	AdditionalData   map[string]string      `protobuf:"bytes,7,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	InfoLinks        map[string]string      `protobuf:"bytes,8,rep,name=info_links,json=infoLinks,proto3" json:"info_links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FraudResult) Reset() {
	*x = FraudResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chargehive_chtype_fraud_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FraudResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FraudResult) ProtoMessage() {}

func (x *FraudResult) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_fraud_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FraudResult.ProtoReflect.Descriptor instead.
func (*FraudResult) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_fraud_proto_rawDescGZIP(), []int{0}
}

func (x *FraudResult) GetFraudCheckId() string {
	if x != nil {
		return x.FraudCheckId
	}
	return ""
}

func (x *FraudResult) GetOverallScore() *FraudScore {
	if x != nil {
		return x.OverallScore
	}
	return nil
}

func (x *FraudResult) GetSubScores() []*FraudScore {
	if x != nil {
		return x.SubScores
	}
	return nil
}

func (x *FraudResult) GetSuggestedAction() SuggestedAction {
	if x != nil {
		return x.SuggestedAction
	}
	return SuggestedAction_SUGGESTED_ACTION_INVALID
}

func (x *FraudResult) GetScanTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScanTime
	}
	return nil
}

func (x *FraudResult) GetConnectorLibrary() string {
	if x != nil {
		return x.ConnectorLibrary
	}
	return ""
}

func (x *FraudResult) GetAdditionalData() map[string]string {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

func (x *FraudResult) GetInfoLinks() map[string]string {
	if x != nil {
		return x.InfoLinks
	}
	return nil
}

type FraudScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score     float32           `protobuf:"fixed32,1,opt,name=score,proto3" json:"score,omitempty"`
	RiskLevel RiskLevel         `protobuf:"varint,2,opt,name=risk_level,json=riskLevel,proto3,enum=chargehive.chtype.RiskLevel" json:"risk_level,omitempty"`
	Factor    *FraudFactor      `protobuf:"bytes,4,opt,name=factor,proto3" json:"factor,omitempty"`
	Summary   string            `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`
	Data      map[string]string `protobuf:"bytes,7,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FraudScore) Reset() {
	*x = FraudScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chargehive_chtype_fraud_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FraudScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FraudScore) ProtoMessage() {}

func (x *FraudScore) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_fraud_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FraudScore.ProtoReflect.Descriptor instead.
func (*FraudScore) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_fraud_proto_rawDescGZIP(), []int{1}
}

func (x *FraudScore) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *FraudScore) GetRiskLevel() RiskLevel {
	if x != nil {
		return x.RiskLevel
	}
	return RiskLevel_RISK_LEVEL_INVALID
}

func (x *FraudScore) GetFactor() *FraudFactor {
	if x != nil {
		return x.Factor
	}
	return nil
}

func (x *FraudScore) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *FraudScore) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type FraudFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	On          FraudFactor_On     `protobuf:"varint,1,opt,name=on,proto3,enum=chargehive.chtype.FraudFactor_On" json:"on,omitempty"`
	Factor      FraudFactor_Factor `protobuf:"varint,2,opt,name=factor,proto3,enum=chargehive.chtype.FraudFactor_Factor" json:"factor,omitempty"`
	OtherOn     string             `protobuf:"bytes,3,opt,name=other_on,json=otherOn,proto3" json:"other_on,omitempty"`
	OtherFactor string             `protobuf:"bytes,4,opt,name=other_factor,json=otherFactor,proto3" json:"other_factor,omitempty"`
}

func (x *FraudFactor) Reset() {
	*x = FraudFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chargehive_chtype_fraud_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FraudFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FraudFactor) ProtoMessage() {}

func (x *FraudFactor) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_fraud_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FraudFactor.ProtoReflect.Descriptor instead.
func (*FraudFactor) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_fraud_proto_rawDescGZIP(), []int{2}
}

func (x *FraudFactor) GetOn() FraudFactor_On {
	if x != nil {
		return x.On
	}
	return FraudFactor_FRAUD_FACTOR_ON_INVALID
}

func (x *FraudFactor) GetFactor() FraudFactor_Factor {
	if x != nil {
		return x.Factor
	}
	return FraudFactor_FRAUD_FACTOR_INVALID
}

func (x *FraudFactor) GetOtherOn() string {
	if x != nil {
		return x.OtherOn
	}
	return ""
}

func (x *FraudFactor) GetOtherFactor() string {
	if x != nil {
		return x.OtherFactor
	}
	return ""
}

var File_chargehive_chtype_fraud_proto protoreflect.FileDescriptor

var file_chargehive_chtype_fraud_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79,
	0x70, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x96, 0x05, 0x0a, 0x0b, 0x46, 0x72, 0x61, 0x75, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x75, 0x64, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x61,
	0x75, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x72, 0x61, 0x75, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x0c, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3c, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63,
	0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x72, 0x61, 0x75, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x12, 0x5b, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x72,
	0x61, 0x75, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a,
	0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63,
	0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x72, 0x61, 0x75, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c,
	0x0a, 0x0e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x02, 0x0a,
	0x0a, 0x46, 0x72, 0x61, 0x75, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x36,
	0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x46, 0x72, 0x61, 0x75, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x46, 0x72, 0x61, 0x75, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a,
	0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3, 0x08, 0x0a, 0x0b, 0x46, 0x72, 0x61, 0x75, 0x64,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x72, 0x61, 0x75, 0x64, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x4f, 0x6e, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x72,
	0x61, 0x75, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x4f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xac, 0x05, 0x0a, 0x02, 0x4f, 0x6e, 0x12, 0x1b, 0x0a,
	0x17, 0x46, 0x52, 0x41, 0x55, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x52,
	0x41, 0x55, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x52, 0x41, 0x55, 0x44,
	0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x52, 0x41, 0x55, 0x44, 0x5f, 0x46, 0x41,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x49, 0x50, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17,
	0x46, 0x52, 0x41, 0x55, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x52, 0x41,
	0x55, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x52, 0x41, 0x55, 0x44, 0x5f, 0x46, 0x41,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x10, 0x06, 0x12, 0x1a,
	0x0a, 0x16, 0x46, 0x52, 0x41, 0x55, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x52,
	0x41, 0x55, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x52, 0x41, 0x55, 0x44, 0x5f, 0x46,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x44,
	0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x52, 0x41, 0x55, 0x44,
	0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x52, 0x41, 0x55, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x10, 0x0b, 0x12,
	0x1a, 0x0a, 0x16, 0x46, 0x52, 0x41, 0x55, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x52, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x46,
	0x52, 0x41, 0x55, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x42,
	0x49, 0x4e, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x52, 0x41, 0x55, 0x44, 0x5f, 0x46, 0x41,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x0e,
	0x12, 0x1c, 0x0a, 0x18, 0x46, 0x52, 0x41, 0x55, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x1a,
	0x0a, 0x16, 0x46, 0x52, 0x41, 0x55, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f,
	0x4e, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x52,
	0x41, 0x55, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x50, 0x48,
	0x4f, 0x4e, 0x45, 0x10, 0x11, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x52, 0x41, 0x55, 0x44, 0x5f, 0x46,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47,
	0x45, 0x10, 0x12, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x52, 0x41, 0x55, 0x44, 0x5f, 0x46, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x54, 0x4f, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x13, 0x12, 0x28, 0x0a, 0x24,
	0x46, 0x52, 0x41, 0x55, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x5f,
	0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x48, 0x49, 0x50,
	0x50, 0x49, 0x4e, 0x47, 0x10, 0x14, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x52, 0x41, 0x55, 0x44, 0x5f,
	0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x49, 0x50, 0x10, 0x15, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x52,
	0x41, 0x55, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x16, 0x22, 0xc4, 0x01, 0x0a, 0x06, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x14, 0x46, 0x52, 0x41, 0x55, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x52,
	0x41, 0x55, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x52, 0x41,
	0x55, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x52, 0x41, 0x55, 0x44, 0x5f,
	0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x56, 0x45, 0x4c, 0x4f, 0x43, 0x49, 0x54, 0x59, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x52, 0x41, 0x55, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x52, 0x41,
	0x55, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x52, 0x41, 0x55, 0x44, 0x5f, 0x46, 0x41,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x06, 0x2a, 0xa7, 0x01, 0x0a,
	0x0f, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x45, 0x44, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x02, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x4e, 0x59, 0x10, 0x04, 0x2a, 0xbb, 0x01, 0x0a, 0x09, 0x52, 0x69, 0x73, 0x6b, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x45, 0x47, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x10,
	0x0a, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x10, 0x1e, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x49, 0x53, 0x4b, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x32,
	0x12, 0x1a, 0x0a, 0x16, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x49, 0x46, 0x49, 0x43, 0x41, 0x4e, 0x54, 0x10, 0x46, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x45, 0x10, 0x5a, 0x42, 0x67, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0xca, 0x02, 0x11, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x48, 0x69, 0x76, 0x65, 0x5c, 0x43, 0x68, 0x74, 0x79, 0x70, 0x65,
	0xe2, 0x02, 0x1a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x48, 0x69, 0x76, 0x65, 0x5c, 0x43, 0x68,
	0x74, 0x79, 0x70, 0x65, 0x5c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chargehive_chtype_fraud_proto_rawDescOnce sync.Once
	file_chargehive_chtype_fraud_proto_rawDescData = file_chargehive_chtype_fraud_proto_rawDesc
)

func file_chargehive_chtype_fraud_proto_rawDescGZIP() []byte {
	file_chargehive_chtype_fraud_proto_rawDescOnce.Do(func() {
		file_chargehive_chtype_fraud_proto_rawDescData = protoimpl.X.CompressGZIP(file_chargehive_chtype_fraud_proto_rawDescData)
	})
	return file_chargehive_chtype_fraud_proto_rawDescData
}

var file_chargehive_chtype_fraud_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_chargehive_chtype_fraud_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_chargehive_chtype_fraud_proto_goTypes = []any{
	(SuggestedAction)(0),          // 0: chargehive.chtype.SuggestedAction
	(RiskLevel)(0),                // 1: chargehive.chtype.RiskLevel
	(FraudFactor_On)(0),           // 2: chargehive.chtype.FraudFactor.On
	(FraudFactor_Factor)(0),       // 3: chargehive.chtype.FraudFactor.Factor
	(*FraudResult)(nil),           // 4: chargehive.chtype.FraudResult
	(*FraudScore)(nil),            // 5: chargehive.chtype.FraudScore
	(*FraudFactor)(nil),           // 6: chargehive.chtype.FraudFactor
	nil,                           // 7: chargehive.chtype.FraudResult.AdditionalDataEntry
	nil,                           // 8: chargehive.chtype.FraudResult.InfoLinksEntry
	nil,                           // 9: chargehive.chtype.FraudScore.DataEntry
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
}
var file_chargehive_chtype_fraud_proto_depIdxs = []int32{
	5,  // 0: chargehive.chtype.FraudResult.overall_score:type_name -> chargehive.chtype.FraudScore
	5,  // 1: chargehive.chtype.FraudResult.sub_scores:type_name -> chargehive.chtype.FraudScore
	0,  // 2: chargehive.chtype.FraudResult.suggested_action:type_name -> chargehive.chtype.SuggestedAction
	10, // 3: chargehive.chtype.FraudResult.scan_time:type_name -> google.protobuf.Timestamp
	7,  // 4: chargehive.chtype.FraudResult.additional_data:type_name -> chargehive.chtype.FraudResult.AdditionalDataEntry
	8,  // 5: chargehive.chtype.FraudResult.info_links:type_name -> chargehive.chtype.FraudResult.InfoLinksEntry
	1,  // 6: chargehive.chtype.FraudScore.risk_level:type_name -> chargehive.chtype.RiskLevel
	6,  // 7: chargehive.chtype.FraudScore.factor:type_name -> chargehive.chtype.FraudFactor
	9,  // 8: chargehive.chtype.FraudScore.data:type_name -> chargehive.chtype.FraudScore.DataEntry
	2,  // 9: chargehive.chtype.FraudFactor.on:type_name -> chargehive.chtype.FraudFactor.On
	3,  // 10: chargehive.chtype.FraudFactor.factor:type_name -> chargehive.chtype.FraudFactor.Factor
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_chargehive_chtype_fraud_proto_init() }
func file_chargehive_chtype_fraud_proto_init() {
	if File_chargehive_chtype_fraud_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chargehive_chtype_fraud_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FraudResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chargehive_chtype_fraud_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*FraudScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chargehive_chtype_fraud_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*FraudFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chargehive_chtype_fraud_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chargehive_chtype_fraud_proto_goTypes,
		DependencyIndexes: file_chargehive_chtype_fraud_proto_depIdxs,
		EnumInfos:         file_chargehive_chtype_fraud_proto_enumTypes,
		MessageInfos:      file_chargehive_chtype_fraud_proto_msgTypes,
	}.Build()
	File_chargehive_chtype_fraud_proto = out.File
	file_chargehive_chtype_fraud_proto_rawDesc = nil
	file_chargehive_chtype_fraud_proto_goTypes = nil
	file_chargehive_chtype_fraud_proto_depIdxs = nil
}
