// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.3
// source: chargehive/chtype/charge.proto

package chtype

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChargeMetaType int32

const (
	ChargeMetaType_CHARGE_META_TYPE_INVALID ChargeMetaType = 0
	ChargeMetaType_CHARGE_META_TYPE_SOURCE  ChargeMetaType = 1 // Used as the base meta
	ChargeMetaType_CHARGE_META_TYPE_APPEND  ChargeMetaType = 2 // Appended to the base meta
)

// Enum value maps for ChargeMetaType.
var (
	ChargeMetaType_name = map[int32]string{
		0: "CHARGE_META_TYPE_INVALID",
		1: "CHARGE_META_TYPE_SOURCE",
		2: "CHARGE_META_TYPE_APPEND",
	}
	ChargeMetaType_value = map[string]int32{
		"CHARGE_META_TYPE_INVALID": 0,
		"CHARGE_META_TYPE_SOURCE":  1,
		"CHARGE_META_TYPE_APPEND":  2,
	}
)

func (x ChargeMetaType) Enum() *ChargeMetaType {
	p := new(ChargeMetaType)
	*p = x
	return p
}

func (x ChargeMetaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargeMetaType) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_charge_proto_enumTypes[0].Descriptor()
}

func (ChargeMetaType) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_charge_proto_enumTypes[0]
}

func (x ChargeMetaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargeMetaType.Descriptor instead.
func (ChargeMetaType) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_charge_proto_rawDescGZIP(), []int{0}
}

type ChargeIntent int32

const (
	ChargeIntent_CHARGE_INTENT_INVALID        ChargeIntent = 0
	ChargeIntent_CHARGE_INTENT_METHOD_ADD     ChargeIntent = 1 //Add a new method to a profile
	ChargeIntent_CHARGE_INTENT_METHOD_REFRESH ChargeIntent = 2 // Request the method to be 'refreshed' / submitted for updated
	ChargeIntent_CHARGE_INTENT_METHOD_VERIFY  ChargeIntent = 3 // Verify a method is still valid / authorized
	ChargeIntent_CHARGE_INTENT_CAPTURE        ChargeIntent = 4 //Request to capture funds
	ChargeIntent_CHARGE_INTENT_REFUND         ChargeIntent = 5
)

// Enum value maps for ChargeIntent.
var (
	ChargeIntent_name = map[int32]string{
		0: "CHARGE_INTENT_INVALID",
		1: "CHARGE_INTENT_METHOD_ADD",
		2: "CHARGE_INTENT_METHOD_REFRESH",
		3: "CHARGE_INTENT_METHOD_VERIFY",
		4: "CHARGE_INTENT_CAPTURE",
		5: "CHARGE_INTENT_REFUND",
	}
	ChargeIntent_value = map[string]int32{
		"CHARGE_INTENT_INVALID":        0,
		"CHARGE_INTENT_METHOD_ADD":     1,
		"CHARGE_INTENT_METHOD_REFRESH": 2,
		"CHARGE_INTENT_METHOD_VERIFY":  3,
		"CHARGE_INTENT_CAPTURE":        4,
		"CHARGE_INTENT_REFUND":         5,
	}
)

func (x ChargeIntent) Enum() *ChargeIntent {
	p := new(ChargeIntent)
	*p = x
	return p
}

func (x ChargeIntent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargeIntent) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_charge_proto_enumTypes[1].Descriptor()
}

func (ChargeIntent) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_charge_proto_enumTypes[1]
}

func (x ChargeIntent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargeIntent.Descriptor instead.
func (ChargeIntent) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_charge_proto_rawDescGZIP(), []int{1}
}

type ChargeEnvironment int32

const (
	ChargeEnvironment_CHARGE_ENVIRONMENT_INVALID   ChargeEnvironment = 0
	ChargeEnvironment_CHARGE_ENVIRONMENT_RETAIL    ChargeEnvironment = 1 //Method & Owner present
	ChargeEnvironment_CHARGE_ENVIRONMENT_ECOMMERCE ChargeEnvironment = 2 //Owner present, method not present
	ChargeEnvironment_CHARGE_ENVIRONMENT_MOTO      ChargeEnvironment = 3 //Owner and method not present
	ChargeEnvironment_CHARGE_ENVIRONMENT_RENEWAL   ChargeEnvironment = 4 //Owner and method not present, renewing from ecommerce or moto
)

// Enum value maps for ChargeEnvironment.
var (
	ChargeEnvironment_name = map[int32]string{
		0: "CHARGE_ENVIRONMENT_INVALID",
		1: "CHARGE_ENVIRONMENT_RETAIL",
		2: "CHARGE_ENVIRONMENT_ECOMMERCE",
		3: "CHARGE_ENVIRONMENT_MOTO",
		4: "CHARGE_ENVIRONMENT_RENEWAL",
	}
	ChargeEnvironment_value = map[string]int32{
		"CHARGE_ENVIRONMENT_INVALID":   0,
		"CHARGE_ENVIRONMENT_RETAIL":    1,
		"CHARGE_ENVIRONMENT_ECOMMERCE": 2,
		"CHARGE_ENVIRONMENT_MOTO":      3,
		"CHARGE_ENVIRONMENT_RENEWAL":   4,
	}
)

func (x ChargeEnvironment) Enum() *ChargeEnvironment {
	p := new(ChargeEnvironment)
	*p = x
	return p
}

func (x ChargeEnvironment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargeEnvironment) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_charge_proto_enumTypes[2].Descriptor()
}

func (ChargeEnvironment) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_charge_proto_enumTypes[2]
}

func (x ChargeEnvironment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargeEnvironment.Descriptor instead.
func (ChargeEnvironment) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_charge_proto_rawDescGZIP(), []int{2}
}

type DeviceType int32

const (
	DeviceType_DEVICE_TYPE_INVALID  DeviceType = 0
	DeviceType_DEVICE_TYPE_MOBILE   DeviceType = 1
	DeviceType_DEVICE_TYPE_TABLET   DeviceType = 2
	DeviceType_DEVICE_TYPE_DESKTOP  DeviceType = 3
	DeviceType_DEVICE_TYPE_WEARABLE DeviceType = 4
	DeviceType_DEVICE_TYPE_CONSOLE  DeviceType = 5
	DeviceType_DEVICE_TYPE_VEHICLE  DeviceType = 6
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "DEVICE_TYPE_INVALID",
		1: "DEVICE_TYPE_MOBILE",
		2: "DEVICE_TYPE_TABLET",
		3: "DEVICE_TYPE_DESKTOP",
		4: "DEVICE_TYPE_WEARABLE",
		5: "DEVICE_TYPE_CONSOLE",
		6: "DEVICE_TYPE_VEHICLE",
	}
	DeviceType_value = map[string]int32{
		"DEVICE_TYPE_INVALID":  0,
		"DEVICE_TYPE_MOBILE":   1,
		"DEVICE_TYPE_TABLET":   2,
		"DEVICE_TYPE_DESKTOP":  3,
		"DEVICE_TYPE_WEARABLE": 4,
		"DEVICE_TYPE_CONSOLE":  5,
		"DEVICE_TYPE_VEHICLE":  6,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_charge_proto_enumTypes[3].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_charge_proto_enumTypes[3]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_charge_proto_rawDescGZIP(), []int{3}
}

type StatementDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Phone   string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *StatementDescriptor) Reset() {
	*x = StatementDescriptor{}
	mi := &file_chargehive_chtype_charge_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatementDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatementDescriptor) ProtoMessage() {}

func (x *StatementDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_charge_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatementDescriptor.ProtoReflect.Descriptor instead.
func (*StatementDescriptor) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_charge_proto_rawDescGZIP(), []int{0}
}

func (x *StatementDescriptor) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StatementDescriptor) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type Charge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeId            string                    `protobuf:"bytes,1,opt,name=charge_id,json=chargeId,proto3" json:"charge_id,omitempty"`
	Version             string                    `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Intent              ChargeIntent              `protobuf:"varint,3,opt,name=intent,proto3,enum=chargehive.chtype.ChargeIntent" json:"intent,omitempty"`
	Contract            ContractType              `protobuf:"varint,4,opt,name=contract,proto3,enum=chargehive.chtype.ContractType" json:"contract,omitempty"`
	Amount              *Amount                   `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	PaymentMethodIds    []string                  `protobuf:"bytes,6,rep,name=payment_method_ids,json=paymentMethodIds,proto3" json:"payment_method_ids,omitempty"`
	ExpiryTime          *timestamppb.Timestamp    `protobuf:"bytes,7,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	MerchantReference   string                    `protobuf:"bytes,8,opt,name=merchant_reference,json=merchantReference,proto3" json:"merchant_reference,omitempty"`
	StatementDescriptor *StatementDescriptor      `protobuf:"bytes,9,opt,name=statement_descriptor,json=statementDescriptor,proto3" json:"statement_descriptor,omitempty"`
	References          map[string]string         `protobuf:"bytes,10,rep,name=references,proto3" json:"references,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels              []*Label                  `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty"`
	ChargeKey           string                    `protobuf:"bytes,12,opt,name=charge_key,json=chargeKey,proto3" json:"charge_key,omitempty"`
	UserLocale          string                    `protobuf:"bytes,13,opt,name=user_locale,json=userLocale,proto3" json:"user_locale,omitempty"`
	UserLocation        string                    `protobuf:"bytes,14,opt,name=user_location,json=userLocation,proto3" json:"user_location,omitempty"`
	Environment         ChargeEnvironment         `protobuf:"varint,15,opt,name=environment,proto3,enum=chargehive.chtype.ChargeEnvironment" json:"environment,omitempty"`
	Language            Language                  `protobuf:"varint,16,opt,name=language,proto3,enum=chargehive.chtype.Language" json:"language,omitempty"`
	PreferredMethodType PaymentMethodType         `protobuf:"varint,17,opt,name=preferred_method_type,json=preferredMethodType,proto3,enum=chargehive.chtype.PaymentMethodType" json:"preferred_method_type,omitempty"`
	BillingProfileId    string                    `protobuf:"bytes,18,opt,name=billing_profile_id,json=billingProfileId,proto3" json:"billing_profile_id,omitempty"`
	InitialTransaction  []*InitialTransactionData `protobuf:"bytes,19,rep,name=initial_transaction,json=initialTransaction,proto3" json:"initial_transaction,omitempty"`
	SubscriptionId      string                    `protobuf:"bytes,20,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	ChallengeWindowSize string                    `protobuf:"bytes,21,opt,name=challenge_window_size,json=challengeWindowSize,proto3" json:"challenge_window_size,omitempty"`
}

func (x *Charge) Reset() {
	*x = Charge{}
	mi := &file_chargehive_chtype_charge_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Charge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Charge) ProtoMessage() {}

func (x *Charge) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_charge_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Charge.ProtoReflect.Descriptor instead.
func (*Charge) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_charge_proto_rawDescGZIP(), []int{1}
}

func (x *Charge) GetChargeId() string {
	if x != nil {
		return x.ChargeId
	}
	return ""
}

func (x *Charge) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Charge) GetIntent() ChargeIntent {
	if x != nil {
		return x.Intent
	}
	return ChargeIntent_CHARGE_INTENT_INVALID
}

func (x *Charge) GetContract() ContractType {
	if x != nil {
		return x.Contract
	}
	return ContractType_CONTRACT_TYPE_INVALID
}

func (x *Charge) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Charge) GetPaymentMethodIds() []string {
	if x != nil {
		return x.PaymentMethodIds
	}
	return nil
}

func (x *Charge) GetExpiryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

func (x *Charge) GetMerchantReference() string {
	if x != nil {
		return x.MerchantReference
	}
	return ""
}

func (x *Charge) GetStatementDescriptor() *StatementDescriptor {
	if x != nil {
		return x.StatementDescriptor
	}
	return nil
}

func (x *Charge) GetReferences() map[string]string {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *Charge) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Charge) GetChargeKey() string {
	if x != nil {
		return x.ChargeKey
	}
	return ""
}

func (x *Charge) GetUserLocale() string {
	if x != nil {
		return x.UserLocale
	}
	return ""
}

func (x *Charge) GetUserLocation() string {
	if x != nil {
		return x.UserLocation
	}
	return ""
}

func (x *Charge) GetEnvironment() ChargeEnvironment {
	if x != nil {
		return x.Environment
	}
	return ChargeEnvironment_CHARGE_ENVIRONMENT_INVALID
}

func (x *Charge) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_LANGUAGE_INVALID
}

func (x *Charge) GetPreferredMethodType() PaymentMethodType {
	if x != nil {
		return x.PreferredMethodType
	}
	return PaymentMethodType_PAYMENT_METHOD_TYPE_INVALID
}

func (x *Charge) GetBillingProfileId() string {
	if x != nil {
		return x.BillingProfileId
	}
	return ""
}

func (x *Charge) GetInitialTransaction() []*InitialTransactionData {
	if x != nil {
		return x.InitialTransaction
	}
	return nil
}

func (x *Charge) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *Charge) GetChallengeWindowSize() string {
	if x != nil {
		return x.ChallengeWindowSize
	}
	return ""
}

type ChargeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionId string                 `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	RenewalNumber  int32                  `protobuf:"varint,2,opt,name=renewal_number,json=renewalNumber,proto3" json:"renewal_number,omitempty"`
	Duration       int64                  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	StartDate      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	ProductType    ProductType            `protobuf:"varint,6,opt,name=product_type,json=productType,proto3,enum=chargehive.chtype.ProductType" json:"product_type,omitempty"`
	SkuType        SKUType                `protobuf:"varint,7,opt,name=sku_type,json=skuType,proto3,enum=chargehive.chtype.SKUType" json:"sku_type,omitempty"`
	Delivery       *Delivery              `protobuf:"bytes,8,opt,name=delivery,proto3" json:"delivery,omitempty"`
	Quantity       int64                  `protobuf:"varint,9,opt,name=quantity,proto3" json:"quantity,omitempty"`
	UnitPrice      *Amount                `protobuf:"bytes,10,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	TaxAmount      *Amount                `protobuf:"bytes,11,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	DiscountAmount *Amount                `protobuf:"bytes,12,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`
	Name           string                 `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                 `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	ProductCode    string                 `protobuf:"bytes,15,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
	SkuCode        string                 `protobuf:"bytes,16,opt,name=sku_code,json=skuCode,proto3" json:"sku_code,omitempty"`
	TermUnits      int64                  `protobuf:"varint,17,opt,name=term_units,json=termUnits,proto3" json:"term_units,omitempty"`
	TermType       TermType               `protobuf:"varint,18,opt,name=term_type,json=termType,proto3,enum=chargehive.chtype.TermType" json:"term_type,omitempty"`
}

func (x *ChargeItem) Reset() {
	*x = ChargeItem{}
	mi := &file_chargehive_chtype_charge_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChargeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeItem) ProtoMessage() {}

func (x *ChargeItem) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_charge_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeItem.ProtoReflect.Descriptor instead.
func (*ChargeItem) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_charge_proto_rawDescGZIP(), []int{2}
}

func (x *ChargeItem) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *ChargeItem) GetRenewalNumber() int32 {
	if x != nil {
		return x.RenewalNumber
	}
	return 0
}

func (x *ChargeItem) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ChargeItem) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ChargeItem) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ChargeItem) GetProductType() ProductType {
	if x != nil {
		return x.ProductType
	}
	return ProductType_PRODUCT_TYPE_INVALID
}

func (x *ChargeItem) GetSkuType() SKUType {
	if x != nil {
		return x.SkuType
	}
	return SKUType_SKU_TYPE_INVALID
}

func (x *ChargeItem) GetDelivery() *Delivery {
	if x != nil {
		return x.Delivery
	}
	return nil
}

func (x *ChargeItem) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ChargeItem) GetUnitPrice() *Amount {
	if x != nil {
		return x.UnitPrice
	}
	return nil
}

func (x *ChargeItem) GetTaxAmount() *Amount {
	if x != nil {
		return x.TaxAmount
	}
	return nil
}

func (x *ChargeItem) GetDiscountAmount() *Amount {
	if x != nil {
		return x.DiscountAmount
	}
	return nil
}

func (x *ChargeItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChargeItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChargeItem) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *ChargeItem) GetSkuCode() string {
	if x != nil {
		return x.SkuCode
	}
	return ""
}

func (x *ChargeItem) GetTermUnits() int64 {
	if x != nil {
		return x.TermUnits
	}
	return 0
}

func (x *ChargeItem) GetTermType() TermType {
	if x != nil {
		return x.TermType
	}
	return TermType_TERM_TYPE_INVALID
}

type ChargeMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingAddress  *Address               `protobuf:"bytes,1,opt,name=billing_address,json=billingAddress,proto3" json:"billing_address,omitempty"`
	DeliveryAddress *Address               `protobuf:"bytes,2,opt,name=delivery_address,json=deliveryAddress,proto3" json:"delivery_address,omitempty"`
	Items           []*ChargeItem          `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	Terms           string                 `protobuf:"bytes,4,opt,name=terms,proto3" json:"terms,omitempty"`
	Note            string                 `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
	MerchantMemo    string                 `protobuf:"bytes,6,opt,name=merchant_memo,json=merchantMemo,proto3" json:"merchant_memo,omitempty"`
	InvoiceDate     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=invoice_date,json=invoiceDate,proto3" json:"invoice_date,omitempty"`
	DueDate         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	DiscountAmount  *Amount                `protobuf:"bytes,9,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`
	DeliveryAmount  *Amount                `protobuf:"bytes,10,opt,name=delivery_amount,json=deliveryAmount,proto3" json:"delivery_amount,omitempty"`
	TaxAmount       *Amount                `protobuf:"bytes,11,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	TotalAmount     *Amount                `protobuf:"bytes,12,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	Person          *Person                `protobuf:"bytes,13,opt,name=person,proto3" json:"person,omitempty"`
	Company         *Company               `protobuf:"bytes,14,opt,name=company,proto3" json:"company,omitempty"`
	IpAddress       string                 `protobuf:"bytes,15,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Delivery        *Delivery              `protobuf:"bytes,16,opt,name=delivery,proto3" json:"delivery,omitempty"`
	Device          *Device                `protobuf:"bytes,17,opt,name=device,proto3" json:"device,omitempty"`
	CustomerId      string                 `protobuf:"bytes,18,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	PlacementId     string                 `protobuf:"bytes,19,opt,name=placement_id,json=placementId,proto3" json:"placement_id,omitempty"`
}

func (x *ChargeMeta) Reset() {
	*x = ChargeMeta{}
	mi := &file_chargehive_chtype_charge_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChargeMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeMeta) ProtoMessage() {}

func (x *ChargeMeta) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_charge_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeMeta.ProtoReflect.Descriptor instead.
func (*ChargeMeta) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_charge_proto_rawDescGZIP(), []int{3}
}

func (x *ChargeMeta) GetBillingAddress() *Address {
	if x != nil {
		return x.BillingAddress
	}
	return nil
}

func (x *ChargeMeta) GetDeliveryAddress() *Address {
	if x != nil {
		return x.DeliveryAddress
	}
	return nil
}

func (x *ChargeMeta) GetItems() []*ChargeItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ChargeMeta) GetTerms() string {
	if x != nil {
		return x.Terms
	}
	return ""
}

func (x *ChargeMeta) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *ChargeMeta) GetMerchantMemo() string {
	if x != nil {
		return x.MerchantMemo
	}
	return ""
}

func (x *ChargeMeta) GetInvoiceDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoiceDate
	}
	return nil
}

func (x *ChargeMeta) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *ChargeMeta) GetDiscountAmount() *Amount {
	if x != nil {
		return x.DiscountAmount
	}
	return nil
}

func (x *ChargeMeta) GetDeliveryAmount() *Amount {
	if x != nil {
		return x.DeliveryAmount
	}
	return nil
}

func (x *ChargeMeta) GetTaxAmount() *Amount {
	if x != nil {
		return x.TaxAmount
	}
	return nil
}

func (x *ChargeMeta) GetTotalAmount() *Amount {
	if x != nil {
		return x.TotalAmount
	}
	return nil
}

func (x *ChargeMeta) GetPerson() *Person {
	if x != nil {
		return x.Person
	}
	return nil
}

func (x *ChargeMeta) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *ChargeMeta) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ChargeMeta) GetDelivery() *Delivery {
	if x != nil {
		return x.Delivery
	}
	return nil
}

func (x *ChargeMeta) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *ChargeMeta) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ChargeMeta) GetPlacementId() string {
	if x != nil {
		return x.PlacementId
	}
	return ""
}

type Delivery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Standard     DeliveryStandard `protobuf:"varint,1,opt,name=standard,proto3,enum=chargehive.chtype.DeliveryStandard" json:"standard,omitempty"`
	Type         DeliveryType     `protobuf:"varint,2,opt,name=type,proto3,enum=chargehive.chtype.DeliveryType" json:"type,omitempty"`
	TrackingCode string           `protobuf:"bytes,3,opt,name=tracking_code,json=trackingCode,proto3" json:"tracking_code,omitempty"`
	Courier      string           `protobuf:"bytes,4,opt,name=courier,proto3" json:"courier,omitempty"`
}

func (x *Delivery) Reset() {
	*x = Delivery{}
	mi := &file_chargehive_chtype_charge_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Delivery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delivery) ProtoMessage() {}

func (x *Delivery) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_charge_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delivery.ProtoReflect.Descriptor instead.
func (*Delivery) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_charge_proto_rawDescGZIP(), []int{4}
}

func (x *Delivery) GetStandard() DeliveryStandard {
	if x != nil {
		return x.Standard
	}
	return DeliveryStandard_DELIVERY_STANDARD_INVALID
}

func (x *Delivery) GetType() DeliveryType {
	if x != nil {
		return x.Type
	}
	return DeliveryType_DELIVERY_TYPE_INVALID
}

func (x *Delivery) GetTrackingCode() string {
	if x != nil {
		return x.TrackingCode
	}
	return ""
}

func (x *Delivery) GetCourier() string {
	if x != nil {
		return x.Courier
	}
	return ""
}

type ChargeSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount *Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Status Status  `protobuf:"varint,2,opt,name=status,proto3,enum=chargehive.chtype.Status" json:"status,omitempty"`
}

func (x *ChargeSummary) Reset() {
	*x = ChargeSummary{}
	mi := &file_chargehive_chtype_charge_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChargeSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeSummary) ProtoMessage() {}

func (x *ChargeSummary) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_charge_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeSummary.ProtoReflect.Descriptor instead.
func (*ChargeSummary) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_charge_proto_rawDescGZIP(), []int{5}
}

func (x *ChargeSummary) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ChargeSummary) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_INVALID
}

type Dimension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  int32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *Dimension) Reset() {
	*x = Dimension{}
	mi := &file_chargehive_chtype_charge_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dimension) ProtoMessage() {}

func (x *Dimension) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_charge_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dimension.ProtoReflect.Descriptor instead.
func (*Dimension) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_charge_proto_rawDescGZIP(), []int{6}
}

func (x *Dimension) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Dimension) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrowserAcceptHeader string            `protobuf:"bytes,1,opt,name=browser_accept_header,json=browserAcceptHeader,proto3" json:"browser_accept_header,omitempty"`
	ColorDepth          int32             `protobuf:"varint,2,opt,name=color_depth,json=colorDepth,proto3" json:"color_depth,omitempty"`
	JavaEnabled         bool              `protobuf:"varint,3,opt,name=java_enabled,json=javaEnabled,proto3" json:"java_enabled,omitempty"`
	JavascriptEnabled   bool              `protobuf:"varint,4,opt,name=javascript_enabled,json=javascriptEnabled,proto3" json:"javascript_enabled,omitempty"`
	Language            string            `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty"`
	Screen              *Dimension        `protobuf:"bytes,6,opt,name=screen,proto3" json:"screen,omitempty"`
	ScreenAvailable     *Dimension        `protobuf:"bytes,7,opt,name=screen_available,json=screenAvailable,proto3" json:"screen_available,omitempty"`
	WindowInner         *Dimension        `protobuf:"bytes,8,opt,name=window_inner,json=windowInner,proto3" json:"window_inner,omitempty"`
	WindowOuter         *Dimension        `protobuf:"bytes,9,opt,name=window_outer,json=windowOuter,proto3" json:"window_outer,omitempty"`
	TimezoneOffsetMins  int32             `protobuf:"varint,10,opt,name=timezone_offset_mins,json=timezoneOffsetMins,proto3" json:"timezone_offset_mins,omitempty"`
	UserAgent           string            `protobuf:"bytes,11,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	IpAddress           string            `protobuf:"bytes,12,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	CookiesEnabled      bool              `protobuf:"varint,13,opt,name=cookies_enabled,json=cookiesEnabled,proto3" json:"cookies_enabled,omitempty"`
	FlashVersion        string            `protobuf:"bytes,14,opt,name=flash_version,json=flashVersion,proto3" json:"flash_version,omitempty"`
	IsTouch             bool              `protobuf:"varint,15,opt,name=is_touch,json=isTouch,proto3" json:"is_touch,omitempty"`
	Os                  string            `protobuf:"bytes,16,opt,name=os,proto3" json:"os,omitempty"`
	OsVersion           string            `protobuf:"bytes,17,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	Browser             string            `protobuf:"bytes,18,opt,name=browser,proto3" json:"browser,omitempty"`
	BrowserVersion      string            `protobuf:"bytes,19,opt,name=browser_version,json=browserVersion,proto3" json:"browser_version,omitempty"`
	DeviceManufacturer  string            `protobuf:"bytes,20,opt,name=device_manufacturer,json=deviceManufacturer,proto3" json:"device_manufacturer,omitempty"`
	DeviceName          string            `protobuf:"bytes,21,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	DeviceVersion       string            `protobuf:"bytes,22,opt,name=device_version,json=deviceVersion,proto3" json:"device_version,omitempty"`
	Fingerprint         string            `protobuf:"bytes,23,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	Type                DeviceType        `protobuf:"varint,24,opt,name=type,proto3,enum=chargehive.chtype.DeviceType" json:"type,omitempty"`
	Timezone            string            `protobuf:"bytes,25,opt,name=timezone,proto3" json:"timezone,omitempty"`
	RequestHeaders      map[string]string `protobuf:"bytes,26,rep,name=request_headers,json=requestHeaders,proto3" json:"request_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Device) Reset() {
	*x = Device{}
	mi := &file_chargehive_chtype_charge_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_charge_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_charge_proto_rawDescGZIP(), []int{7}
}

func (x *Device) GetBrowserAcceptHeader() string {
	if x != nil {
		return x.BrowserAcceptHeader
	}
	return ""
}

func (x *Device) GetColorDepth() int32 {
	if x != nil {
		return x.ColorDepth
	}
	return 0
}

func (x *Device) GetJavaEnabled() bool {
	if x != nil {
		return x.JavaEnabled
	}
	return false
}

func (x *Device) GetJavascriptEnabled() bool {
	if x != nil {
		return x.JavascriptEnabled
	}
	return false
}

func (x *Device) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Device) GetScreen() *Dimension {
	if x != nil {
		return x.Screen
	}
	return nil
}

func (x *Device) GetScreenAvailable() *Dimension {
	if x != nil {
		return x.ScreenAvailable
	}
	return nil
}

func (x *Device) GetWindowInner() *Dimension {
	if x != nil {
		return x.WindowInner
	}
	return nil
}

func (x *Device) GetWindowOuter() *Dimension {
	if x != nil {
		return x.WindowOuter
	}
	return nil
}

func (x *Device) GetTimezoneOffsetMins() int32 {
	if x != nil {
		return x.TimezoneOffsetMins
	}
	return 0
}

func (x *Device) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *Device) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Device) GetCookiesEnabled() bool {
	if x != nil {
		return x.CookiesEnabled
	}
	return false
}

func (x *Device) GetFlashVersion() string {
	if x != nil {
		return x.FlashVersion
	}
	return ""
}

func (x *Device) GetIsTouch() bool {
	if x != nil {
		return x.IsTouch
	}
	return false
}

func (x *Device) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *Device) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *Device) GetBrowser() string {
	if x != nil {
		return x.Browser
	}
	return ""
}

func (x *Device) GetBrowserVersion() string {
	if x != nil {
		return x.BrowserVersion
	}
	return ""
}

func (x *Device) GetDeviceManufacturer() string {
	if x != nil {
		return x.DeviceManufacturer
	}
	return ""
}

func (x *Device) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *Device) GetDeviceVersion() string {
	if x != nil {
		return x.DeviceVersion
	}
	return ""
}

func (x *Device) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *Device) GetType() DeviceType {
	if x != nil {
		return x.Type
	}
	return DeviceType_DEVICE_TYPE_INVALID
}

func (x *Device) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *Device) GetRequestHeaders() map[string]string {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

var File_chargehive_chtype_charge_proto protoreflect.FileDescriptor

var file_chargehive_chtype_charge_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74,
	0x79, 0x70, 0x65, 0x1a, 0x1f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2f,
	0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65,
	0x2f, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76,
	0x65, 0x2f, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68,
	0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76,
	0x65, 0x2f, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a, 0x13, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x22, 0xc0, 0x09, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x13, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x12, 0x49, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x5a, 0x0a,
	0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbe, 0x06, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x6b, 0x75, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x4b, 0x55, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x6b, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x08,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x08, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x38, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x74,
	0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6b, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x65, 0x72, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x65, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x65,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0xca, 0x07, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x3d, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x42, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x12, 0x3f, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x72, 0x69, 0x65, 0x72, 0x22, 0x75, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x39, 0x0a, 0x09,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x9c, 0x09, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6a, 0x61, 0x76, 0x61, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6a,
	0x61, 0x76, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6a, 0x61,
	0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x47, 0x0a, 0x10, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x1a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x68, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x48, 0x41, 0x52,
	0x47, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45,
	0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x4d, 0x45,
	0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x02,
	0x2a, 0xbf, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x48,
	0x41, 0x52, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b,
	0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x10, 0x03, 0x12, 0x19, 0x0a,
	0x15, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x52,
	0x47, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44,
	0x10, 0x05, 0x2a, 0xb1, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x41, 0x52,
	0x47, 0x45, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x48, 0x41, 0x52,
	0x47, 0x45, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52,
	0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x48, 0x41, 0x52, 0x47,
	0x45, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x43,
	0x4f, 0x4d, 0x4d, 0x45, 0x52, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x48, 0x41,
	0x52, 0x47, 0x45, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x4f, 0x54, 0x4f, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45,
	0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4e,
	0x45, 0x57, 0x41, 0x4c, 0x10, 0x04, 0x2a, 0xba, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f,
	0x42, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x10, 0x02, 0x12, 0x17,
	0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45,
	0x53, 0x4b, 0x54, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x04, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x4f, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c,
	0x45, 0x10, 0x06, 0x42, 0x67, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x68, 0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0xca, 0x02, 0x11, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x48, 0x69, 0x76, 0x65, 0x5c, 0x43, 0x68, 0x74, 0x79, 0x70, 0x65, 0xe2,
	0x02, 0x1a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x48, 0x69, 0x76, 0x65, 0x5c, 0x43, 0x68, 0x74,
	0x79, 0x70, 0x65, 0x5c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chargehive_chtype_charge_proto_rawDescOnce sync.Once
	file_chargehive_chtype_charge_proto_rawDescData = file_chargehive_chtype_charge_proto_rawDesc
)

func file_chargehive_chtype_charge_proto_rawDescGZIP() []byte {
	file_chargehive_chtype_charge_proto_rawDescOnce.Do(func() {
		file_chargehive_chtype_charge_proto_rawDescData = protoimpl.X.CompressGZIP(file_chargehive_chtype_charge_proto_rawDescData)
	})
	return file_chargehive_chtype_charge_proto_rawDescData
}

var file_chargehive_chtype_charge_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_chargehive_chtype_charge_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_chargehive_chtype_charge_proto_goTypes = []any{
	(ChargeMetaType)(0),            // 0: chargehive.chtype.ChargeMetaType
	(ChargeIntent)(0),              // 1: chargehive.chtype.ChargeIntent
	(ChargeEnvironment)(0),         // 2: chargehive.chtype.ChargeEnvironment
	(DeviceType)(0),                // 3: chargehive.chtype.DeviceType
	(*StatementDescriptor)(nil),    // 4: chargehive.chtype.StatementDescriptor
	(*Charge)(nil),                 // 5: chargehive.chtype.Charge
	(*ChargeItem)(nil),             // 6: chargehive.chtype.ChargeItem
	(*ChargeMeta)(nil),             // 7: chargehive.chtype.ChargeMeta
	(*Delivery)(nil),               // 8: chargehive.chtype.Delivery
	(*ChargeSummary)(nil),          // 9: chargehive.chtype.ChargeSummary
	(*Dimension)(nil),              // 10: chargehive.chtype.Dimension
	(*Device)(nil),                 // 11: chargehive.chtype.Device
	nil,                            // 12: chargehive.chtype.Charge.ReferencesEntry
	nil,                            // 13: chargehive.chtype.Device.RequestHeadersEntry
	(ContractType)(0),              // 14: chargehive.chtype.ContractType
	(*Amount)(nil),                 // 15: chargehive.chtype.Amount
	(*timestamppb.Timestamp)(nil),  // 16: google.protobuf.Timestamp
	(*Label)(nil),                  // 17: chargehive.chtype.Label
	(Language)(0),                  // 18: chargehive.chtype.Language
	(PaymentMethodType)(0),         // 19: chargehive.chtype.PaymentMethodType
	(*InitialTransactionData)(nil), // 20: chargehive.chtype.InitialTransactionData
	(ProductType)(0),               // 21: chargehive.chtype.ProductType
	(SKUType)(0),                   // 22: chargehive.chtype.SKUType
	(TermType)(0),                  // 23: chargehive.chtype.TermType
	(*Address)(nil),                // 24: chargehive.chtype.Address
	(*Person)(nil),                 // 25: chargehive.chtype.Person
	(*Company)(nil),                // 26: chargehive.chtype.Company
	(DeliveryStandard)(0),          // 27: chargehive.chtype.DeliveryStandard
	(DeliveryType)(0),              // 28: chargehive.chtype.DeliveryType
	(Status)(0),                    // 29: chargehive.chtype.Status
}
var file_chargehive_chtype_charge_proto_depIdxs = []int32{
	1,  // 0: chargehive.chtype.Charge.intent:type_name -> chargehive.chtype.ChargeIntent
	14, // 1: chargehive.chtype.Charge.contract:type_name -> chargehive.chtype.ContractType
	15, // 2: chargehive.chtype.Charge.amount:type_name -> chargehive.chtype.Amount
	16, // 3: chargehive.chtype.Charge.expiry_time:type_name -> google.protobuf.Timestamp
	4,  // 4: chargehive.chtype.Charge.statement_descriptor:type_name -> chargehive.chtype.StatementDescriptor
	12, // 5: chargehive.chtype.Charge.references:type_name -> chargehive.chtype.Charge.ReferencesEntry
	17, // 6: chargehive.chtype.Charge.labels:type_name -> chargehive.chtype.Label
	2,  // 7: chargehive.chtype.Charge.environment:type_name -> chargehive.chtype.ChargeEnvironment
	18, // 8: chargehive.chtype.Charge.language:type_name -> chargehive.chtype.Language
	19, // 9: chargehive.chtype.Charge.preferred_method_type:type_name -> chargehive.chtype.PaymentMethodType
	20, // 10: chargehive.chtype.Charge.initial_transaction:type_name -> chargehive.chtype.InitialTransactionData
	16, // 11: chargehive.chtype.ChargeItem.start_date:type_name -> google.protobuf.Timestamp
	16, // 12: chargehive.chtype.ChargeItem.end_date:type_name -> google.protobuf.Timestamp
	21, // 13: chargehive.chtype.ChargeItem.product_type:type_name -> chargehive.chtype.ProductType
	22, // 14: chargehive.chtype.ChargeItem.sku_type:type_name -> chargehive.chtype.SKUType
	8,  // 15: chargehive.chtype.ChargeItem.delivery:type_name -> chargehive.chtype.Delivery
	15, // 16: chargehive.chtype.ChargeItem.unit_price:type_name -> chargehive.chtype.Amount
	15, // 17: chargehive.chtype.ChargeItem.tax_amount:type_name -> chargehive.chtype.Amount
	15, // 18: chargehive.chtype.ChargeItem.discount_amount:type_name -> chargehive.chtype.Amount
	23, // 19: chargehive.chtype.ChargeItem.term_type:type_name -> chargehive.chtype.TermType
	24, // 20: chargehive.chtype.ChargeMeta.billing_address:type_name -> chargehive.chtype.Address
	24, // 21: chargehive.chtype.ChargeMeta.delivery_address:type_name -> chargehive.chtype.Address
	6,  // 22: chargehive.chtype.ChargeMeta.items:type_name -> chargehive.chtype.ChargeItem
	16, // 23: chargehive.chtype.ChargeMeta.invoice_date:type_name -> google.protobuf.Timestamp
	16, // 24: chargehive.chtype.ChargeMeta.due_date:type_name -> google.protobuf.Timestamp
	15, // 25: chargehive.chtype.ChargeMeta.discount_amount:type_name -> chargehive.chtype.Amount
	15, // 26: chargehive.chtype.ChargeMeta.delivery_amount:type_name -> chargehive.chtype.Amount
	15, // 27: chargehive.chtype.ChargeMeta.tax_amount:type_name -> chargehive.chtype.Amount
	15, // 28: chargehive.chtype.ChargeMeta.total_amount:type_name -> chargehive.chtype.Amount
	25, // 29: chargehive.chtype.ChargeMeta.person:type_name -> chargehive.chtype.Person
	26, // 30: chargehive.chtype.ChargeMeta.company:type_name -> chargehive.chtype.Company
	8,  // 31: chargehive.chtype.ChargeMeta.delivery:type_name -> chargehive.chtype.Delivery
	11, // 32: chargehive.chtype.ChargeMeta.device:type_name -> chargehive.chtype.Device
	27, // 33: chargehive.chtype.Delivery.standard:type_name -> chargehive.chtype.DeliveryStandard
	28, // 34: chargehive.chtype.Delivery.type:type_name -> chargehive.chtype.DeliveryType
	15, // 35: chargehive.chtype.ChargeSummary.amount:type_name -> chargehive.chtype.Amount
	29, // 36: chargehive.chtype.ChargeSummary.status:type_name -> chargehive.chtype.Status
	10, // 37: chargehive.chtype.Device.screen:type_name -> chargehive.chtype.Dimension
	10, // 38: chargehive.chtype.Device.screen_available:type_name -> chargehive.chtype.Dimension
	10, // 39: chargehive.chtype.Device.window_inner:type_name -> chargehive.chtype.Dimension
	10, // 40: chargehive.chtype.Device.window_outer:type_name -> chargehive.chtype.Dimension
	3,  // 41: chargehive.chtype.Device.type:type_name -> chargehive.chtype.DeviceType
	13, // 42: chargehive.chtype.Device.request_headers:type_name -> chargehive.chtype.Device.RequestHeadersEntry
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_chargehive_chtype_charge_proto_init() }
func file_chargehive_chtype_charge_proto_init() {
	if File_chargehive_chtype_charge_proto != nil {
		return
	}
	file_chargehive_chtype_generic_proto_init()
	file_chargehive_chtype_contact_proto_init()
	file_chargehive_chtype_language_proto_init()
	file_chargehive_chtype_enum_proto_init()
	file_chargehive_chtype_transaction_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chargehive_chtype_charge_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chargehive_chtype_charge_proto_goTypes,
		DependencyIndexes: file_chargehive_chtype_charge_proto_depIdxs,
		EnumInfos:         file_chargehive_chtype_charge_proto_enumTypes,
		MessageInfos:      file_chargehive_chtype_charge_proto_msgTypes,
	}.Build()
	File_chargehive_chtype_charge_proto = out.File
	file_chargehive_chtype_charge_proto_rawDesc = nil
	file_chargehive_chtype_charge_proto_goTypes = nil
	file_chargehive_chtype_charge_proto_depIdxs = nil
}
