// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chargehive/chtype/payment_method_schema.proto

package chtype

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PaymentMethodSchema int32

const (
	PAYMENT_METHOD_SCHEMA_INVALID        PaymentMethodSchema = 0
	PAYMENT_METHOD_SCHEMA_ENCRYPTED_CARD PaymentMethodSchema = 1
	PAYMENT_METHOD_SCHEMA_CARD           PaymentMethodSchema = 2
	PAYMENT_METHOD_SCHEMA_APPLE_PAY      PaymentMethodSchema = 3
	PAYMENT_METHOD_SCHEMA_GOOGLE_PAY     PaymentMethodSchema = 4
)

var PaymentMethodSchema_name = map[int32]string{
	0: "PAYMENT_METHOD_SCHEMA_INVALID",
	1: "PAYMENT_METHOD_SCHEMA_ENCRYPTED_CARD",
	2: "PAYMENT_METHOD_SCHEMA_CARD",
	3: "PAYMENT_METHOD_SCHEMA_APPLE_PAY",
	4: "PAYMENT_METHOD_SCHEMA_GOOGLE_PAY",
}

var PaymentMethodSchema_value = map[string]int32{
	"PAYMENT_METHOD_SCHEMA_INVALID":        0,
	"PAYMENT_METHOD_SCHEMA_ENCRYPTED_CARD": 1,
	"PAYMENT_METHOD_SCHEMA_CARD":           2,
	"PAYMENT_METHOD_SCHEMA_APPLE_PAY":      3,
	"PAYMENT_METHOD_SCHEMA_GOOGLE_PAY":     4,
}

func (x PaymentMethodSchema) String() string {
	return proto.EnumName(PaymentMethodSchema_name, int32(x))
}

func (PaymentMethodSchema) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_acf1a4ab3aa467b5, []int{0}
}

type PaymentMethodSchemaApplePay struct {
	SessionUrl           string   `protobuf:"bytes,1,opt,name=session_url,json=sessionUrl,proto3" json:"session_url,omitempty"`
	InitiativeContext    string   `protobuf:"bytes,2,opt,name=initiative_context,json=initiativeContext,proto3" json:"initiative_context,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Session              string   `protobuf:"bytes,4,opt,name=session,proto3" json:"session,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentMethodSchemaApplePay) Reset()         { *m = PaymentMethodSchemaApplePay{} }
func (m *PaymentMethodSchemaApplePay) String() string { return proto.CompactTextString(m) }
func (*PaymentMethodSchemaApplePay) ProtoMessage()    {}
func (*PaymentMethodSchemaApplePay) Descriptor() ([]byte, []int) {
	return fileDescriptor_acf1a4ab3aa467b5, []int{0}
}
func (m *PaymentMethodSchemaApplePay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentMethodSchemaApplePay.Unmarshal(m, b)
}
func (m *PaymentMethodSchemaApplePay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentMethodSchemaApplePay.Marshal(b, m, deterministic)
}
func (m *PaymentMethodSchemaApplePay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentMethodSchemaApplePay.Merge(m, src)
}
func (m *PaymentMethodSchemaApplePay) XXX_Size() int {
	return xxx_messageInfo_PaymentMethodSchemaApplePay.Size(m)
}
func (m *PaymentMethodSchemaApplePay) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentMethodSchemaApplePay.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentMethodSchemaApplePay proto.InternalMessageInfo

func (m *PaymentMethodSchemaApplePay) GetSessionUrl() string {
	if m != nil {
		return m.SessionUrl
	}
	return ""
}

func (m *PaymentMethodSchemaApplePay) GetInitiativeContext() string {
	if m != nil {
		return m.InitiativeContext
	}
	return ""
}

func (m *PaymentMethodSchemaApplePay) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *PaymentMethodSchemaApplePay) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

type PaymentMethodSchemaGooglePay struct {
	LowValueToken        string   `protobuf:"bytes,1,opt,name=low_value_token,json=lowValueToken,proto3" json:"low_value_token,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CardDetails          string   `protobuf:"bytes,3,opt,name=card_details,json=cardDetails,proto3" json:"card_details,omitempty"`
	CardNetwork          string   `protobuf:"bytes,4,opt,name=card_network,json=cardNetwork,proto3" json:"card_network,omitempty"`
	Token                string   `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentMethodSchemaGooglePay) Reset()         { *m = PaymentMethodSchemaGooglePay{} }
func (m *PaymentMethodSchemaGooglePay) String() string { return proto.CompactTextString(m) }
func (*PaymentMethodSchemaGooglePay) ProtoMessage()    {}
func (*PaymentMethodSchemaGooglePay) Descriptor() ([]byte, []int) {
	return fileDescriptor_acf1a4ab3aa467b5, []int{1}
}
func (m *PaymentMethodSchemaGooglePay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentMethodSchemaGooglePay.Unmarshal(m, b)
}
func (m *PaymentMethodSchemaGooglePay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentMethodSchemaGooglePay.Marshal(b, m, deterministic)
}
func (m *PaymentMethodSchemaGooglePay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentMethodSchemaGooglePay.Merge(m, src)
}
func (m *PaymentMethodSchemaGooglePay) XXX_Size() int {
	return xxx_messageInfo_PaymentMethodSchemaGooglePay.Size(m)
}
func (m *PaymentMethodSchemaGooglePay) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentMethodSchemaGooglePay.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentMethodSchemaGooglePay proto.InternalMessageInfo

func (m *PaymentMethodSchemaGooglePay) GetLowValueToken() string {
	if m != nil {
		return m.LowValueToken
	}
	return ""
}

func (m *PaymentMethodSchemaGooglePay) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PaymentMethodSchemaGooglePay) GetCardDetails() string {
	if m != nil {
		return m.CardDetails
	}
	return ""
}

func (m *PaymentMethodSchemaGooglePay) GetCardNetwork() string {
	if m != nil {
		return m.CardNetwork
	}
	return ""
}

func (m *PaymentMethodSchemaGooglePay) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type PaymentMethodSchemaEncryptedCard struct {
	NameOnCard           []byte   `protobuf:"bytes,1,opt,name=name_on_card,json=nameOnCard,proto3" json:"name_on_card,omitempty"`
	Number               []byte   `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	ValidFromMonth       []byte   `protobuf:"bytes,3,opt,name=valid_from_month,json=validFromMonth,proto3" json:"valid_from_month,omitempty"`
	ValidFromYear        []byte   `protobuf:"bytes,4,opt,name=valid_from_year,json=validFromYear,proto3" json:"valid_from_year,omitempty"`
	ExpiryMonth          []byte   `protobuf:"bytes,5,opt,name=expiry_month,json=expiryMonth,proto3" json:"expiry_month,omitempty"`
	ExpiryYear           []byte   `protobuf:"bytes,6,opt,name=expiry_year,json=expiryYear,proto3" json:"expiry_year,omitempty"`
	IssueNumber          []byte   `protobuf:"bytes,7,opt,name=issue_number,json=issueNumber,proto3" json:"issue_number,omitempty"`
	TransportKeyId       string   `protobuf:"bytes,8,opt,name=transport_key_id,json=transportKeyId,proto3" json:"transport_key_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentMethodSchemaEncryptedCard) Reset()         { *m = PaymentMethodSchemaEncryptedCard{} }
func (m *PaymentMethodSchemaEncryptedCard) String() string { return proto.CompactTextString(m) }
func (*PaymentMethodSchemaEncryptedCard) ProtoMessage()    {}
func (*PaymentMethodSchemaEncryptedCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_acf1a4ab3aa467b5, []int{2}
}
func (m *PaymentMethodSchemaEncryptedCard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentMethodSchemaEncryptedCard.Unmarshal(m, b)
}
func (m *PaymentMethodSchemaEncryptedCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentMethodSchemaEncryptedCard.Marshal(b, m, deterministic)
}
func (m *PaymentMethodSchemaEncryptedCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentMethodSchemaEncryptedCard.Merge(m, src)
}
func (m *PaymentMethodSchemaEncryptedCard) XXX_Size() int {
	return xxx_messageInfo_PaymentMethodSchemaEncryptedCard.Size(m)
}
func (m *PaymentMethodSchemaEncryptedCard) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentMethodSchemaEncryptedCard.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentMethodSchemaEncryptedCard proto.InternalMessageInfo

func (m *PaymentMethodSchemaEncryptedCard) GetNameOnCard() []byte {
	if m != nil {
		return m.NameOnCard
	}
	return nil
}

func (m *PaymentMethodSchemaEncryptedCard) GetNumber() []byte {
	if m != nil {
		return m.Number
	}
	return nil
}

func (m *PaymentMethodSchemaEncryptedCard) GetValidFromMonth() []byte {
	if m != nil {
		return m.ValidFromMonth
	}
	return nil
}

func (m *PaymentMethodSchemaEncryptedCard) GetValidFromYear() []byte {
	if m != nil {
		return m.ValidFromYear
	}
	return nil
}

func (m *PaymentMethodSchemaEncryptedCard) GetExpiryMonth() []byte {
	if m != nil {
		return m.ExpiryMonth
	}
	return nil
}

func (m *PaymentMethodSchemaEncryptedCard) GetExpiryYear() []byte {
	if m != nil {
		return m.ExpiryYear
	}
	return nil
}

func (m *PaymentMethodSchemaEncryptedCard) GetIssueNumber() []byte {
	if m != nil {
		return m.IssueNumber
	}
	return nil
}

func (m *PaymentMethodSchemaEncryptedCard) GetTransportKeyId() string {
	if m != nil {
		return m.TransportKeyId
	}
	return ""
}

type PaymentMethodSchemaCard struct {
	NameOnCard           string   `protobuf:"bytes,1,opt,name=name_on_card,json=nameOnCard,proto3" json:"name_on_card,omitempty"`
	ValidFromMonth       int32    `protobuf:"varint,2,opt,name=valid_from_month,json=validFromMonth,proto3" json:"valid_from_month,omitempty"`
	ValidFromYear        int32    `protobuf:"varint,3,opt,name=valid_from_year,json=validFromYear,proto3" json:"valid_from_year,omitempty"`
	ExpiryMonth          int32    `protobuf:"varint,4,opt,name=expiry_month,json=expiryMonth,proto3" json:"expiry_month,omitempty"`
	ExpiryYear           int32    `protobuf:"varint,5,opt,name=expiry_year,json=expiryYear,proto3" json:"expiry_year,omitempty"`
	IssueNumber          int32    `protobuf:"varint,6,opt,name=issue_number,json=issueNumber,proto3" json:"issue_number,omitempty"`
	Number               string   `protobuf:"bytes,7,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentMethodSchemaCard) Reset()         { *m = PaymentMethodSchemaCard{} }
func (m *PaymentMethodSchemaCard) String() string { return proto.CompactTextString(m) }
func (*PaymentMethodSchemaCard) ProtoMessage()    {}
func (*PaymentMethodSchemaCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_acf1a4ab3aa467b5, []int{3}
}
func (m *PaymentMethodSchemaCard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentMethodSchemaCard.Unmarshal(m, b)
}
func (m *PaymentMethodSchemaCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentMethodSchemaCard.Marshal(b, m, deterministic)
}
func (m *PaymentMethodSchemaCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentMethodSchemaCard.Merge(m, src)
}
func (m *PaymentMethodSchemaCard) XXX_Size() int {
	return xxx_messageInfo_PaymentMethodSchemaCard.Size(m)
}
func (m *PaymentMethodSchemaCard) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentMethodSchemaCard.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentMethodSchemaCard proto.InternalMessageInfo

func (m *PaymentMethodSchemaCard) GetNameOnCard() string {
	if m != nil {
		return m.NameOnCard
	}
	return ""
}

func (m *PaymentMethodSchemaCard) GetValidFromMonth() int32 {
	if m != nil {
		return m.ValidFromMonth
	}
	return 0
}

func (m *PaymentMethodSchemaCard) GetValidFromYear() int32 {
	if m != nil {
		return m.ValidFromYear
	}
	return 0
}

func (m *PaymentMethodSchemaCard) GetExpiryMonth() int32 {
	if m != nil {
		return m.ExpiryMonth
	}
	return 0
}

func (m *PaymentMethodSchemaCard) GetExpiryYear() int32 {
	if m != nil {
		return m.ExpiryYear
	}
	return 0
}

func (m *PaymentMethodSchemaCard) GetIssueNumber() int32 {
	if m != nil {
		return m.IssueNumber
	}
	return 0
}

func (m *PaymentMethodSchemaCard) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func init() {
	proto.RegisterEnum("chargehive.chtype.PaymentMethodSchema", PaymentMethodSchema_name, PaymentMethodSchema_value)
	golang_proto.RegisterEnum("chargehive.chtype.PaymentMethodSchema", PaymentMethodSchema_name, PaymentMethodSchema_value)
	proto.RegisterType((*PaymentMethodSchemaApplePay)(nil), "chargehive.chtype.PaymentMethodSchemaApplePay")
	golang_proto.RegisterType((*PaymentMethodSchemaApplePay)(nil), "chargehive.chtype.PaymentMethodSchemaApplePay")
	proto.RegisterType((*PaymentMethodSchemaGooglePay)(nil), "chargehive.chtype.PaymentMethodSchemaGooglePay")
	golang_proto.RegisterType((*PaymentMethodSchemaGooglePay)(nil), "chargehive.chtype.PaymentMethodSchemaGooglePay")
	proto.RegisterType((*PaymentMethodSchemaEncryptedCard)(nil), "chargehive.chtype.PaymentMethodSchemaEncryptedCard")
	golang_proto.RegisterType((*PaymentMethodSchemaEncryptedCard)(nil), "chargehive.chtype.PaymentMethodSchemaEncryptedCard")
	proto.RegisterType((*PaymentMethodSchemaCard)(nil), "chargehive.chtype.PaymentMethodSchemaCard")
	golang_proto.RegisterType((*PaymentMethodSchemaCard)(nil), "chargehive.chtype.PaymentMethodSchemaCard")
}

func init() {
	proto.RegisterFile("chargehive/chtype/payment_method_schema.proto", fileDescriptor_acf1a4ab3aa467b5)
}
func init() {
	golang_proto.RegisterFile("chargehive/chtype/payment_method_schema.proto", fileDescriptor_acf1a4ab3aa467b5)
}

var fileDescriptor_acf1a4ab3aa467b5 = []byte{
	// 670 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xd1, 0x4e, 0x13, 0x4b,
	0x1c, 0xc6, 0x69, 0xa1, 0xe5, 0x30, 0x2d, 0x9c, 0x32, 0xe7, 0xe4, 0x9c, 0x06, 0x15, 0x4a, 0x25,
	0x86, 0x98, 0x40, 0x2f, 0xf4, 0x05, 0x6a, 0x5b, 0x81, 0x48, 0xdb, 0xcd, 0x52, 0x49, 0x6a, 0x48,
	0x26, 0xd3, 0xdd, 0xa1, 0x3b, 0x61, 0x77, 0x66, 0x33, 0x3b, 0x2d, 0xec, 0x3b, 0xf8, 0x0a, 0x3e,
	0x8b, 0x5e, 0x78, 0x65, 0x62, 0xe2, 0x2b, 0xa8, 0x2f, 0x62, 0xf6, 0x3f, 0x4b, 0x5b, 0xc3, 0x8a,
	0xde, 0xed, 0xff, 0x9b, 0x5f, 0xbe, 0xf9, 0xfe, 0xdf, 0x26, 0x83, 0x0e, 0x1c, 0x8f, 0xaa, 0x31,
	0xf3, 0xf8, 0x94, 0x35, 0x1c, 0x4f, 0xc7, 0x21, 0x6b, 0x84, 0x34, 0x0e, 0x98, 0xd0, 0x24, 0x60,
	0xda, 0x93, 0x2e, 0x89, 0x1c, 0x8f, 0x05, 0xf4, 0x30, 0x54, 0x52, 0x4b, 0xbc, 0x39, 0xc7, 0x0f,
	0x0d, 0xbe, 0x75, 0x30, 0xe6, 0xda, 0x9b, 0x8c, 0x0e, 0x1d, 0x19, 0x34, 0xc6, 0x72, 0x2c, 0x1b,
	0x40, 0x8e, 0x26, 0x97, 0x30, 0xc1, 0x00, 0x5f, 0xc6, 0xa1, 0xfe, 0x2e, 0x87, 0x1e, 0x58, 0xe6,
	0x86, 0x2e, 0x5c, 0x70, 0x06, 0xfe, 0xcd, 0x30, 0xf4, 0x99, 0x45, 0x63, 0xbc, 0x83, 0x4a, 0x11,
	0x8b, 0x22, 0x2e, 0x05, 0x99, 0x28, 0xbf, 0x9a, 0xab, 0xe5, 0xf6, 0xd7, 0x6c, 0x94, 0x4a, 0xaf,
	0x95, 0x8f, 0x0f, 0x10, 0xe6, 0x82, 0x6b, 0x4e, 0x35, 0x9f, 0x32, 0xe2, 0x48, 0xa1, 0xd9, 0x8d,
	0xae, 0xe6, 0x81, 0xdb, 0x9c, 0x9f, 0xb4, 0xcc, 0x01, 0xfe, 0x17, 0x15, 0xb4, 0xbc, 0x62, 0xa2,
	0xba, 0x0c, 0x84, 0x19, 0x70, 0x15, 0xad, 0xa6, 0x96, 0xd5, 0x15, 0xd0, 0x6f, 0xc7, 0xfa, 0xc7,
	0x1c, 0x7a, 0x98, 0x91, 0xef, 0x48, 0xca, 0xb1, 0x09, 0xf8, 0x04, 0xfd, 0xed, 0xcb, 0x6b, 0x32,
	0xa5, 0xfe, 0x84, 0x11, 0x63, 0x6d, 0x42, 0xae, 0xfb, 0xf2, 0xfa, 0x3c, 0x51, 0x07, 0x70, 0x45,
	0x0d, 0x95, 0x5c, 0x16, 0x39, 0x8a, 0x87, 0x3a, 0xb9, 0xc6, 0x04, 0x5c, 0x94, 0xf0, 0x2e, 0x2a,
	0x3b, 0x54, 0xb9, 0xc4, 0x65, 0x9a, 0x72, 0x3f, 0x4a, 0x13, 0x96, 0x12, 0xad, 0x6d, 0xa4, 0x19,
	0x22, 0x98, 0xbe, 0x96, 0xea, 0x2a, 0x0d, 0x0b, 0x48, 0xcf, 0x48, 0xf3, 0x05, 0x0b, 0x0b, 0x0b,
	0xd6, 0xdf, 0xe7, 0x51, 0x2d, 0x63, 0x8d, 0x8e, 0x70, 0x54, 0x1c, 0x6a, 0xe6, 0xb6, 0xa8, 0x72,
	0x71, 0x0d, 0x95, 0x05, 0x0d, 0x18, 0x91, 0x82, 0x24, 0x8e, 0xb0, 0x47, 0xd9, 0x46, 0x89, 0xd6,
	0x17, 0x40, 0xfc, 0x87, 0x8a, 0x62, 0x12, 0x8c, 0x98, 0x82, 0xfc, 0x65, 0x3b, 0x9d, 0xf0, 0x3e,
	0xaa, 0x4c, 0xa9, 0xcf, 0x5d, 0x72, 0xa9, 0x64, 0x40, 0x02, 0x29, 0xb4, 0x07, 0xf1, 0xcb, 0xf6,
	0x06, 0xe8, 0x2f, 0x95, 0x0c, 0xba, 0x89, 0x9a, 0xd4, 0xb5, 0x40, 0xc6, 0x8c, 0x2a, 0x58, 0xa2,
	0x6c, 0xaf, 0xcf, 0xc0, 0x21, 0xa3, 0x2a, 0xd9, 0x94, 0xdd, 0x84, 0x5c, 0xc5, 0xa9, 0x5b, 0x01,
	0xa0, 0x92, 0xd1, 0x8c, 0xd5, 0x0e, 0x4a, 0x47, 0x63, 0x53, 0x34, 0x69, 0x8d, 0x74, 0xeb, 0xc1,
	0xa3, 0x68, 0xc2, 0x48, 0x9a, 0x79, 0xd5, 0x78, 0x80, 0xd6, 0x9b, 0x05, 0xd7, 0x8a, 0x8a, 0x28,
	0x94, 0x4a, 0x93, 0x2b, 0x16, 0x13, 0xee, 0x56, 0xff, 0x82, 0xe2, 0x36, 0x66, 0xfa, 0x2b, 0x16,
	0x9f, 0xb8, 0xf5, 0xb7, 0x79, 0xf4, 0x7f, 0x46, 0x83, 0xbf, 0x2c, 0x6e, 0xed, 0xa7, 0xe2, 0xb2,
	0x0a, 0x4a, 0x2a, 0x2c, 0xfc, 0x49, 0x41, 0xcb, 0x00, 0xfe, 0xa6, 0xa0, 0x15, 0x80, 0xee, 0x2b,
	0xa8, 0x00, 0xc4, 0x7d, 0x05, 0x15, 0x8d, 0xc7, 0x62, 0x41, 0xf3, 0x3f, 0xbe, 0x0a, 0x4b, 0xa5,
	0xd3, 0xd3, 0xcf, 0x39, 0xf4, 0x4f, 0x46, 0x1d, 0x78, 0x17, 0x3d, 0xb2, 0x9a, 0xc3, 0x6e, 0xa7,
	0x37, 0x20, 0xdd, 0xce, 0xe0, 0xb8, 0xdf, 0x26, 0x67, 0xad, 0xe3, 0x4e, 0xb7, 0x49, 0x4e, 0x7a,
	0xe7, 0xcd, 0xd3, 0x93, 0x76, 0x65, 0x09, 0xef, 0xa3, 0xbd, 0x6c, 0xa4, 0xd3, 0x6b, 0xd9, 0x43,
	0x6b, 0xd0, 0x69, 0x93, 0x56, 0xd3, 0x6e, 0x57, 0x72, 0x78, 0x1b, 0x6d, 0x65, 0x93, 0x70, 0x9e,
	0xc7, 0x8f, 0xd1, 0x4e, 0xf6, 0x79, 0xd3, 0xb2, 0x4e, 0x3b, 0xc4, 0x6a, 0x0e, 0x2b, 0xcb, 0x78,
	0x0f, 0xd5, 0xb2, 0xa1, 0xa3, 0x7e, 0xff, 0x28, 0xa5, 0x56, 0x5e, 0xc8, 0x2f, 0x5f, 0xb7, 0x97,
	0x3e, 0x7c, 0xdf, 0xce, 0xbd, 0x79, 0xbe, 0xf0, 0x80, 0x2d, 0xbc, 0x86, 0xb7, 0x2f, 0x97, 0x4f,
	0xc5, 0xb8, 0x71, 0xe7, 0x95, 0xfc, 0x94, 0xdf, 0x6c, 0x81, 0x76, 0xcc, 0xa7, 0xec, 0xa2, 0x05,
	0xda, 0xb7, 0xfc, 0xd6, 0x1d, 0xed, 0xa2, 0xcb, 0x34, 0x75, 0xa9, 0xa6, 0xa3, 0x22, 0x18, 0x3e,
	0xfb, 0x11, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x32, 0x09, 0x0c, 0x72, 0x05, 0x00, 0x00,
}
