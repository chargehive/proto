// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: chargehive/chtype/payment_method.proto

package chtype

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PaymentMethodUpdateReason int32

const (
	PaymentMethodUpdateReason_PAYMENT_METHOD_UPDATE_REASON_INVALID                PaymentMethodUpdateReason = 0
	PaymentMethodUpdateReason_PAYMENT_METHOD_UPDATE_REASON_ACCOUNT_CLOSED         PaymentMethodUpdateReason = 1
	PaymentMethodUpdateReason_PAYMENT_METHOD_UPDATE_REASON_NEW_EXPIRY_DATE        PaymentMethodUpdateReason = 2
	PaymentMethodUpdateReason_PAYMENT_METHOD_UPDATE_REASON_NEW_ACCOUNT_NUMBER     PaymentMethodUpdateReason = 3
	PaymentMethodUpdateReason_PAYMENT_METHOD_UPDATE_REASON_NEW_ACCOUNT_AND_EXPIRY PaymentMethodUpdateReason = 4
	PaymentMethodUpdateReason_PAYMENT_METHOD_UPDATE_REASON_NO_CHANGE              PaymentMethodUpdateReason = 5
)

// Enum value maps for PaymentMethodUpdateReason.
var (
	PaymentMethodUpdateReason_name = map[int32]string{
		0: "PAYMENT_METHOD_UPDATE_REASON_INVALID",
		1: "PAYMENT_METHOD_UPDATE_REASON_ACCOUNT_CLOSED",
		2: "PAYMENT_METHOD_UPDATE_REASON_NEW_EXPIRY_DATE",
		3: "PAYMENT_METHOD_UPDATE_REASON_NEW_ACCOUNT_NUMBER",
		4: "PAYMENT_METHOD_UPDATE_REASON_NEW_ACCOUNT_AND_EXPIRY",
		5: "PAYMENT_METHOD_UPDATE_REASON_NO_CHANGE",
	}
	PaymentMethodUpdateReason_value = map[string]int32{
		"PAYMENT_METHOD_UPDATE_REASON_INVALID":                0,
		"PAYMENT_METHOD_UPDATE_REASON_ACCOUNT_CLOSED":         1,
		"PAYMENT_METHOD_UPDATE_REASON_NEW_EXPIRY_DATE":        2,
		"PAYMENT_METHOD_UPDATE_REASON_NEW_ACCOUNT_NUMBER":     3,
		"PAYMENT_METHOD_UPDATE_REASON_NEW_ACCOUNT_AND_EXPIRY": 4,
		"PAYMENT_METHOD_UPDATE_REASON_NO_CHANGE":              5,
	}
)

func (x PaymentMethodUpdateReason) Enum() *PaymentMethodUpdateReason {
	p := new(PaymentMethodUpdateReason)
	*p = x
	return p
}

func (x PaymentMethodUpdateReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentMethodUpdateReason) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_payment_method_proto_enumTypes[0].Descriptor()
}

func (PaymentMethodUpdateReason) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_payment_method_proto_enumTypes[0]
}

func (x PaymentMethodUpdateReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentMethodUpdateReason.Descriptor instead.
func (PaymentMethodUpdateReason) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_payment_method_proto_rawDescGZIP(), []int{0}
}

type PaymentMethodVerificationItemType int32

const (
	PaymentMethodVerificationItemType_PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_INVALID            PaymentMethodVerificationItemType = 0
	PaymentMethodVerificationItemType_PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_CVV                PaymentMethodVerificationItemType = 1
	PaymentMethodVerificationItemType_PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_DEVICE_DETAILS     PaymentMethodVerificationItemType = 2
	PaymentMethodVerificationItemType_PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_IDENTIFY_RESPONSE  PaymentMethodVerificationItemType = 3
	PaymentMethodVerificationItemType_PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_CHALLENGE_RESPONSE PaymentMethodVerificationItemType = 4
	PaymentMethodVerificationItemType_PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_NAMED              PaymentMethodVerificationItemType = 5
)

// Enum value maps for PaymentMethodVerificationItemType.
var (
	PaymentMethodVerificationItemType_name = map[int32]string{
		0: "PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_INVALID",
		1: "PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_CVV",
		2: "PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_DEVICE_DETAILS",
		3: "PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_IDENTIFY_RESPONSE",
		4: "PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_CHALLENGE_RESPONSE",
		5: "PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_NAMED",
	}
	PaymentMethodVerificationItemType_value = map[string]int32{
		"PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_INVALID":            0,
		"PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_CVV":                1,
		"PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_DEVICE_DETAILS":     2,
		"PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_IDENTIFY_RESPONSE":  3,
		"PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_CHALLENGE_RESPONSE": 4,
		"PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_NAMED":              5,
	}
)

func (x PaymentMethodVerificationItemType) Enum() *PaymentMethodVerificationItemType {
	p := new(PaymentMethodVerificationItemType)
	*p = x
	return p
}

func (x PaymentMethodVerificationItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentMethodVerificationItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_payment_method_proto_enumTypes[1].Descriptor()
}

func (PaymentMethodVerificationItemType) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_payment_method_proto_enumTypes[1]
}

func (x PaymentMethodVerificationItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentMethodVerificationItemType.Descriptor instead.
func (PaymentMethodVerificationItemType) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_payment_method_proto_rawDescGZIP(), []int{1}
}

type PaymentMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema    PaymentMethodSchema    `protobuf:"varint,1,opt,name=schema,proto3,enum=chargehive.chtype.PaymentMethodSchema" json:"schema,omitempty"`
	Json      []byte                 `protobuf:"bytes,2,opt,name=json,proto3" json:"json,omitempty"`
	Type      PaymentMethodType      `protobuf:"varint,3,opt,name=type,proto3,enum=chargehive.chtype.PaymentMethodType" json:"type,omitempty"`
	Provider  PaymentMethodProvider  `protobuf:"varint,4,opt,name=provider,proto3,enum=chargehive.chtype.PaymentMethodProvider" json:"provider,omitempty"`
	InputType PaymentMethodInputType `protobuf:"varint,5,opt,name=inputType,proto3,enum=chargehive.chtype.PaymentMethodInputType" json:"inputType,omitempty"`
}

func (x *PaymentMethod) Reset() {
	*x = PaymentMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chargehive_chtype_payment_method_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethod) ProtoMessage() {}

func (x *PaymentMethod) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_payment_method_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethod.ProtoReflect.Descriptor instead.
func (*PaymentMethod) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_payment_method_proto_rawDescGZIP(), []int{0}
}

func (x *PaymentMethod) GetSchema() PaymentMethodSchema {
	if x != nil {
		return x.Schema
	}
	return PaymentMethodSchema_PAYMENT_METHOD_SCHEMA_INVALID
}

func (x *PaymentMethod) GetJson() []byte {
	if x != nil {
		return x.Json
	}
	return nil
}

func (x *PaymentMethod) GetType() PaymentMethodType {
	if x != nil {
		return x.Type
	}
	return PaymentMethodType_PAYMENT_METHOD_TYPE_INVALID
}

func (x *PaymentMethod) GetProvider() PaymentMethodProvider {
	if x != nil {
		return x.Provider
	}
	return PaymentMethodProvider_PAYMENT_METHOD_PROVIDER_INVALID
}

func (x *PaymentMethod) GetInputType() PaymentMethodInputType {
	if x != nil {
		return x.InputType
	}
	return PaymentMethodInputType_INPUT_TYPE_INVALID
}

type PaymentMethodVerificationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           PaymentMethodVerificationItemType `protobuf:"varint,1,opt,name=type,proto3,enum=chargehive.chtype.PaymentMethodVerificationItemType" json:"type,omitempty"`
	Value          []byte                            `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	TransportKeyId string                            `protobuf:"bytes,4,opt,name=transport_key_id,json=transportKeyId,proto3" json:"transport_key_id,omitempty"`
	IsError        bool                              `protobuf:"varint,5,opt,name=is_error,json=isError,proto3" json:"is_error,omitempty"`
	Name           string                            `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PaymentMethodVerificationItem) Reset() {
	*x = PaymentMethodVerificationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chargehive_chtype_payment_method_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethodVerificationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethodVerificationItem) ProtoMessage() {}

func (x *PaymentMethodVerificationItem) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_payment_method_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethodVerificationItem.ProtoReflect.Descriptor instead.
func (*PaymentMethodVerificationItem) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_payment_method_proto_rawDescGZIP(), []int{1}
}

func (x *PaymentMethodVerificationItem) GetType() PaymentMethodVerificationItemType {
	if x != nil {
		return x.Type
	}
	return PaymentMethodVerificationItemType_PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_INVALID
}

func (x *PaymentMethodVerificationItem) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PaymentMethodVerificationItem) GetTransportKeyId() string {
	if x != nil {
		return x.TransportKeyId
	}
	return ""
}

func (x *PaymentMethodVerificationItem) GetIsError() bool {
	if x != nil {
		return x.IsError
	}
	return false
}

func (x *PaymentMethodVerificationItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PaymentMethodInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId       string                 `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PaymentScheme string                 `protobuf:"bytes,3,opt,name=payment_scheme,json=paymentScheme,proto3" json:"payment_scheme,omitempty"`
	ValidFrom     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	Expiry        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Type          PaymentMethodType      `protobuf:"varint,6,opt,name=type,proto3,enum=chargehive.chtype.PaymentMethodType" json:"type,omitempty"`
	Info          map[string]string      `protobuf:"bytes,7,rep,name=info,proto3" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Provider      PaymentMethodProvider  `protobuf:"varint,8,opt,name=provider,proto3,enum=chargehive.chtype.PaymentMethodProvider" json:"provider,omitempty"`
	InputType     PaymentMethodInputType `protobuf:"varint,9,opt,name=inputType,proto3,enum=chargehive.chtype.PaymentMethodInputType" json:"inputType,omitempty"`
	Status        Status                 `protobuf:"varint,10,opt,name=status,proto3,enum=chargehive.chtype.Status" json:"status,omitempty"`
}

func (x *PaymentMethodInfo) Reset() {
	*x = PaymentMethodInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chargehive_chtype_payment_method_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethodInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethodInfo) ProtoMessage() {}

func (x *PaymentMethodInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_payment_method_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethodInfo.ProtoReflect.Descriptor instead.
func (*PaymentMethodInfo) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_payment_method_proto_rawDescGZIP(), []int{2}
}

func (x *PaymentMethodInfo) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *PaymentMethodInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PaymentMethodInfo) GetPaymentScheme() string {
	if x != nil {
		return x.PaymentScheme
	}
	return ""
}

func (x *PaymentMethodInfo) GetValidFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidFrom
	}
	return nil
}

func (x *PaymentMethodInfo) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *PaymentMethodInfo) GetType() PaymentMethodType {
	if x != nil {
		return x.Type
	}
	return PaymentMethodType_PAYMENT_METHOD_TYPE_INVALID
}

func (x *PaymentMethodInfo) GetInfo() map[string]string {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *PaymentMethodInfo) GetProvider() PaymentMethodProvider {
	if x != nil {
		return x.Provider
	}
	return PaymentMethodProvider_PAYMENT_METHOD_PROVIDER_INVALID
}

func (x *PaymentMethodInfo) GetInputType() PaymentMethodInputType {
	if x != nil {
		return x.InputType
	}
	return PaymentMethodInputType_INPUT_TYPE_INVALID
}

func (x *PaymentMethodInfo) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_INVALID
}

var File_chargehive_chtype_payment_method_proto protoreflect.FileDescriptor

var file_chargehive_chtype_payment_method_proto_rawDesc = []byte{
	0x0a, 0x26, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x1c, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x02, 0x0a, 0x0d, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6a,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x47, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x1d, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xd1, 0x04, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x38,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x37,
	0x0a, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xc2, 0x02, 0x0a, 0x19, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x2f, 0x0a, 0x2b, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x30, 0x0a, 0x2c, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x03, 0x12, 0x37, 0x0a, 0x33, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x59, 0x10, 0x04,
	0x12, 0x2a, 0x0a, 0x26, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x05, 0x2a, 0xeb, 0x02, 0x0a,
	0x21, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x31, 0x0a, 0x2d, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x56, 0x56, 0x10, 0x01, 0x12, 0x38, 0x0a, 0x34, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x3b,
	0x0a, 0x37, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x03, 0x12, 0x3c, 0x0a, 0x38, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x56, 0x45,
	0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x04, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x10, 0x05, 0x42, 0x67, 0x5a, 0x34, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68,
	0x69, 0x76, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x74, 0x79,
	0x70, 0x65, 0xca, 0x02, 0x11, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x48, 0x69, 0x76, 0x65, 0x5c,
	0x43, 0x68, 0x74, 0x79, 0x70, 0x65, 0xe2, 0x02, 0x1a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x48,
	0x69, 0x76, 0x65, 0x5c, 0x43, 0x68, 0x74, 0x79, 0x70, 0x65, 0x5c, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chargehive_chtype_payment_method_proto_rawDescOnce sync.Once
	file_chargehive_chtype_payment_method_proto_rawDescData = file_chargehive_chtype_payment_method_proto_rawDesc
)

func file_chargehive_chtype_payment_method_proto_rawDescGZIP() []byte {
	file_chargehive_chtype_payment_method_proto_rawDescOnce.Do(func() {
		file_chargehive_chtype_payment_method_proto_rawDescData = protoimpl.X.CompressGZIP(file_chargehive_chtype_payment_method_proto_rawDescData)
	})
	return file_chargehive_chtype_payment_method_proto_rawDescData
}

var file_chargehive_chtype_payment_method_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_chargehive_chtype_payment_method_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_chargehive_chtype_payment_method_proto_goTypes = []interface{}{
	(PaymentMethodUpdateReason)(0),         // 0: chargehive.chtype.PaymentMethodUpdateReason
	(PaymentMethodVerificationItemType)(0), // 1: chargehive.chtype.PaymentMethodVerificationItemType
	(*PaymentMethod)(nil),                  // 2: chargehive.chtype.PaymentMethod
	(*PaymentMethodVerificationItem)(nil),  // 3: chargehive.chtype.PaymentMethodVerificationItem
	(*PaymentMethodInfo)(nil),              // 4: chargehive.chtype.PaymentMethodInfo
	nil,                                    // 5: chargehive.chtype.PaymentMethodInfo.InfoEntry
	(PaymentMethodSchema)(0),               // 6: chargehive.chtype.PaymentMethodSchema
	(PaymentMethodType)(0),                 // 7: chargehive.chtype.PaymentMethodType
	(PaymentMethodProvider)(0),             // 8: chargehive.chtype.PaymentMethodProvider
	(PaymentMethodInputType)(0),            // 9: chargehive.chtype.PaymentMethodInputType
	(*timestamppb.Timestamp)(nil),          // 10: google.protobuf.Timestamp
	(Status)(0),                            // 11: chargehive.chtype.Status
}
var file_chargehive_chtype_payment_method_proto_depIdxs = []int32{
	6,  // 0: chargehive.chtype.PaymentMethod.schema:type_name -> chargehive.chtype.PaymentMethodSchema
	7,  // 1: chargehive.chtype.PaymentMethod.type:type_name -> chargehive.chtype.PaymentMethodType
	8,  // 2: chargehive.chtype.PaymentMethod.provider:type_name -> chargehive.chtype.PaymentMethodProvider
	9,  // 3: chargehive.chtype.PaymentMethod.inputType:type_name -> chargehive.chtype.PaymentMethodInputType
	1,  // 4: chargehive.chtype.PaymentMethodVerificationItem.type:type_name -> chargehive.chtype.PaymentMethodVerificationItemType
	10, // 5: chargehive.chtype.PaymentMethodInfo.valid_from:type_name -> google.protobuf.Timestamp
	10, // 6: chargehive.chtype.PaymentMethodInfo.expiry:type_name -> google.protobuf.Timestamp
	7,  // 7: chargehive.chtype.PaymentMethodInfo.type:type_name -> chargehive.chtype.PaymentMethodType
	5,  // 8: chargehive.chtype.PaymentMethodInfo.info:type_name -> chargehive.chtype.PaymentMethodInfo.InfoEntry
	8,  // 9: chargehive.chtype.PaymentMethodInfo.provider:type_name -> chargehive.chtype.PaymentMethodProvider
	9,  // 10: chargehive.chtype.PaymentMethodInfo.inputType:type_name -> chargehive.chtype.PaymentMethodInputType
	11, // 11: chargehive.chtype.PaymentMethodInfo.status:type_name -> chargehive.chtype.Status
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_chargehive_chtype_payment_method_proto_init() }
func file_chargehive_chtype_payment_method_proto_init() {
	if File_chargehive_chtype_payment_method_proto != nil {
		return
	}
	file_chargehive_chtype_enum_proto_init()
	file_chargehive_chtype_payment_method_schema_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chargehive_chtype_payment_method_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chargehive_chtype_payment_method_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethodVerificationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chargehive_chtype_payment_method_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethodInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chargehive_chtype_payment_method_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chargehive_chtype_payment_method_proto_goTypes,
		DependencyIndexes: file_chargehive_chtype_payment_method_proto_depIdxs,
		EnumInfos:         file_chargehive_chtype_payment_method_proto_enumTypes,
		MessageInfos:      file_chargehive_chtype_payment_method_proto_msgTypes,
	}.Build()
	File_chargehive_chtype_payment_method_proto = out.File
	file_chargehive_chtype_payment_method_proto_rawDesc = nil
	file_chargehive_chtype_payment_method_proto_goTypes = nil
	file_chargehive_chtype_payment_method_proto_depIdxs = nil
}
