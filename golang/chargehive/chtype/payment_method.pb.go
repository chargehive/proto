// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chargehive/chtype/payment_method.proto

package chtype

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PaymentMethodVerificationItemType int32

const (
	PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_INVALID            PaymentMethodVerificationItemType = 0
	PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_CVV                PaymentMethodVerificationItemType = 1
	PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_DEVICE_DETAILS     PaymentMethodVerificationItemType = 2
	PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_IDENTIFY_RESPONSE  PaymentMethodVerificationItemType = 3
	PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_CHALLENGE_RESPONSE PaymentMethodVerificationItemType = 4
)

var PaymentMethodVerificationItemType_name = map[int32]string{
	0: "PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_INVALID",
	1: "PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_CVV",
	2: "PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_DEVICE_DETAILS",
	3: "PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_IDENTIFY_RESPONSE",
	4: "PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_CHALLENGE_RESPONSE",
}

var PaymentMethodVerificationItemType_value = map[string]int32{
	"PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_INVALID":            0,
	"PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_CVV":                1,
	"PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_DEVICE_DETAILS":     2,
	"PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_IDENTIFY_RESPONSE":  3,
	"PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_CHALLENGE_RESPONSE": 4,
}

func (x PaymentMethodVerificationItemType) String() string {
	return proto.EnumName(PaymentMethodVerificationItemType_name, int32(x))
}

func (PaymentMethodVerificationItemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7e9f0d4a8cee9c1c, []int{0}
}

type PaymentMethod struct {
	Schema               PaymentMethodSchema    `protobuf:"varint,1,opt,name=schema,proto3,enum=chargehive.chtype.PaymentMethodSchema" json:"schema,omitempty"`
	Json                 []byte                 `protobuf:"bytes,2,opt,name=json,proto3" json:"json,omitempty"`
	Type                 PaymentMethodType      `protobuf:"varint,3,opt,name=type,proto3,enum=chargehive.chtype.PaymentMethodType" json:"type,omitempty"`
	Provider             PaymentMethodProvider  `protobuf:"varint,4,opt,name=provider,proto3,enum=chargehive.chtype.PaymentMethodProvider" json:"provider,omitempty"`
	InputType            PaymentMethodInputType `protobuf:"varint,5,opt,name=inputType,proto3,enum=chargehive.chtype.PaymentMethodInputType" json:"inputType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PaymentMethod) Reset()         { *m = PaymentMethod{} }
func (m *PaymentMethod) String() string { return proto.CompactTextString(m) }
func (*PaymentMethod) ProtoMessage()    {}
func (*PaymentMethod) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e9f0d4a8cee9c1c, []int{0}
}
func (m *PaymentMethod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentMethod.Unmarshal(m, b)
}
func (m *PaymentMethod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentMethod.Marshal(b, m, deterministic)
}
func (m *PaymentMethod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentMethod.Merge(m, src)
}
func (m *PaymentMethod) XXX_Size() int {
	return xxx_messageInfo_PaymentMethod.Size(m)
}
func (m *PaymentMethod) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentMethod.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentMethod proto.InternalMessageInfo

func (m *PaymentMethod) GetSchema() PaymentMethodSchema {
	if m != nil {
		return m.Schema
	}
	return PAYMENT_METHOD_SCHEMA_INVALID
}

func (m *PaymentMethod) GetJson() []byte {
	if m != nil {
		return m.Json
	}
	return nil
}

func (m *PaymentMethod) GetType() PaymentMethodType {
	if m != nil {
		return m.Type
	}
	return PAYMENT_METHOD_TYPE_INVALID
}

func (m *PaymentMethod) GetProvider() PaymentMethodProvider {
	if m != nil {
		return m.Provider
	}
	return PAYMENT_METHOD_PROVIDER_INVALID
}

func (m *PaymentMethod) GetInputType() PaymentMethodInputType {
	if m != nil {
		return m.InputType
	}
	return INPUT_TYPE_INVALID
}

type PaymentMethodVerificationItem struct {
	Type                 PaymentMethodVerificationItemType `protobuf:"varint,1,opt,name=type,proto3,enum=chargehive.chtype.PaymentMethodVerificationItemType" json:"type,omitempty"`
	Value                []byte                            `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	TransportKeyId       string                            `protobuf:"bytes,4,opt,name=transport_key_id,json=transportKeyId,proto3" json:"transport_key_id,omitempty"`
	IsError              bool                              `protobuf:"varint,5,opt,name=is_error,json=isError,proto3" json:"is_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *PaymentMethodVerificationItem) Reset()         { *m = PaymentMethodVerificationItem{} }
func (m *PaymentMethodVerificationItem) String() string { return proto.CompactTextString(m) }
func (*PaymentMethodVerificationItem) ProtoMessage()    {}
func (*PaymentMethodVerificationItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e9f0d4a8cee9c1c, []int{1}
}
func (m *PaymentMethodVerificationItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentMethodVerificationItem.Unmarshal(m, b)
}
func (m *PaymentMethodVerificationItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentMethodVerificationItem.Marshal(b, m, deterministic)
}
func (m *PaymentMethodVerificationItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentMethodVerificationItem.Merge(m, src)
}
func (m *PaymentMethodVerificationItem) XXX_Size() int {
	return xxx_messageInfo_PaymentMethodVerificationItem.Size(m)
}
func (m *PaymentMethodVerificationItem) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentMethodVerificationItem.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentMethodVerificationItem proto.InternalMessageInfo

func (m *PaymentMethodVerificationItem) GetType() PaymentMethodVerificationItemType {
	if m != nil {
		return m.Type
	}
	return PAYMENT_METHOD_VERIFICATION_ITEM_TYPE_INVALID
}

func (m *PaymentMethodVerificationItem) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PaymentMethodVerificationItem) GetTransportKeyId() string {
	if m != nil {
		return m.TransportKeyId
	}
	return ""
}

func (m *PaymentMethodVerificationItem) GetIsError() bool {
	if m != nil {
		return m.IsError
	}
	return false
}

type PaymentMethodInfo struct {
	TokenId              string                 `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PaymentScheme        string                 `protobuf:"bytes,3,opt,name=payment_scheme,json=paymentScheme,proto3" json:"payment_scheme,omitempty"`
	ValidFrom            *timestamp.Timestamp   `protobuf:"bytes,4,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	Expiry               *timestamp.Timestamp   `protobuf:"bytes,5,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Type                 PaymentMethodType      `protobuf:"varint,6,opt,name=type,proto3,enum=chargehive.chtype.PaymentMethodType" json:"type,omitempty"`
	Info                 map[string]string      `protobuf:"bytes,7,rep,name=info,proto3" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Provider             PaymentMethodProvider  `protobuf:"varint,8,opt,name=provider,proto3,enum=chargehive.chtype.PaymentMethodProvider" json:"provider,omitempty"`
	InputType            PaymentMethodInputType `protobuf:"varint,9,opt,name=inputType,proto3,enum=chargehive.chtype.PaymentMethodInputType" json:"inputType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PaymentMethodInfo) Reset()         { *m = PaymentMethodInfo{} }
func (m *PaymentMethodInfo) String() string { return proto.CompactTextString(m) }
func (*PaymentMethodInfo) ProtoMessage()    {}
func (*PaymentMethodInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e9f0d4a8cee9c1c, []int{2}
}
func (m *PaymentMethodInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentMethodInfo.Unmarshal(m, b)
}
func (m *PaymentMethodInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentMethodInfo.Marshal(b, m, deterministic)
}
func (m *PaymentMethodInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentMethodInfo.Merge(m, src)
}
func (m *PaymentMethodInfo) XXX_Size() int {
	return xxx_messageInfo_PaymentMethodInfo.Size(m)
}
func (m *PaymentMethodInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentMethodInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentMethodInfo proto.InternalMessageInfo

func (m *PaymentMethodInfo) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *PaymentMethodInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PaymentMethodInfo) GetPaymentScheme() string {
	if m != nil {
		return m.PaymentScheme
	}
	return ""
}

func (m *PaymentMethodInfo) GetValidFrom() *timestamp.Timestamp {
	if m != nil {
		return m.ValidFrom
	}
	return nil
}

func (m *PaymentMethodInfo) GetExpiry() *timestamp.Timestamp {
	if m != nil {
		return m.Expiry
	}
	return nil
}

func (m *PaymentMethodInfo) GetType() PaymentMethodType {
	if m != nil {
		return m.Type
	}
	return PAYMENT_METHOD_TYPE_INVALID
}

func (m *PaymentMethodInfo) GetInfo() map[string]string {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *PaymentMethodInfo) GetProvider() PaymentMethodProvider {
	if m != nil {
		return m.Provider
	}
	return PAYMENT_METHOD_PROVIDER_INVALID
}

func (m *PaymentMethodInfo) GetInputType() PaymentMethodInputType {
	if m != nil {
		return m.InputType
	}
	return INPUT_TYPE_INVALID
}

func init() {
	proto.RegisterEnum("chargehive.chtype.PaymentMethodVerificationItemType", PaymentMethodVerificationItemType_name, PaymentMethodVerificationItemType_value)
	golang_proto.RegisterEnum("chargehive.chtype.PaymentMethodVerificationItemType", PaymentMethodVerificationItemType_name, PaymentMethodVerificationItemType_value)
	proto.RegisterType((*PaymentMethod)(nil), "chargehive.chtype.PaymentMethod")
	golang_proto.RegisterType((*PaymentMethod)(nil), "chargehive.chtype.PaymentMethod")
	proto.RegisterType((*PaymentMethodVerificationItem)(nil), "chargehive.chtype.PaymentMethodVerificationItem")
	golang_proto.RegisterType((*PaymentMethodVerificationItem)(nil), "chargehive.chtype.PaymentMethodVerificationItem")
	proto.RegisterType((*PaymentMethodInfo)(nil), "chargehive.chtype.PaymentMethodInfo")
	golang_proto.RegisterType((*PaymentMethodInfo)(nil), "chargehive.chtype.PaymentMethodInfo")
	proto.RegisterMapType((map[string]string)(nil), "chargehive.chtype.PaymentMethodInfo.InfoEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "chargehive.chtype.PaymentMethodInfo.InfoEntry")
}

func init() {
	proto.RegisterFile("chargehive/chtype/payment_method.proto", fileDescriptor_7e9f0d4a8cee9c1c)
}
func init() {
	golang_proto.RegisterFile("chargehive/chtype/payment_method.proto", fileDescriptor_7e9f0d4a8cee9c1c)
}

var fileDescriptor_7e9f0d4a8cee9c1c = []byte{
	// 707 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x5f, 0x6f, 0xd2, 0x50,
	0x14, 0x5f, 0x0b, 0x63, 0xf4, 0xce, 0x2d, 0xec, 0xc6, 0x07, 0x24, 0x3a, 0xe7, 0xa2, 0x0b, 0x33,
	0xa1, 0x44, 0x5c, 0x32, 0xfc, 0x13, 0x13, 0x06, 0xdd, 0x68, 0x04, 0x46, 0x4a, 0x43, 0x32, 0xb3,
	0xa4, 0xe9, 0xe8, 0xa5, 0x5c, 0x47, 0x7b, 0x9b, 0xcb, 0x85, 0xd8, 0x2f, 0xe3, 0x27, 0xf0, 0x13,
	0xf8, 0xe4, 0x83, 0x4f, 0x3e, 0xf9, 0x15, 0xd4, 0x2f, 0x62, 0x7a, 0x5b, 0x60, 0x8c, 0xc4, 0xa2,
	0xf1, 0x05, 0xee, 0x39, 0xfd, 0xfd, 0x7e, 0xf7, 0x9c, 0x7b, 0x7e, 0x39, 0xe0, 0xa0, 0x37, 0x30,
	0xa9, 0x8d, 0x06, 0x78, 0x82, 0x8a, 0xbd, 0x01, 0xf3, 0x3d, 0x54, 0xf4, 0x4c, 0xdf, 0x41, 0x2e,
	0x33, 0x1c, 0xc4, 0x06, 0xc4, 0x92, 0x3d, 0x4a, 0x18, 0x81, 0x3b, 0x73, 0x9c, 0x1c, 0xe2, 0x72,
	0x05, 0x1b, 0xb3, 0xc1, 0xf8, 0x4a, 0xee, 0x11, 0xa7, 0x68, 0x13, 0x9b, 0x14, 0x39, 0xf2, 0x6a,
	0xdc, 0xe7, 0x11, 0x0f, 0xf8, 0x29, 0x54, 0xc8, 0xdd, 0x5f, 0xbe, 0x09, 0xb9, 0x63, 0x27, 0xfa,
	0x5a, 0x88, 0xab, 0xc3, 0x18, 0xf5, 0x06, 0xc8, 0x31, 0x23, 0xf8, 0x43, 0x9b, 0x10, 0x7b, 0x88,
	0xe6, 0x57, 0x32, 0xec, 0xa0, 0x11, 0x33, 0x1d, 0x2f, 0x04, 0xec, 0x7f, 0x12, 0xc1, 0x56, 0x3b,
	0x14, 0x68, 0x72, 0x3e, 0x7c, 0x03, 0x52, 0xa1, 0x44, 0x56, 0xd8, 0x13, 0xf2, 0xdb, 0xa5, 0x03,
	0x79, 0xa9, 0x25, 0x79, 0x81, 0xd1, 0xe1, 0x68, 0x2d, 0x62, 0x41, 0x08, 0x92, 0xef, 0x47, 0xc4,
	0xcd, 0x8a, 0x7b, 0x42, 0xfe, 0x8e, 0xc6, 0xcf, 0xb0, 0x0c, 0x92, 0x01, 0x2f, 0x9b, 0xe0, 0x8a,
	0x8f, 0xe3, 0x14, 0x75, 0xdf, 0x43, 0x1a, 0x67, 0xc0, 0x1a, 0x48, 0x7b, 0x94, 0x4c, 0xb0, 0x85,
	0x68, 0x36, 0xc9, 0xd9, 0xf9, 0x38, 0x76, 0x3b, 0xc2, 0x6b, 0x33, 0x26, 0x3c, 0x03, 0x12, 0x76,
	0xbd, 0x31, 0x0b, 0x84, 0xb3, 0xeb, 0x5c, 0xe6, 0x30, 0x4e, 0x46, 0x9d, 0x12, 0xb4, 0x39, 0x77,
	0xff, 0xab, 0x00, 0x1e, 0x2c, 0xa0, 0xba, 0x88, 0xe2, 0x3e, 0xee, 0x99, 0x0c, 0x13, 0x57, 0x65,
	0xc8, 0x81, 0xf5, 0xa8, 0xd5, 0xf0, 0xf1, 0x8e, 0xe2, 0x6e, 0xb9, 0xcd, 0xbf, 0xd1, 0xfa, 0x5d,
	0xb0, 0x3e, 0x31, 0x87, 0x63, 0x14, 0xbd, 0x64, 0x18, 0xc0, 0x3c, 0xc8, 0x30, 0x6a, 0xba, 0x23,
	0x8f, 0x50, 0x66, 0x5c, 0x23, 0xdf, 0xc0, 0x16, 0x7f, 0x18, 0x49, 0xdb, 0x9e, 0xe5, 0xdf, 0x22,
	0x5f, 0xb5, 0xe0, 0x3d, 0x90, 0xc6, 0x23, 0x03, 0x51, 0x4a, 0x28, 0xef, 0x39, 0xad, 0x6d, 0xe0,
	0x91, 0x12, 0x84, 0xfb, 0x1f, 0x93, 0x60, 0xe7, 0x56, 0xb3, 0x7d, 0x12, 0x10, 0x18, 0xb9, 0x46,
	0x6e, 0x20, 0x29, 0x70, 0xc9, 0x0d, 0x1e, 0xab, 0x56, 0x30, 0x54, 0xd7, 0x74, 0xc2, 0x52, 0x24,
	0x8d, 0x9f, 0xe1, 0x13, 0xb0, 0x3d, 0xb5, 0x1e, 0x1f, 0x7d, 0x38, 0x5e, 0x49, 0xdb, 0x8a, 0xb2,
	0xdc, 0x17, 0x08, 0xbe, 0x00, 0x60, 0x62, 0x0e, 0xb1, 0x65, 0xf4, 0x29, 0x71, 0x78, 0xa9, 0x9b,
	0xa5, 0x9c, 0x1c, 0xfa, 0x52, 0x9e, 0xfa, 0x52, 0xd6, 0xa7, 0xbe, 0xd4, 0x24, 0x8e, 0x3e, 0xa5,
	0xc4, 0x81, 0x25, 0x90, 0x42, 0x1f, 0x3c, 0x4c, 0x7d, 0x5e, 0xff, 0x9f, 0x69, 0x11, 0x72, 0x66,
	0xb5, 0xd4, 0x5f, 0x5b, 0xed, 0x04, 0x24, 0xb1, 0xdb, 0x27, 0xd9, 0x8d, 0xbd, 0x44, 0x7e, 0xb3,
	0x24, 0xc7, 0xfb, 0xa3, 0x4f, 0xe4, 0xe0, 0x47, 0x71, 0x19, 0xf5, 0x35, 0xce, 0x5d, 0xb0, 0x6b,
	0xfa, 0xff, 0xd8, 0x55, 0xfa, 0x77, 0xbb, 0xe6, 0x8e, 0x81, 0x34, 0xab, 0x10, 0x66, 0x40, 0xe2,
	0x1a, 0xf9, 0xd1, 0x64, 0x83, 0xe3, 0xa2, 0xc3, 0xa4, 0xc8, 0x61, 0x2f, 0xc5, 0xb2, 0xf0, 0xf4,
	0xb3, 0x08, 0x1e, 0xc5, 0xfa, 0x14, 0x3e, 0x03, 0x85, 0x76, 0xe5, 0xa2, 0xa9, 0xb4, 0x74, 0xa3,
	0xa9, 0xe8, 0xf5, 0xf3, 0x9a, 0xd1, 0x55, 0x34, 0xf5, 0x54, 0xad, 0x56, 0x74, 0xf5, 0xbc, 0x65,
	0xa8, 0xba, 0xd2, 0x34, 0xf4, 0x8b, 0xb6, 0x62, 0xa8, 0xad, 0x6e, 0xa5, 0xa1, 0xd6, 0x32, 0x6b,
	0xb0, 0x00, 0x0e, 0x57, 0xa3, 0x54, 0xbb, 0xdd, 0x8c, 0x00, 0xcb, 0xe0, 0x68, 0x35, 0x78, 0x4d,
	0xe9, 0xaa, 0xd5, 0xe0, 0x4f, 0xaf, 0xa8, 0x8d, 0x4e, 0x46, 0x84, 0xaf, 0xc0, 0xf1, 0x8a, 0xb5,
	0xd5, 0x94, 0x96, 0xae, 0x9e, 0x5e, 0x18, 0x9a, 0xd2, 0x69, 0x9f, 0xb7, 0x3a, 0x4a, 0x26, 0x01,
	0x5f, 0x83, 0xf2, 0x8a, 0x55, 0xd6, 0x2b, 0x8d, 0x86, 0xd2, 0x3a, 0x53, 0xe6, 0xec, 0xe4, 0x09,
	0xf9, 0xfe, 0x63, 0x77, 0xed, 0xcb, 0xaf, 0x5d, 0xe1, 0xdd, 0xd1, 0x8d, 0xd5, 0x7f, 0x63, 0x71,
	0x4f, 0x77, 0xfe, 0xd0, 0x74, 0xed, 0xe2, 0xd2, 0x42, 0xff, 0x26, 0xee, 0x54, 0x79, 0xae, 0x8e,
	0x27, 0xe8, 0xb2, 0xca, 0x73, 0x3f, 0xc5, 0xdc, 0x52, 0xee, 0xb2, 0x89, 0x98, 0x69, 0x99, 0xcc,
	0xbc, 0x4a, 0x71, 0xc1, 0xe7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x65, 0x38, 0xe4, 0x97, 0xa5,
	0x06, 0x00, 0x00,
}
