// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: chargehive/chtype/response_codes.proto

package chtype

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResponseCategory int32

const (
	ResponseCategory_RESPONSE_CATEGORY_INVALID       ResponseCategory = 0
	ResponseCategory_RESPONSE_CATEGORY_CHARGE        ResponseCategory = 1 //Charge is incorrectly set, e.g. currency unsupported
	ResponseCategory_RESPONSE_CATEGORY_METHOD        ResponseCategory = 2 //problem with payment method
	ResponseCategory_RESPONSE_CATEGORY_PERSON        ResponseCategory = 3 //problem with contact details, first name, address etc
	ResponseCategory_RESPONSE_CATEGORY_CONFIGURATION ResponseCategory = 4 //problem with configuration, e.g. invalid connector details, no connectors available
	ResponseCategory_RESPONSE_CATEGORY_CONNECTIVITY  ResponseCategory = 5 //timeouts
	ResponseCategory_RESPONSE_CATEGORY_FRAUD         ResponseCategory = 6 //fraud
	ResponseCategory_RESPONSE_CATEGORY_VERIFICATION  ResponseCategory = 7 //verification required
	ResponseCategory_RESPONSE_CATEGORY_PROCESSING    ResponseCategory = 8 //background processing
	ResponseCategory_RESPONSE_CATEGORY_UNKNOWN       ResponseCategory = 9
	ResponseCategory_RESPONSE_CATEGORY_REQUEST       ResponseCategory = 10 // problem with the request
)

// Enum value maps for ResponseCategory.
var (
	ResponseCategory_name = map[int32]string{
		0:  "RESPONSE_CATEGORY_INVALID",
		1:  "RESPONSE_CATEGORY_CHARGE",
		2:  "RESPONSE_CATEGORY_METHOD",
		3:  "RESPONSE_CATEGORY_PERSON",
		4:  "RESPONSE_CATEGORY_CONFIGURATION",
		5:  "RESPONSE_CATEGORY_CONNECTIVITY",
		6:  "RESPONSE_CATEGORY_FRAUD",
		7:  "RESPONSE_CATEGORY_VERIFICATION",
		8:  "RESPONSE_CATEGORY_PROCESSING",
		9:  "RESPONSE_CATEGORY_UNKNOWN",
		10: "RESPONSE_CATEGORY_REQUEST",
	}
	ResponseCategory_value = map[string]int32{
		"RESPONSE_CATEGORY_INVALID":       0,
		"RESPONSE_CATEGORY_CHARGE":        1,
		"RESPONSE_CATEGORY_METHOD":        2,
		"RESPONSE_CATEGORY_PERSON":        3,
		"RESPONSE_CATEGORY_CONFIGURATION": 4,
		"RESPONSE_CATEGORY_CONNECTIVITY":  5,
		"RESPONSE_CATEGORY_FRAUD":         6,
		"RESPONSE_CATEGORY_VERIFICATION":  7,
		"RESPONSE_CATEGORY_PROCESSING":    8,
		"RESPONSE_CATEGORY_UNKNOWN":       9,
		"RESPONSE_CATEGORY_REQUEST":       10,
	}
)

func (x ResponseCategory) Enum() *ResponseCategory {
	p := new(ResponseCategory)
	*p = x
	return p
}

func (x ResponseCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_response_codes_proto_enumTypes[0].Descriptor()
}

func (ResponseCategory) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_response_codes_proto_enumTypes[0]
}

func (x ResponseCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseCategory.Descriptor instead.
func (ResponseCategory) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_response_codes_proto_rawDescGZIP(), []int{0}
}

type ResponseError int32

const (
	ResponseError_RESPONSE_ERROR_INVALID         ResponseError = 0
	ResponseError_RESPONSE_ERROR_NONE            ResponseError = 1
	ResponseError_RESPONSE_ERROR_AVAILABLE_FUNDS ResponseError = 2
	ResponseError_RESPONSE_ERROR_PAYLOAD         ResponseError = 3
	ResponseError_RESPONSE_ERROR_LIMIT           ResponseError = 4
	ResponseError_RESPONSE_ERROR_EXPIRED         ResponseError = 5
	ResponseError_RESPONSE_ERROR_UNAVAILABLE     ResponseError = 6
	ResponseError_RESPONSE_ERROR_UNSUPPORTED     ResponseError = 7
	ResponseError_RESPONSE_ERROR_LOST            ResponseError = 8
	ResponseError_RESPONSE_ERROR_STOLEN          ResponseError = 9
	ResponseError_RESPONSE_ERROR_FRAUD           ResponseError = 10
	ResponseError_RESPONSE_ERROR_PICKUP          ResponseError = 11
	ResponseError_RESPONSE_ERROR_VELOCITY        ResponseError = 12
	ResponseError_RESPONSE_ERROR_ADDRESS         ResponseError = 13
	ResponseError_RESPONSE_ERROR_DUPLICATE       ResponseError = 14
	ResponseError_RESPONSE_ERROR_TIMEOUT         ResponseError = 15
	ResponseError_RESPONSE_ERROR_NOT_FOUND       ResponseError = 16
	ResponseError_RESPONSE_ERROR_DISPUTED        ResponseError = 17
	ResponseError_RESPONSE_ERROR_PERMISSION      ResponseError = 18
	ResponseError_RESPONSE_ERROR_DECLINE         ResponseError = 19
	ResponseError_RESPONSE_ERROR_USER_INPUT      ResponseError = 20
	ResponseError_RESPONSE_ERROR_USER_DEVICE     ResponseError = 21
	ResponseError_RESPONSE_ERROR_ALREADY_DONE    ResponseError = 22
	ResponseError_RESPONSE_ERROR_RETRY           ResponseError = 23
	ResponseError_RESPONSE_ERROR_QUEUED          ResponseError = 24
	ResponseError_RESPONSE_ERROR_SYSTEM          ResponseError = 25
	ResponseError_RESPONSE_ERROR_UNKNOWN         ResponseError = 26
	ResponseError_RESPONSE_ERROR_NOT_READY       ResponseError = 27
	ResponseError_RESPONSE_ERROR_DISABLED        ResponseError = 28
	ResponseError_RESPONSE_ERROR_CVV             ResponseError = 29
)

// Enum value maps for ResponseError.
var (
	ResponseError_name = map[int32]string{
		0:  "RESPONSE_ERROR_INVALID",
		1:  "RESPONSE_ERROR_NONE",
		2:  "RESPONSE_ERROR_AVAILABLE_FUNDS",
		3:  "RESPONSE_ERROR_PAYLOAD",
		4:  "RESPONSE_ERROR_LIMIT",
		5:  "RESPONSE_ERROR_EXPIRED",
		6:  "RESPONSE_ERROR_UNAVAILABLE",
		7:  "RESPONSE_ERROR_UNSUPPORTED",
		8:  "RESPONSE_ERROR_LOST",
		9:  "RESPONSE_ERROR_STOLEN",
		10: "RESPONSE_ERROR_FRAUD",
		11: "RESPONSE_ERROR_PICKUP",
		12: "RESPONSE_ERROR_VELOCITY",
		13: "RESPONSE_ERROR_ADDRESS",
		14: "RESPONSE_ERROR_DUPLICATE",
		15: "RESPONSE_ERROR_TIMEOUT",
		16: "RESPONSE_ERROR_NOT_FOUND",
		17: "RESPONSE_ERROR_DISPUTED",
		18: "RESPONSE_ERROR_PERMISSION",
		19: "RESPONSE_ERROR_DECLINE",
		20: "RESPONSE_ERROR_USER_INPUT",
		21: "RESPONSE_ERROR_USER_DEVICE",
		22: "RESPONSE_ERROR_ALREADY_DONE",
		23: "RESPONSE_ERROR_RETRY",
		24: "RESPONSE_ERROR_QUEUED",
		25: "RESPONSE_ERROR_SYSTEM",
		26: "RESPONSE_ERROR_UNKNOWN",
		27: "RESPONSE_ERROR_NOT_READY",
		28: "RESPONSE_ERROR_DISABLED",
		29: "RESPONSE_ERROR_CVV",
	}
	ResponseError_value = map[string]int32{
		"RESPONSE_ERROR_INVALID":         0,
		"RESPONSE_ERROR_NONE":            1,
		"RESPONSE_ERROR_AVAILABLE_FUNDS": 2,
		"RESPONSE_ERROR_PAYLOAD":         3,
		"RESPONSE_ERROR_LIMIT":           4,
		"RESPONSE_ERROR_EXPIRED":         5,
		"RESPONSE_ERROR_UNAVAILABLE":     6,
		"RESPONSE_ERROR_UNSUPPORTED":     7,
		"RESPONSE_ERROR_LOST":            8,
		"RESPONSE_ERROR_STOLEN":          9,
		"RESPONSE_ERROR_FRAUD":           10,
		"RESPONSE_ERROR_PICKUP":          11,
		"RESPONSE_ERROR_VELOCITY":        12,
		"RESPONSE_ERROR_ADDRESS":         13,
		"RESPONSE_ERROR_DUPLICATE":       14,
		"RESPONSE_ERROR_TIMEOUT":         15,
		"RESPONSE_ERROR_NOT_FOUND":       16,
		"RESPONSE_ERROR_DISPUTED":        17,
		"RESPONSE_ERROR_PERMISSION":      18,
		"RESPONSE_ERROR_DECLINE":         19,
		"RESPONSE_ERROR_USER_INPUT":      20,
		"RESPONSE_ERROR_USER_DEVICE":     21,
		"RESPONSE_ERROR_ALREADY_DONE":    22,
		"RESPONSE_ERROR_RETRY":           23,
		"RESPONSE_ERROR_QUEUED":          24,
		"RESPONSE_ERROR_SYSTEM":          25,
		"RESPONSE_ERROR_UNKNOWN":         26,
		"RESPONSE_ERROR_NOT_READY":       27,
		"RESPONSE_ERROR_DISABLED":        28,
		"RESPONSE_ERROR_CVV":             29,
	}
)

func (x ResponseError) Enum() *ResponseError {
	p := new(ResponseError)
	*p = x
	return p
}

func (x ResponseError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseError) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_response_codes_proto_enumTypes[1].Descriptor()
}

func (ResponseError) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_response_codes_proto_enumTypes[1]
}

func (x ResponseError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseError.Descriptor instead.
func (ResponseError) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_response_codes_proto_rawDescGZIP(), []int{1}
}

type ResponseCode int32

const (
	// Invalid response code
	ResponseCode_RESPONSE_CODE_INVALID ResponseCode = 0
	// Generic Informational Response
	ResponseCode_RESPONSE_CODE_INFO ResponseCode = 1000
	// Success Response
	ResponseCode_RESPONSE_CODE_OK ResponseCode = 2000
	// Partial Success Response
	ResponseCode_RESPONSE_CODE_OK_PARTIAL ResponseCode = 2100
	// 3D Secure, Pending, Come back later
	ResponseCode_RESPONSE_CODE_REDIRECT ResponseCode = 3000
	// Request is still processing, check back later
	ResponseCode_RESPONSE_CODE_REDIRECT_STILL_PROCESSING ResponseCode = 3010
	// Issue with the client request
	ResponseCode_RESPONSE_CODE_CLIENT ResponseCode = 4000
	// Invalid request payload
	ResponseCode_RESPONSE_CODE_CLIENT_PAYLOAD ResponseCode = 4100
	// Invalid amount in request payload
	ResponseCode_RESPONSE_CODE_CLIENT_PAYLOAD_AMOUNT ResponseCode = 4110
	// Invalid card data in request payload
	ResponseCode_RESPONSE_CODE_CLIENT_PAYLOAD_CARD ResponseCode = 4120
	// Invalid card number in request payload
	ResponseCode_RESPONSE_CODE_CLIENT_PAYLOAD_CARD_NUMBER ResponseCode = 4130
	// Invalid card date in request payload
	ResponseCode_RESPONSE_CODE_CLIENT_PAYLOAD_CARD_DATE ResponseCode = 4140
	// Invalid card CVV in request payload
	ResponseCode_RESPONSE_CODE_CLIENT_PAYLOAD_CARD_CVV ResponseCode = 4150
	// Invalid card type in request payload
	ResponseCode_RESPONSE_CODE_CLIENT_PAYLOAD_CARD_TYPE ResponseCode = 4160
	// Invalid address data in request payload
	ResponseCode_RESPONSE_CODE_CLIENT_PAYLOAD_ADDRESS ResponseCode = 4170
	// Invalid zip data in request payload
	ResponseCode_RESPONSE_CODE_CLIENT_PAYLOAD_ZIP ResponseCode = 4180
	// Invalid currency data in request payload
	ResponseCode_RESPONSE_CODE_CLIENT_PAYLOAD_CURRENCY ResponseCode = 4190
	// Error with payment method source
	ResponseCode_RESPONSE_CODE_CLIENT_PAYMENT_METHOD ResponseCode = 4300
	// Payment method has insufficient funds
	ResponseCode_RESPONSE_CODE_CLIENT_PAYMENT_METHOD_FUNDS ResponseCode = 4310
	// Payment method has reached an amount or frequency limit
	ResponseCode_RESPONSE_CODE_CLIENT_PAYMENT_METHOD_LIMIT ResponseCode = 4320
	// Payment method does not allow this request
	ResponseCode_RESPONSE_CODE_CLIENT_PAYMENT_METHOD_NOT_PERMITTED ResponseCode = 4330
	// Transaction declined due to security issues
	ResponseCode_RESPONSE_CODE_CLIENT_SECURITY ResponseCode = 4500
	// Transaction likely fraudulent
	ResponseCode_RESPONSE_CODE_CLIENT_SECURITY_FRAUD ResponseCode = 4510
	// Payment card may be lost
	ResponseCode_RESPONSE_CODE_CLIENT_SECURITY_LOST ResponseCode = 4520
	// Payment card may be stolen
	ResponseCode_RESPONSE_CODE_CLIENT_SECURITY_STOLEN ResponseCode = 4530
	// Payment card should be retrieved from the customer
	ResponseCode_RESPONSE_CODE_CLIENT_SECURITY_PICKUP ResponseCode = 4540
	// Customer should contact their payment method provider
	ResponseCode_RESPONSE_CODE_CLIENT_SECURITY_CONTACT_ISSUER ResponseCode = 4550
	// Transaction suspected of fraud
	ResponseCode_RESPONSE_CODE_CLIENT_SECURITY_SUSPECTED_FRAUD ResponseCode = 4560
	// Velocity fraud check failed
	ResponseCode_RESPONSE_CODE_CLIENT_SECURITY_VELOCITY ResponseCode = 4570
	// AVS fraud check failed
	ResponseCode_RESPONSE_CODE_CLIENT_SECURITY_AVS ResponseCode = 4580
	// CVV security check failed
	ResponseCode_RESPONSE_CODE_CLIENT_SECURITY_CVV ResponseCode = 4590
	// Issues with the processing the transaction or associated transactions
	ResponseCode_RESPONSE_CODE_CLIENT_TRANS ResponseCode = 4700
	// Generic decline from payment method
	ResponseCode_RESPONSE_CODE_CLIENT_TRANS_DECLINED ResponseCode = 4710
	// Generic failure of payment method
	ResponseCode_RESPONSE_CODE_CLIENT_TRANS_FAILED ResponseCode = 4720
	// Cannot complete transaction as not authorised or unable to complete
	ResponseCode_RESPONSE_CODE_CLIENT_TRANS_PERMISSION ResponseCode = 4730
	// Transaction or associated transaction cannot be found
	ResponseCode_RESPONSE_CODE_CLIENT_TRANS_NOT_FOUND ResponseCode = 4740
	// This transaction has already been sent
	ResponseCode_RESPONSE_CODE_CLIENT_TRANS_DUPLICATE ResponseCode = 4750
	// Payment method provider suggests the transaction be reattempted
	ResponseCode_RESPONSE_CODE_CLIENT_TRANS_RETRY ResponseCode = 4760
	// Transaction or associated transaction has expired and cannot complete
	ResponseCode_RESPONSE_CODE_CLIENT_TRANS_EXPIRED ResponseCode = 4770
	// Transaction or associated transaction is disputed/part of a chargeback
	ResponseCode_RESPONSE_CODE_CLIENT_TRANS_DISPUTE ResponseCode = 4780
	// Payment method provider did not response in time
	ResponseCode_RESPONSE_CODE_CLIENT_TRANS_TIMEOUT ResponseCode = 4790
	// Operation has already been completed
	ResponseCode_RESPONSE_CODE_CLIENT_TRANS_ALREADY_DONE ResponseCode = 4800
	// Cannot complete operation now, but may be ready later
	ResponseCode_RESPONSE_CODE_CLIENT_TRANS_NOT_READY ResponseCode = 4810
	// Connector does not support this payment method
	ResponseCode_RESPONSE_CODE_CLIENT_TRANS_PAYMENT_METHOD ResponseCode = 4820
	// Amount or volume exceeds some limit
	ResponseCode_RESPONSE_CODE_CLIENT_TRANS_EXCEEDS_LIMIT ResponseCode = 4830
	// 3D Secure issues
	ResponseCode_RESPONSE_CODE_CLIENT_3DSEC ResponseCode = 4900
	// 3D Secure Authentication required
	ResponseCode_RESPONSE_CODE_CLIENT_3DSEC_AUTHENTICATION ResponseCode = 4910
	// Issues with the connector
	ResponseCode_RESPONSE_CODE_CONN ResponseCode = 5000
	// Internal ChargeHive error
	ResponseCode_RESPONSE_CODE_CONN_CHARGEHIVE ResponseCode = 5010
	// Connector misconfiguration or authentication error
	ResponseCode_RESPONSE_CODE_CONN_CONFIG_AUTH ResponseCode = 5500
	// Connector does not exist
	ResponseCode_RESPONSE_CODE_CONN_INVALID ResponseCode = 5510
	// Cannot communicate with connector service
	ResponseCode_RESPONSE_CODE_CONN_UNAVAILABLE ResponseCode = 5520
	// Internal error from connector
	ResponseCode_RESPONSE_CODE_CONN_ERROR ResponseCode = 5530
	// Connector rate or amount limit has been reached
	ResponseCode_RESPONSE_CODE_CONN_LIMIT_EXCEEDED ResponseCode = 5540
	// Connector, or connector account does not support this type of request
	ResponseCode_RESPONSE_CODE_CONN_UNSUPPORTED_METHOD ResponseCode = 5550
	// Connection with the connector has timed out
	ResponseCode_RESPONSE_CODE_CONN_TIMEOUT ResponseCode = 5570
	// Unknown error, if received, this should be remapped to a propper code
	ResponseCode_RESPONSE_CODE_UNKNOWN ResponseCode = 5990
)

// Enum value maps for ResponseCode.
var (
	ResponseCode_name = map[int32]string{
		0:    "RESPONSE_CODE_INVALID",
		1000: "RESPONSE_CODE_INFO",
		2000: "RESPONSE_CODE_OK",
		2100: "RESPONSE_CODE_OK_PARTIAL",
		3000: "RESPONSE_CODE_REDIRECT",
		3010: "RESPONSE_CODE_REDIRECT_STILL_PROCESSING",
		4000: "RESPONSE_CODE_CLIENT",
		4100: "RESPONSE_CODE_CLIENT_PAYLOAD",
		4110: "RESPONSE_CODE_CLIENT_PAYLOAD_AMOUNT",
		4120: "RESPONSE_CODE_CLIENT_PAYLOAD_CARD",
		4130: "RESPONSE_CODE_CLIENT_PAYLOAD_CARD_NUMBER",
		4140: "RESPONSE_CODE_CLIENT_PAYLOAD_CARD_DATE",
		4150: "RESPONSE_CODE_CLIENT_PAYLOAD_CARD_CVV",
		4160: "RESPONSE_CODE_CLIENT_PAYLOAD_CARD_TYPE",
		4170: "RESPONSE_CODE_CLIENT_PAYLOAD_ADDRESS",
		4180: "RESPONSE_CODE_CLIENT_PAYLOAD_ZIP",
		4190: "RESPONSE_CODE_CLIENT_PAYLOAD_CURRENCY",
		4300: "RESPONSE_CODE_CLIENT_PAYMENT_METHOD",
		4310: "RESPONSE_CODE_CLIENT_PAYMENT_METHOD_FUNDS",
		4320: "RESPONSE_CODE_CLIENT_PAYMENT_METHOD_LIMIT",
		4330: "RESPONSE_CODE_CLIENT_PAYMENT_METHOD_NOT_PERMITTED",
		4500: "RESPONSE_CODE_CLIENT_SECURITY",
		4510: "RESPONSE_CODE_CLIENT_SECURITY_FRAUD",
		4520: "RESPONSE_CODE_CLIENT_SECURITY_LOST",
		4530: "RESPONSE_CODE_CLIENT_SECURITY_STOLEN",
		4540: "RESPONSE_CODE_CLIENT_SECURITY_PICKUP",
		4550: "RESPONSE_CODE_CLIENT_SECURITY_CONTACT_ISSUER",
		4560: "RESPONSE_CODE_CLIENT_SECURITY_SUSPECTED_FRAUD",
		4570: "RESPONSE_CODE_CLIENT_SECURITY_VELOCITY",
		4580: "RESPONSE_CODE_CLIENT_SECURITY_AVS",
		4590: "RESPONSE_CODE_CLIENT_SECURITY_CVV",
		4700: "RESPONSE_CODE_CLIENT_TRANS",
		4710: "RESPONSE_CODE_CLIENT_TRANS_DECLINED",
		4720: "RESPONSE_CODE_CLIENT_TRANS_FAILED",
		4730: "RESPONSE_CODE_CLIENT_TRANS_PERMISSION",
		4740: "RESPONSE_CODE_CLIENT_TRANS_NOT_FOUND",
		4750: "RESPONSE_CODE_CLIENT_TRANS_DUPLICATE",
		4760: "RESPONSE_CODE_CLIENT_TRANS_RETRY",
		4770: "RESPONSE_CODE_CLIENT_TRANS_EXPIRED",
		4780: "RESPONSE_CODE_CLIENT_TRANS_DISPUTE",
		4790: "RESPONSE_CODE_CLIENT_TRANS_TIMEOUT",
		4800: "RESPONSE_CODE_CLIENT_TRANS_ALREADY_DONE",
		4810: "RESPONSE_CODE_CLIENT_TRANS_NOT_READY",
		4820: "RESPONSE_CODE_CLIENT_TRANS_PAYMENT_METHOD",
		4830: "RESPONSE_CODE_CLIENT_TRANS_EXCEEDS_LIMIT",
		4900: "RESPONSE_CODE_CLIENT_3DSEC",
		4910: "RESPONSE_CODE_CLIENT_3DSEC_AUTHENTICATION",
		5000: "RESPONSE_CODE_CONN",
		5010: "RESPONSE_CODE_CONN_CHARGEHIVE",
		5500: "RESPONSE_CODE_CONN_CONFIG_AUTH",
		5510: "RESPONSE_CODE_CONN_INVALID",
		5520: "RESPONSE_CODE_CONN_UNAVAILABLE",
		5530: "RESPONSE_CODE_CONN_ERROR",
		5540: "RESPONSE_CODE_CONN_LIMIT_EXCEEDED",
		5550: "RESPONSE_CODE_CONN_UNSUPPORTED_METHOD",
		5570: "RESPONSE_CODE_CONN_TIMEOUT",
		5990: "RESPONSE_CODE_UNKNOWN",
	}
	ResponseCode_value = map[string]int32{
		"RESPONSE_CODE_INVALID":                             0,
		"RESPONSE_CODE_INFO":                                1000,
		"RESPONSE_CODE_OK":                                  2000,
		"RESPONSE_CODE_OK_PARTIAL":                          2100,
		"RESPONSE_CODE_REDIRECT":                            3000,
		"RESPONSE_CODE_REDIRECT_STILL_PROCESSING":           3010,
		"RESPONSE_CODE_CLIENT":                              4000,
		"RESPONSE_CODE_CLIENT_PAYLOAD":                      4100,
		"RESPONSE_CODE_CLIENT_PAYLOAD_AMOUNT":               4110,
		"RESPONSE_CODE_CLIENT_PAYLOAD_CARD":                 4120,
		"RESPONSE_CODE_CLIENT_PAYLOAD_CARD_NUMBER":          4130,
		"RESPONSE_CODE_CLIENT_PAYLOAD_CARD_DATE":            4140,
		"RESPONSE_CODE_CLIENT_PAYLOAD_CARD_CVV":             4150,
		"RESPONSE_CODE_CLIENT_PAYLOAD_CARD_TYPE":            4160,
		"RESPONSE_CODE_CLIENT_PAYLOAD_ADDRESS":              4170,
		"RESPONSE_CODE_CLIENT_PAYLOAD_ZIP":                  4180,
		"RESPONSE_CODE_CLIENT_PAYLOAD_CURRENCY":             4190,
		"RESPONSE_CODE_CLIENT_PAYMENT_METHOD":               4300,
		"RESPONSE_CODE_CLIENT_PAYMENT_METHOD_FUNDS":         4310,
		"RESPONSE_CODE_CLIENT_PAYMENT_METHOD_LIMIT":         4320,
		"RESPONSE_CODE_CLIENT_PAYMENT_METHOD_NOT_PERMITTED": 4330,
		"RESPONSE_CODE_CLIENT_SECURITY":                     4500,
		"RESPONSE_CODE_CLIENT_SECURITY_FRAUD":               4510,
		"RESPONSE_CODE_CLIENT_SECURITY_LOST":                4520,
		"RESPONSE_CODE_CLIENT_SECURITY_STOLEN":              4530,
		"RESPONSE_CODE_CLIENT_SECURITY_PICKUP":              4540,
		"RESPONSE_CODE_CLIENT_SECURITY_CONTACT_ISSUER":      4550,
		"RESPONSE_CODE_CLIENT_SECURITY_SUSPECTED_FRAUD":     4560,
		"RESPONSE_CODE_CLIENT_SECURITY_VELOCITY":            4570,
		"RESPONSE_CODE_CLIENT_SECURITY_AVS":                 4580,
		"RESPONSE_CODE_CLIENT_SECURITY_CVV":                 4590,
		"RESPONSE_CODE_CLIENT_TRANS":                        4700,
		"RESPONSE_CODE_CLIENT_TRANS_DECLINED":               4710,
		"RESPONSE_CODE_CLIENT_TRANS_FAILED":                 4720,
		"RESPONSE_CODE_CLIENT_TRANS_PERMISSION":             4730,
		"RESPONSE_CODE_CLIENT_TRANS_NOT_FOUND":              4740,
		"RESPONSE_CODE_CLIENT_TRANS_DUPLICATE":              4750,
		"RESPONSE_CODE_CLIENT_TRANS_RETRY":                  4760,
		"RESPONSE_CODE_CLIENT_TRANS_EXPIRED":                4770,
		"RESPONSE_CODE_CLIENT_TRANS_DISPUTE":                4780,
		"RESPONSE_CODE_CLIENT_TRANS_TIMEOUT":                4790,
		"RESPONSE_CODE_CLIENT_TRANS_ALREADY_DONE":           4800,
		"RESPONSE_CODE_CLIENT_TRANS_NOT_READY":              4810,
		"RESPONSE_CODE_CLIENT_TRANS_PAYMENT_METHOD":         4820,
		"RESPONSE_CODE_CLIENT_TRANS_EXCEEDS_LIMIT":          4830,
		"RESPONSE_CODE_CLIENT_3DSEC":                        4900,
		"RESPONSE_CODE_CLIENT_3DSEC_AUTHENTICATION":         4910,
		"RESPONSE_CODE_CONN":                                5000,
		"RESPONSE_CODE_CONN_CHARGEHIVE":                     5010,
		"RESPONSE_CODE_CONN_CONFIG_AUTH":                    5500,
		"RESPONSE_CODE_CONN_INVALID":                        5510,
		"RESPONSE_CODE_CONN_UNAVAILABLE":                    5520,
		"RESPONSE_CODE_CONN_ERROR":                          5530,
		"RESPONSE_CODE_CONN_LIMIT_EXCEEDED":                 5540,
		"RESPONSE_CODE_CONN_UNSUPPORTED_METHOD":             5550,
		"RESPONSE_CODE_CONN_TIMEOUT":                        5570,
		"RESPONSE_CODE_UNKNOWN":                             5990,
	}
)

func (x ResponseCode) Enum() *ResponseCode {
	p := new(ResponseCode)
	*p = x
	return p
}

func (x ResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_response_codes_proto_enumTypes[2].Descriptor()
}

func (ResponseCode) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_response_codes_proto_enumTypes[2]
}

func (x ResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseCode.Descriptor instead.
func (ResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_response_codes_proto_rawDescGZIP(), []int{2}
}

type ResponseDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseCode    string            `protobuf:"bytes,1,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
	ConsumerMessage string            `protobuf:"bytes,2,opt,name=consumer_message,json=consumerMessage,proto3" json:"consumer_message,omitempty"`
	MerchantMessage string            `protobuf:"bytes,3,opt,name=merchant_message,json=merchantMessage,proto3" json:"merchant_message,omitempty"`
	FailureType     FailureType       `protobuf:"varint,4,opt,name=failure_type,json=failureType,proto3,enum=chargehive.chtype.FailureType" json:"failure_type,omitempty"`
	Category        ResponseCategory  `protobuf:"varint,5,opt,name=category,proto3,enum=chargehive.chtype.ResponseCategory" json:"category,omitempty"`
	ErrorType       ResponseError     `protobuf:"varint,6,opt,name=error_type,json=errorType,proto3,enum=chargehive.chtype.ResponseError" json:"error_type,omitempty"`
	ErrorProperties map[string]string `protobuf:"bytes,7,rep,name=error_properties,json=errorProperties,proto3" json:"error_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OriginatingCode string            `protobuf:"bytes,8,opt,name=originating_code,json=originatingCode,proto3" json:"originating_code,omitempty"`
	SpecificErrors  []*ResponseDetail `protobuf:"bytes,9,rep,name=specific_errors,json=specificErrors,proto3" json:"specific_errors,omitempty"`
}

func (x *ResponseDetail) Reset() {
	*x = ResponseDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chargehive_chtype_response_codes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseDetail) ProtoMessage() {}

func (x *ResponseDetail) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_response_codes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseDetail.ProtoReflect.Descriptor instead.
func (*ResponseDetail) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_response_codes_proto_rawDescGZIP(), []int{0}
}

func (x *ResponseDetail) GetResponseCode() string {
	if x != nil {
		return x.ResponseCode
	}
	return ""
}

func (x *ResponseDetail) GetConsumerMessage() string {
	if x != nil {
		return x.ConsumerMessage
	}
	return ""
}

func (x *ResponseDetail) GetMerchantMessage() string {
	if x != nil {
		return x.MerchantMessage
	}
	return ""
}

func (x *ResponseDetail) GetFailureType() FailureType {
	if x != nil {
		return x.FailureType
	}
	return FailureType_FAILURE_TYPE_INVALID
}

func (x *ResponseDetail) GetCategory() ResponseCategory {
	if x != nil {
		return x.Category
	}
	return ResponseCategory_RESPONSE_CATEGORY_INVALID
}

func (x *ResponseDetail) GetErrorType() ResponseError {
	if x != nil {
		return x.ErrorType
	}
	return ResponseError_RESPONSE_ERROR_INVALID
}

func (x *ResponseDetail) GetErrorProperties() map[string]string {
	if x != nil {
		return x.ErrorProperties
	}
	return nil
}

func (x *ResponseDetail) GetOriginatingCode() string {
	if x != nil {
		return x.OriginatingCode
	}
	return ""
}

func (x *ResponseDetail) GetSpecificErrors() []*ResponseDetail {
	if x != nil {
		return x.SpecificErrors
	}
	return nil
}

var File_chargehive_chtype_response_codes_proto protoreflect.FileDescriptor

var file_chargehive_chtype_response_codes_proto_rawDesc = []byte{
	0x0a, 0x26, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x1c, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee, 0x04, 0x0a, 0x0e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x61, 0x0a, 0x10,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x42, 0x0a, 0x14, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xf5, 0x02, 0x0a, 0x10, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x22, 0x0a,
	0x1e, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10,
	0x05, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x06, 0x12, 0x22,
	0x0a, 0x1e, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x0a, 0x2a, 0xeb, 0x06, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12,
	0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12,
	0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x4c, 0x45,
	0x4e, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x0a, 0x12, 0x19, 0x0a,
	0x15, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x50, 0x49, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x56, 0x45, 0x4c, 0x4f, 0x43,
	0x49, 0x54, 0x59, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x0e, 0x12,
	0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x0f, 0x12, 0x1c, 0x0a, 0x18, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x55, 0x54, 0x45, 0x44, 0x10, 0x11, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x12, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x10,
	0x13, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x14,
	0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x15,
	0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10,
	0x16, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x17, 0x12, 0x19, 0x0a, 0x15, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x51, 0x55,
	0x45, 0x55, 0x45, 0x44, 0x10, 0x18, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10,
	0x19, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x1a, 0x12, 0x1c, 0x0a,
	0x18, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x1b, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x1c, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x56, 0x56, 0x10, 0x1d,
	0x2a, 0xf1, 0x11, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x12,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0xe8, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x4b, 0x10, 0xd0, 0x0f, 0x12, 0x1d, 0x0a, 0x18,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x4b,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0xb4, 0x10, 0x12, 0x1b, 0x0a, 0x16, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0xb8, 0x17, 0x12, 0x2c, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x5f, 0x53, 0x54, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x10, 0xc2, 0x17, 0x12, 0x19, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0xa0,
	0x1f, 0x12, 0x21, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41,
	0x44, 0x10, 0x84, 0x20, 0x12, 0x28, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x59,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x8e, 0x20, 0x12, 0x26,
	0x0a, 0x21, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x10, 0x98, 0x20, 0x12, 0x2d, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50,
	0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0xa2, 0x20, 0x12, 0x2b, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41,
	0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10,
	0xac, 0x20, 0x12, 0x2a, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x56, 0x56, 0x10, 0xb6, 0x20, 0x12, 0x2b,
	0x0a, 0x26, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xc0, 0x20, 0x12, 0x29, 0x0a, 0x24, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x10, 0xca, 0x20, 0x12, 0x25, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50,
	0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x5a, 0x49, 0x50, 0x10, 0xd4, 0x20, 0x12, 0x2a, 0x0a,
	0x25, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0xde, 0x20, 0x12, 0x28, 0x0a, 0x23, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x10, 0xcc, 0x21, 0x12, 0x2e, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53,
	0x10, 0xd6, 0x21, 0x12, 0x2e, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x10, 0xe0, 0x21, 0x12, 0x36, 0x0a, 0x31, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0xea, 0x21, 0x12, 0x22, 0x0a, 0x1d, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x94, 0x23, 0x12,
	0x28, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x9e, 0x23, 0x12, 0x27, 0x0a, 0x22, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10,
	0xa8, 0x23, 0x12, 0x29, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x4c, 0x45, 0x4e, 0x10, 0xb2, 0x23, 0x12, 0x29, 0x0a,
	0x24, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50,
	0x49, 0x43, 0x4b, 0x55, 0x50, 0x10, 0xbc, 0x23, 0x12, 0x31, 0x0a, 0x2c, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43,
	0x54, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x52, 0x10, 0xc6, 0x23, 0x12, 0x32, 0x0a, 0x2d, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x55, 0x53,
	0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0xd0, 0x23, 0x12,
	0x2b, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x56, 0x45, 0x4c, 0x4f, 0x43, 0x49, 0x54, 0x59, 0x10, 0xda, 0x23, 0x12, 0x26, 0x0a, 0x21,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x56,
	0x53, 0x10, 0xe4, 0x23, 0x12, 0x26, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x56, 0x56, 0x10, 0xee, 0x23, 0x12, 0x1f, 0x0a, 0x1a,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x10, 0xdc, 0x24, 0x12, 0x28, 0x0a,
	0x23, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x44, 0x45, 0x43, 0x4c,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0xe6, 0x24, 0x12, 0x26, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xf0, 0x24, 0x12,
	0x2a, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xfa, 0x24, 0x12, 0x29, 0x0a, 0x24, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x84, 0x25, 0x12, 0x29, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x8e,
	0x25, 0x12, 0x25, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f,
	0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x98, 0x25, 0x12, 0x27, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0xa2,
	0x25, 0x12, 0x27, 0x0a, 0x22, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x10, 0xac, 0x25, 0x12, 0x27, 0x0a, 0x22, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
	0x10, 0xb6, 0x25, 0x12, 0x2c, 0x0a, 0x27, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0xc0,
	0x25, 0x12, 0x29, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0xca, 0x25, 0x12, 0x2e, 0x0a, 0x29,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0xd4, 0x25, 0x12, 0x2d, 0x0a, 0x28,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45,
	0x44, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0xde, 0x25, 0x12, 0x1f, 0x0a, 0x1a, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x33, 0x44, 0x53, 0x45, 0x43, 0x10, 0xa4, 0x26, 0x12, 0x2e, 0x0a, 0x29,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x33, 0x44, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xae, 0x26, 0x12, 0x17, 0x0a, 0x12,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x10, 0x88, 0x27, 0x12, 0x22, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x52,
	0x47, 0x45, 0x48, 0x49, 0x56, 0x45, 0x10, 0x92, 0x27, 0x12, 0x23, 0x0a, 0x1e, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0xfc, 0x2a, 0x12, 0x1f,
	0x0a, 0x1a, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x86, 0x2b, 0x12,
	0x23, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x90, 0x2b, 0x12, 0x1d, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x9a, 0x2b, 0x12, 0x26, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xa4, 0x2b, 0x12, 0x2a, 0x0a, 0x25, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x10, 0xae, 0x2b, 0x12, 0x1f, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0xc2, 0x2b, 0x12, 0x1a, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0xe6, 0x2e, 0x42, 0x67, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0xca, 0x02, 0x11, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x48, 0x69, 0x76, 0x65, 0x5c, 0x43, 0x68, 0x74, 0x79, 0x70, 0x65,
	0xe2, 0x02, 0x1a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x48, 0x69, 0x76, 0x65, 0x5c, 0x43, 0x68,
	0x74, 0x79, 0x70, 0x65, 0x5c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chargehive_chtype_response_codes_proto_rawDescOnce sync.Once
	file_chargehive_chtype_response_codes_proto_rawDescData = file_chargehive_chtype_response_codes_proto_rawDesc
)

func file_chargehive_chtype_response_codes_proto_rawDescGZIP() []byte {
	file_chargehive_chtype_response_codes_proto_rawDescOnce.Do(func() {
		file_chargehive_chtype_response_codes_proto_rawDescData = protoimpl.X.CompressGZIP(file_chargehive_chtype_response_codes_proto_rawDescData)
	})
	return file_chargehive_chtype_response_codes_proto_rawDescData
}

var file_chargehive_chtype_response_codes_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_chargehive_chtype_response_codes_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_chargehive_chtype_response_codes_proto_goTypes = []interface{}{
	(ResponseCategory)(0),  // 0: chargehive.chtype.ResponseCategory
	(ResponseError)(0),     // 1: chargehive.chtype.ResponseError
	(ResponseCode)(0),      // 2: chargehive.chtype.ResponseCode
	(*ResponseDetail)(nil), // 3: chargehive.chtype.ResponseDetail
	nil,                    // 4: chargehive.chtype.ResponseDetail.ErrorPropertiesEntry
	(FailureType)(0),       // 5: chargehive.chtype.FailureType
}
var file_chargehive_chtype_response_codes_proto_depIdxs = []int32{
	5, // 0: chargehive.chtype.ResponseDetail.failure_type:type_name -> chargehive.chtype.FailureType
	0, // 1: chargehive.chtype.ResponseDetail.category:type_name -> chargehive.chtype.ResponseCategory
	1, // 2: chargehive.chtype.ResponseDetail.error_type:type_name -> chargehive.chtype.ResponseError
	4, // 3: chargehive.chtype.ResponseDetail.error_properties:type_name -> chargehive.chtype.ResponseDetail.ErrorPropertiesEntry
	3, // 4: chargehive.chtype.ResponseDetail.specific_errors:type_name -> chargehive.chtype.ResponseDetail
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_chargehive_chtype_response_codes_proto_init() }
func file_chargehive_chtype_response_codes_proto_init() {
	if File_chargehive_chtype_response_codes_proto != nil {
		return
	}
	file_chargehive_chtype_enum_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chargehive_chtype_response_codes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chargehive_chtype_response_codes_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chargehive_chtype_response_codes_proto_goTypes,
		DependencyIndexes: file_chargehive_chtype_response_codes_proto_depIdxs,
		EnumInfos:         file_chargehive_chtype_response_codes_proto_enumTypes,
		MessageInfos:      file_chargehive_chtype_response_codes_proto_msgTypes,
	}.Build()
	File_chargehive_chtype_response_codes_proto = out.File
	file_chargehive_chtype_response_codes_proto_rawDesc = nil
	file_chargehive_chtype_response_codes_proto_goTypes = nil
	file_chargehive_chtype_response_codes_proto_depIdxs = nil
}
