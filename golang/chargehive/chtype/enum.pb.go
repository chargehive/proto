// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.4
// source: chargehive/chtype/enum.proto

package chtype

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_STATUS_INVALID Status = 0
	// Pre Setup 1-9
	Status_STATUS_PENDING Status = 1
	// Setup 10-29
	Status_STATUS_SETUP        Status = 10
	Status_STATUS_PROVISIONING Status = 20
	// Active 30-49
	Status_STATUS_ACTIVE Status = 30
	// Inactive 50-69
	Status_STATUS_SUSPENDED Status = 50
	Status_STATUS_CANCELLED Status = 60
	// Unavailable 70+
	Status_STATUS_ARCHIVED Status = 70
	Status_STATUS_DELETED  Status = 90
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0:  "STATUS_INVALID",
		1:  "STATUS_PENDING",
		10: "STATUS_SETUP",
		20: "STATUS_PROVISIONING",
		30: "STATUS_ACTIVE",
		50: "STATUS_SUSPENDED",
		60: "STATUS_CANCELLED",
		70: "STATUS_ARCHIVED",
		90: "STATUS_DELETED",
	}
	Status_value = map[string]int32{
		"STATUS_INVALID":      0,
		"STATUS_PENDING":      1,
		"STATUS_SETUP":        10,
		"STATUS_PROVISIONING": 20,
		"STATUS_ACTIVE":       30,
		"STATUS_SUSPENDED":    50,
		"STATUS_CANCELLED":    60,
		"STATUS_ARCHIVED":     70,
		"STATUS_DELETED":      90,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_enum_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_enum_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_enum_proto_rawDescGZIP(), []int{0}
}

type ActorType int32

const (
	ActorType_ACTOR_TYPE_INVALID           ActorType = 0
	ActorType_ACTOR_TYPE_CONSUMER          ActorType = 1
	ActorType_ACTOR_TYPE_MERCHANT          ActorType = 2
	ActorType_ACTOR_TYPE_CHARGEHIVE        ActorType = 3
	ActorType_ACTOR_TYPE_WALLET            ActorType = 4
	ActorType_ACTOR_TYPE_CONNECTOR         ActorType = 5
	ActorType_ACTOR_TYPE_PAYMENT_PROCESSOR ActorType = 6
	ActorType_ACTOR_TYPE_PAYMENT_NETWORK   ActorType = 7
	ActorType_ACTOR_TYPE_ACQUIRING_BANK    ActorType = 8
	ActorType_ACTOR_TYPE_ISSUING_BANK      ActorType = 9
	ActorType_ACTOR_TYPE_RECOVERY_AGENT    ActorType = 10
	ActorType_ACTOR_TYPE_EXCHANGE          ActorType = 11
	ActorType_ACTOR_TYPE_POLICY            ActorType = 12
)

// Enum value maps for ActorType.
var (
	ActorType_name = map[int32]string{
		0:  "ACTOR_TYPE_INVALID",
		1:  "ACTOR_TYPE_CONSUMER",
		2:  "ACTOR_TYPE_MERCHANT",
		3:  "ACTOR_TYPE_CHARGEHIVE",
		4:  "ACTOR_TYPE_WALLET",
		5:  "ACTOR_TYPE_CONNECTOR",
		6:  "ACTOR_TYPE_PAYMENT_PROCESSOR",
		7:  "ACTOR_TYPE_PAYMENT_NETWORK",
		8:  "ACTOR_TYPE_ACQUIRING_BANK",
		9:  "ACTOR_TYPE_ISSUING_BANK",
		10: "ACTOR_TYPE_RECOVERY_AGENT",
		11: "ACTOR_TYPE_EXCHANGE",
		12: "ACTOR_TYPE_POLICY",
	}
	ActorType_value = map[string]int32{
		"ACTOR_TYPE_INVALID":           0,
		"ACTOR_TYPE_CONSUMER":          1,
		"ACTOR_TYPE_MERCHANT":          2,
		"ACTOR_TYPE_CHARGEHIVE":        3,
		"ACTOR_TYPE_WALLET":            4,
		"ACTOR_TYPE_CONNECTOR":         5,
		"ACTOR_TYPE_PAYMENT_PROCESSOR": 6,
		"ACTOR_TYPE_PAYMENT_NETWORK":   7,
		"ACTOR_TYPE_ACQUIRING_BANK":    8,
		"ACTOR_TYPE_ISSUING_BANK":      9,
		"ACTOR_TYPE_RECOVERY_AGENT":    10,
		"ACTOR_TYPE_EXCHANGE":          11,
		"ACTOR_TYPE_POLICY":            12,
	}
)

func (x ActorType) Enum() *ActorType {
	p := new(ActorType)
	*p = x
	return p
}

func (x ActorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActorType) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_enum_proto_enumTypes[1].Descriptor()
}

func (ActorType) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_enum_proto_enumTypes[1]
}

func (x ActorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActorType.Descriptor instead.
func (ActorType) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_enum_proto_rawDescGZIP(), []int{1}
}

type HandlerType int32

const (
	HandlerType_HANDLER_TYPE_INVALID     HandlerType = 0
	HandlerType_HANDLER_TYPE_WEB         HandlerType = 1
	HandlerType_HANDLER_TYPE_CLI         HandlerType = 2
	HandlerType_HANDLER_TYPE_API         HandlerType = 3
	HandlerType_HANDLER_TYPE_MOBILE      HandlerType = 4
	HandlerType_HANDLER_TYPE_PASSTHROUGH HandlerType = 5
)

// Enum value maps for HandlerType.
var (
	HandlerType_name = map[int32]string{
		0: "HANDLER_TYPE_INVALID",
		1: "HANDLER_TYPE_WEB",
		2: "HANDLER_TYPE_CLI",
		3: "HANDLER_TYPE_API",
		4: "HANDLER_TYPE_MOBILE",
		5: "HANDLER_TYPE_PASSTHROUGH",
	}
	HandlerType_value = map[string]int32{
		"HANDLER_TYPE_INVALID":     0,
		"HANDLER_TYPE_WEB":         1,
		"HANDLER_TYPE_CLI":         2,
		"HANDLER_TYPE_API":         3,
		"HANDLER_TYPE_MOBILE":      4,
		"HANDLER_TYPE_PASSTHROUGH": 5,
	}
)

func (x HandlerType) Enum() *HandlerType {
	p := new(HandlerType)
	*p = x
	return p
}

func (x HandlerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HandlerType) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_enum_proto_enumTypes[2].Descriptor()
}

func (HandlerType) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_enum_proto_enumTypes[2]
}

func (x HandlerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HandlerType.Descriptor instead.
func (HandlerType) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_enum_proto_rawDescGZIP(), []int{2}
}

type TransactionType int32

const (
	TransactionType_TRANSACTION_TYPE_INVALID   TransactionType = 0
	TransactionType_TRANSACTION_TYPE_AUTHORIZE TransactionType = 1
	TransactionType_TRANSACTION_TYPE_CAPTURE   TransactionType = 2
	TransactionType_TRANSACTION_TYPE_REFUND    TransactionType = 3
	TransactionType_TRANSACTION_TYPE_CANCEL    TransactionType = 4
	TransactionType_TRANSACTION_TYPE_DISPUTE   TransactionType = 5
	TransactionType_TRANSACTION_TYPE_VERIFY    TransactionType = 6
	TransactionType_TRANSACTION_TYPE_EXPIRED   TransactionType = 7
	TransactionType_TRANSACTION_TYPE_INTERNAL  TransactionType = 99
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0:  "TRANSACTION_TYPE_INVALID",
		1:  "TRANSACTION_TYPE_AUTHORIZE",
		2:  "TRANSACTION_TYPE_CAPTURE",
		3:  "TRANSACTION_TYPE_REFUND",
		4:  "TRANSACTION_TYPE_CANCEL",
		5:  "TRANSACTION_TYPE_DISPUTE",
		6:  "TRANSACTION_TYPE_VERIFY",
		7:  "TRANSACTION_TYPE_EXPIRED",
		99: "TRANSACTION_TYPE_INTERNAL",
	}
	TransactionType_value = map[string]int32{
		"TRANSACTION_TYPE_INVALID":   0,
		"TRANSACTION_TYPE_AUTHORIZE": 1,
		"TRANSACTION_TYPE_CAPTURE":   2,
		"TRANSACTION_TYPE_REFUND":    3,
		"TRANSACTION_TYPE_CANCEL":    4,
		"TRANSACTION_TYPE_DISPUTE":   5,
		"TRANSACTION_TYPE_VERIFY":    6,
		"TRANSACTION_TYPE_EXPIRED":   7,
		"TRANSACTION_TYPE_INTERNAL":  99,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_enum_proto_enumTypes[3].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_enum_proto_enumTypes[3]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_enum_proto_rawDescGZIP(), []int{3}
}

type TransactionSubType int32

const (
	TransactionSubType_TRANSACTION_SUB_TYPE_INVALID      TransactionSubType = 0
	TransactionSubType_TRANSACTION_SUB_TYPE_IDENTIFY     TransactionSubType = 1
	TransactionSubType_TRANSACTION_SUB_TYPE_CHALLENGE    TransactionSubType = 2
	TransactionSubType_TRANSACTION_SUB_TYPE_CAPTURE_AUTH TransactionSubType = 3
	TransactionSubType_TRANSACTION_SUB_TYPE_NONE         TransactionSubType = 4
)

// Enum value maps for TransactionSubType.
var (
	TransactionSubType_name = map[int32]string{
		0: "TRANSACTION_SUB_TYPE_INVALID",
		1: "TRANSACTION_SUB_TYPE_IDENTIFY",
		2: "TRANSACTION_SUB_TYPE_CHALLENGE",
		3: "TRANSACTION_SUB_TYPE_CAPTURE_AUTH",
		4: "TRANSACTION_SUB_TYPE_NONE",
	}
	TransactionSubType_value = map[string]int32{
		"TRANSACTION_SUB_TYPE_INVALID":      0,
		"TRANSACTION_SUB_TYPE_IDENTIFY":     1,
		"TRANSACTION_SUB_TYPE_CHALLENGE":    2,
		"TRANSACTION_SUB_TYPE_CAPTURE_AUTH": 3,
		"TRANSACTION_SUB_TYPE_NONE":         4,
	}
)

func (x TransactionSubType) Enum() *TransactionSubType {
	p := new(TransactionSubType)
	*p = x
	return p
}

func (x TransactionSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_enum_proto_enumTypes[4].Descriptor()
}

func (TransactionSubType) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_enum_proto_enumTypes[4]
}

func (x TransactionSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionSubType.Descriptor instead.
func (TransactionSubType) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_enum_proto_rawDescGZIP(), []int{4}
}

type PaymentMethodType int32

const (
	PaymentMethodType_PAYMENT_METHOD_TYPE_INVALID        PaymentMethodType = 0
	PaymentMethodType_PAYMENT_METHOD_TYPE_CARD           PaymentMethodType = 1
	PaymentMethodType_PAYMENT_METHOD_TYPE_DIGITALWALLET  PaymentMethodType = 2
	PaymentMethodType_PAYMENT_METHOD_TYPE_DIRECTDEBIT    PaymentMethodType = 3
	PaymentMethodType_PAYMENT_METHOD_TYPE_CRYPTOCURRENCY PaymentMethodType = 4
)

// Enum value maps for PaymentMethodType.
var (
	PaymentMethodType_name = map[int32]string{
		0: "PAYMENT_METHOD_TYPE_INVALID",
		1: "PAYMENT_METHOD_TYPE_CARD",
		2: "PAYMENT_METHOD_TYPE_DIGITALWALLET",
		3: "PAYMENT_METHOD_TYPE_DIRECTDEBIT",
		4: "PAYMENT_METHOD_TYPE_CRYPTOCURRENCY",
	}
	PaymentMethodType_value = map[string]int32{
		"PAYMENT_METHOD_TYPE_INVALID":        0,
		"PAYMENT_METHOD_TYPE_CARD":           1,
		"PAYMENT_METHOD_TYPE_DIGITALWALLET":  2,
		"PAYMENT_METHOD_TYPE_DIRECTDEBIT":    3,
		"PAYMENT_METHOD_TYPE_CRYPTOCURRENCY": 4,
	}
)

func (x PaymentMethodType) Enum() *PaymentMethodType {
	p := new(PaymentMethodType)
	*p = x
	return p
}

func (x PaymentMethodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentMethodType) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_enum_proto_enumTypes[5].Descriptor()
}

func (PaymentMethodType) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_enum_proto_enumTypes[5]
}

func (x PaymentMethodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentMethodType.Descriptor instead.
func (PaymentMethodType) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_enum_proto_rawDescGZIP(), []int{5}
}

type PaymentMethodProvider int32

const (
	PaymentMethodProvider_PAYMENT_METHOD_PROVIDER_INVALID       PaymentMethodProvider = 0
	PaymentMethodProvider_PAYMENT_METHOD_PROVIDER_FORM          PaymentMethodProvider = 1
	PaymentMethodProvider_PAYMENT_METHOD_PROVIDER_PAYPAL        PaymentMethodProvider = 2
	PaymentMethodProvider_PAYMENT_METHOD_PROVIDER_APPLEPAY      PaymentMethodProvider = 3
	PaymentMethodProvider_PAYMENT_METHOD_PROVIDER_GOOGLEPAY     PaymentMethodProvider = 4
	PaymentMethodProvider_PAYMENT_METHOD_PROVIDER_AMAZONPAY     PaymentMethodProvider = 5
	PaymentMethodProvider_PAYMENT_METHOD_PROVIDER_METHOD_UPDATE PaymentMethodProvider = 10
)

// Enum value maps for PaymentMethodProvider.
var (
	PaymentMethodProvider_name = map[int32]string{
		0:  "PAYMENT_METHOD_PROVIDER_INVALID",
		1:  "PAYMENT_METHOD_PROVIDER_FORM",
		2:  "PAYMENT_METHOD_PROVIDER_PAYPAL",
		3:  "PAYMENT_METHOD_PROVIDER_APPLEPAY",
		4:  "PAYMENT_METHOD_PROVIDER_GOOGLEPAY",
		5:  "PAYMENT_METHOD_PROVIDER_AMAZONPAY",
		10: "PAYMENT_METHOD_PROVIDER_METHOD_UPDATE",
	}
	PaymentMethodProvider_value = map[string]int32{
		"PAYMENT_METHOD_PROVIDER_INVALID":       0,
		"PAYMENT_METHOD_PROVIDER_FORM":          1,
		"PAYMENT_METHOD_PROVIDER_PAYPAL":        2,
		"PAYMENT_METHOD_PROVIDER_APPLEPAY":      3,
		"PAYMENT_METHOD_PROVIDER_GOOGLEPAY":     4,
		"PAYMENT_METHOD_PROVIDER_AMAZONPAY":     5,
		"PAYMENT_METHOD_PROVIDER_METHOD_UPDATE": 10,
	}
)

func (x PaymentMethodProvider) Enum() *PaymentMethodProvider {
	p := new(PaymentMethodProvider)
	*p = x
	return p
}

func (x PaymentMethodProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentMethodProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_enum_proto_enumTypes[6].Descriptor()
}

func (PaymentMethodProvider) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_enum_proto_enumTypes[6]
}

func (x PaymentMethodProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentMethodProvider.Descriptor instead.
func (PaymentMethodProvider) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_enum_proto_rawDescGZIP(), []int{6}
}

type PaymentMethodInputType int32

const (
	PaymentMethodInputType_INPUT_TYPE_INVALID  PaymentMethodInputType = 0
	PaymentMethodInputType_INPUT_TYPE_PHYSICAL PaymentMethodInputType = 1
	PaymentMethodInputType_INPUT_TYPE_VIRTUAL  PaymentMethodInputType = 2
	PaymentMethodInputType_INPUT_TYPE_PROXY    PaymentMethodInputType = 3
)

// Enum value maps for PaymentMethodInputType.
var (
	PaymentMethodInputType_name = map[int32]string{
		0: "INPUT_TYPE_INVALID",
		1: "INPUT_TYPE_PHYSICAL",
		2: "INPUT_TYPE_VIRTUAL",
		3: "INPUT_TYPE_PROXY",
	}
	PaymentMethodInputType_value = map[string]int32{
		"INPUT_TYPE_INVALID":  0,
		"INPUT_TYPE_PHYSICAL": 1,
		"INPUT_TYPE_VIRTUAL":  2,
		"INPUT_TYPE_PROXY":    3,
	}
)

func (x PaymentMethodInputType) Enum() *PaymentMethodInputType {
	p := new(PaymentMethodInputType)
	*p = x
	return p
}

func (x PaymentMethodInputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentMethodInputType) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_enum_proto_enumTypes[7].Descriptor()
}

func (PaymentMethodInputType) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_enum_proto_enumTypes[7]
}

func (x PaymentMethodInputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentMethodInputType.Descriptor instead.
func (PaymentMethodInputType) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_enum_proto_rawDescGZIP(), []int{7}
}

type ContractType int32

const (
	ContractType_CONTRACT_TYPE_INVALID              ContractType = 0
	ContractType_CONTRACT_TYPE_NONE                 ContractType = 1
	ContractType_CONTRACT_TYPE_PAYMENT              ContractType = 2
	ContractType_CONTRACT_TYPE_SUBSCRIPTION_INITIAL ContractType = 3
	ContractType_CONTRACT_TYPE_SUBSCRIPTION_RENEWAL ContractType = 4
	ContractType_CONTRACT_TYPE_ONECLICK             ContractType = 5
)

// Enum value maps for ContractType.
var (
	ContractType_name = map[int32]string{
		0: "CONTRACT_TYPE_INVALID",
		1: "CONTRACT_TYPE_NONE",
		2: "CONTRACT_TYPE_PAYMENT",
		3: "CONTRACT_TYPE_SUBSCRIPTION_INITIAL",
		4: "CONTRACT_TYPE_SUBSCRIPTION_RENEWAL",
		5: "CONTRACT_TYPE_ONECLICK",
	}
	ContractType_value = map[string]int32{
		"CONTRACT_TYPE_INVALID":              0,
		"CONTRACT_TYPE_NONE":                 1,
		"CONTRACT_TYPE_PAYMENT":              2,
		"CONTRACT_TYPE_SUBSCRIPTION_INITIAL": 3,
		"CONTRACT_TYPE_SUBSCRIPTION_RENEWAL": 4,
		"CONTRACT_TYPE_ONECLICK":             5,
	}
)

func (x ContractType) Enum() *ContractType {
	p := new(ContractType)
	*p = x
	return p
}

func (x ContractType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractType) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_enum_proto_enumTypes[8].Descriptor()
}

func (ContractType) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_enum_proto_enumTypes[8]
}

func (x ContractType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractType.Descriptor instead.
func (ContractType) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_enum_proto_rawDescGZIP(), []int{8}
}

type Environment int32

const (
	Environment_ENVIRONMENT_INVALID  Environment = 0
	Environment_ENVIRONMENT_BLACKBOX Environment = 1 //Processed in code
	Environment_ENVIRONMENT_TEST     Environment = 2 //Processed against a test environment
	Environment_ENVIRONMENT_LIVE     Environment = 3 //Processed in a live environment
	Environment_ENVIRONMENT_MOCK     Environment = 4 //Mocked environment
)

// Enum value maps for Environment.
var (
	Environment_name = map[int32]string{
		0: "ENVIRONMENT_INVALID",
		1: "ENVIRONMENT_BLACKBOX",
		2: "ENVIRONMENT_TEST",
		3: "ENVIRONMENT_LIVE",
		4: "ENVIRONMENT_MOCK",
	}
	Environment_value = map[string]int32{
		"ENVIRONMENT_INVALID":  0,
		"ENVIRONMENT_BLACKBOX": 1,
		"ENVIRONMENT_TEST":     2,
		"ENVIRONMENT_LIVE":     3,
		"ENVIRONMENT_MOCK":     4,
	}
)

func (x Environment) Enum() *Environment {
	p := new(Environment)
	*p = x
	return p
}

func (x Environment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Environment) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_enum_proto_enumTypes[9].Descriptor()
}

func (Environment) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_enum_proto_enumTypes[9]
}

func (x Environment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Environment.Descriptor instead.
func (Environment) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_enum_proto_rawDescGZIP(), []int{9}
}

type ProductType int32

const (
	ProductType_PRODUCT_TYPE_INVALID      ProductType = 0
	ProductType_PRODUCT_TYPE_PRODUCT      ProductType = 1
	ProductType_PRODUCT_TYPE_SERVICE      ProductType = 2
	ProductType_PRODUCT_TYPE_SUBSCRIPTION ProductType = 3
)

// Enum value maps for ProductType.
var (
	ProductType_name = map[int32]string{
		0: "PRODUCT_TYPE_INVALID",
		1: "PRODUCT_TYPE_PRODUCT",
		2: "PRODUCT_TYPE_SERVICE",
		3: "PRODUCT_TYPE_SUBSCRIPTION",
	}
	ProductType_value = map[string]int32{
		"PRODUCT_TYPE_INVALID":      0,
		"PRODUCT_TYPE_PRODUCT":      1,
		"PRODUCT_TYPE_SERVICE":      2,
		"PRODUCT_TYPE_SUBSCRIPTION": 3,
	}
)

func (x ProductType) Enum() *ProductType {
	p := new(ProductType)
	*p = x
	return p
}

func (x ProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_enum_proto_enumTypes[10].Descriptor()
}

func (ProductType) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_enum_proto_enumTypes[10]
}

func (x ProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductType.Descriptor instead.
func (ProductType) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_enum_proto_rawDescGZIP(), []int{10}
}

type SKUType int32

const (
	SKUType_SKU_TYPE_INVALID SKUType = 0
	SKUType_SKU_TYPE_PRIMARY SKUType = 1
	SKUType_SKU_TYPE_ADDON   SKUType = 2
	SKUType_SKU_TYPE_UPSELL  SKUType = 3
)

// Enum value maps for SKUType.
var (
	SKUType_name = map[int32]string{
		0: "SKU_TYPE_INVALID",
		1: "SKU_TYPE_PRIMARY",
		2: "SKU_TYPE_ADDON",
		3: "SKU_TYPE_UPSELL",
	}
	SKUType_value = map[string]int32{
		"SKU_TYPE_INVALID": 0,
		"SKU_TYPE_PRIMARY": 1,
		"SKU_TYPE_ADDON":   2,
		"SKU_TYPE_UPSELL":  3,
	}
)

func (x SKUType) Enum() *SKUType {
	p := new(SKUType)
	*p = x
	return p
}

func (x SKUType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SKUType) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_enum_proto_enumTypes[11].Descriptor()
}

func (SKUType) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_enum_proto_enumTypes[11]
}

func (x SKUType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SKUType.Descriptor instead.
func (SKUType) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_enum_proto_rawDescGZIP(), []int{11}
}

type DeliveryType int32

const (
	DeliveryType_DELIVERY_TYPE_INVALID  DeliveryType = 0
	DeliveryType_DELIVERY_TYPE_NONE     DeliveryType = 1
	DeliveryType_DELIVERY_TYPE_PHYSICAL DeliveryType = 2
	DeliveryType_DELIVERY_TYPE_VIRTUAL  DeliveryType = 3
)

// Enum value maps for DeliveryType.
var (
	DeliveryType_name = map[int32]string{
		0: "DELIVERY_TYPE_INVALID",
		1: "DELIVERY_TYPE_NONE",
		2: "DELIVERY_TYPE_PHYSICAL",
		3: "DELIVERY_TYPE_VIRTUAL",
	}
	DeliveryType_value = map[string]int32{
		"DELIVERY_TYPE_INVALID":  0,
		"DELIVERY_TYPE_NONE":     1,
		"DELIVERY_TYPE_PHYSICAL": 2,
		"DELIVERY_TYPE_VIRTUAL":  3,
	}
)

func (x DeliveryType) Enum() *DeliveryType {
	p := new(DeliveryType)
	*p = x
	return p
}

func (x DeliveryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliveryType) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_enum_proto_enumTypes[12].Descriptor()
}

func (DeliveryType) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_enum_proto_enumTypes[12]
}

func (x DeliveryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeliveryType.Descriptor instead.
func (DeliveryType) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_enum_proto_rawDescGZIP(), []int{12}
}

type DeliveryStandard int32

const (
	DeliveryStandard_DELIVERY_STANDARD_INVALID  DeliveryStandard = 0
	DeliveryStandard_DELIVERY_STANDARD_SAME_DAY DeliveryStandard = 1
	DeliveryStandard_DELIVERY_STANDARD_NEXT_DAY DeliveryStandard = 2
	DeliveryStandard_DELIVERY_STANDARD_TWO_DAY  DeliveryStandard = 3
	DeliveryStandard_DELIVERY_STANDARD_ECONOMY  DeliveryStandard = 4
	DeliveryStandard_DELIVERY_STANDARD_OTHER    DeliveryStandard = 5
	DeliveryStandard_DELIVERY_STANDARD_NONE     DeliveryStandard = 6
)

// Enum value maps for DeliveryStandard.
var (
	DeliveryStandard_name = map[int32]string{
		0: "DELIVERY_STANDARD_INVALID",
		1: "DELIVERY_STANDARD_SAME_DAY",
		2: "DELIVERY_STANDARD_NEXT_DAY",
		3: "DELIVERY_STANDARD_TWO_DAY",
		4: "DELIVERY_STANDARD_ECONOMY",
		5: "DELIVERY_STANDARD_OTHER",
		6: "DELIVERY_STANDARD_NONE",
	}
	DeliveryStandard_value = map[string]int32{
		"DELIVERY_STANDARD_INVALID":  0,
		"DELIVERY_STANDARD_SAME_DAY": 1,
		"DELIVERY_STANDARD_NEXT_DAY": 2,
		"DELIVERY_STANDARD_TWO_DAY":  3,
		"DELIVERY_STANDARD_ECONOMY":  4,
		"DELIVERY_STANDARD_OTHER":    5,
		"DELIVERY_STANDARD_NONE":     6,
	}
)

func (x DeliveryStandard) Enum() *DeliveryStandard {
	p := new(DeliveryStandard)
	*p = x
	return p
}

func (x DeliveryStandard) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliveryStandard) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_enum_proto_enumTypes[13].Descriptor()
}

func (DeliveryStandard) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_enum_proto_enumTypes[13]
}

func (x DeliveryStandard) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeliveryStandard.Descriptor instead.
func (DeliveryStandard) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_enum_proto_rawDescGZIP(), []int{13}
}

type TermType int32

const (
	TermType_TERM_TYPE_INVALID  TermType = 0
	TermType_TERM_TYPE_ONE_TIME TermType = 1
	TermType_TERM_TYPE_MINUTE   TermType = 3
	TermType_TERM_TYPE_DAY      TermType = 4
	TermType_TERM_TYPE_WEEK     TermType = 5
	TermType_TERM_TYPE_MONTH    TermType = 6
	TermType_TERM_TYPE_YEAR     TermType = 7
	TermType_TERM_TYPE_NONE     TermType = 8
)

// Enum value maps for TermType.
var (
	TermType_name = map[int32]string{
		0: "TERM_TYPE_INVALID",
		1: "TERM_TYPE_ONE_TIME",
		3: "TERM_TYPE_MINUTE",
		4: "TERM_TYPE_DAY",
		5: "TERM_TYPE_WEEK",
		6: "TERM_TYPE_MONTH",
		7: "TERM_TYPE_YEAR",
		8: "TERM_TYPE_NONE",
	}
	TermType_value = map[string]int32{
		"TERM_TYPE_INVALID":  0,
		"TERM_TYPE_ONE_TIME": 1,
		"TERM_TYPE_MINUTE":   3,
		"TERM_TYPE_DAY":      4,
		"TERM_TYPE_WEEK":     5,
		"TERM_TYPE_MONTH":    6,
		"TERM_TYPE_YEAR":     7,
		"TERM_TYPE_NONE":     8,
	}
)

func (x TermType) Enum() *TermType {
	p := new(TermType)
	*p = x
	return p
}

func (x TermType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TermType) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_enum_proto_enumTypes[14].Descriptor()
}

func (TermType) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_enum_proto_enumTypes[14]
}

func (x TermType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TermType.Descriptor instead.
func (TermType) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_enum_proto_rawDescGZIP(), []int{14}
}

type FailureType int32

const (
	FailureType_FAILURE_TYPE_INVALID  FailureType = 0
	FailureType_FAILURE_TYPE_NONE     FailureType = 1 //Nothing went wrong
	FailureType_FAILURE_TYPE_SOFT     FailureType = 2 //Should be able to retry and may work
	FailureType_FAILURE_TYPE_HARD     FailureType = 3 //Retry without changing the payload will continue to fail
	FailureType_FAILURE_TYPE_RETRY    FailureType = 4 //Must Retry
	FailureType_FAILURE_TYPE_INTERNAL FailureType = 5 //Server Error
)

// Enum value maps for FailureType.
var (
	FailureType_name = map[int32]string{
		0: "FAILURE_TYPE_INVALID",
		1: "FAILURE_TYPE_NONE",
		2: "FAILURE_TYPE_SOFT",
		3: "FAILURE_TYPE_HARD",
		4: "FAILURE_TYPE_RETRY",
		5: "FAILURE_TYPE_INTERNAL",
	}
	FailureType_value = map[string]int32{
		"FAILURE_TYPE_INVALID":  0,
		"FAILURE_TYPE_NONE":     1,
		"FAILURE_TYPE_SOFT":     2,
		"FAILURE_TYPE_HARD":     3,
		"FAILURE_TYPE_RETRY":    4,
		"FAILURE_TYPE_INTERNAL": 5,
	}
)

func (x FailureType) Enum() *FailureType {
	p := new(FailureType)
	*p = x
	return p
}

func (x FailureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FailureType) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_enum_proto_enumTypes[15].Descriptor()
}

func (FailureType) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_enum_proto_enumTypes[15]
}

func (x FailureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FailureType.Descriptor instead.
func (FailureType) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_enum_proto_rawDescGZIP(), []int{15}
}

type TransactionResult int32

const (
	TransactionResult_TRANSACTION_RESULT_INVALID         TransactionResult = 0
	TransactionResult_TRANSACTION_RESULT_SUCCESS         TransactionResult = 1
	TransactionResult_TRANSACTION_RESULT_DECLINED        TransactionResult = 2
	TransactionResult_TRANSACTION_RESULT_VERIFY          TransactionResult = 3
	TransactionResult_TRANSACTION_RESULT_PENDING         TransactionResult = 5
	TransactionResult_TRANSACTION_RESULT_PENDING_SUCCESS TransactionResult = 6
	TransactionResult_TRANSACTION_RESULT_RETRY           TransactionResult = 7
	TransactionResult_TRANSACTION_RESULT_EXPIRED         TransactionResult = 8
	TransactionResult_TRANSACTION_RESULT_PARTIAL_SUCCESS TransactionResult = 9
	TransactionResult_TRANSACTION_RESULT_FAILURE         TransactionResult = 10
	TransactionResult_TRANSACTION_RESULT_POLLING         TransactionResult = 11
)

// Enum value maps for TransactionResult.
var (
	TransactionResult_name = map[int32]string{
		0:  "TRANSACTION_RESULT_INVALID",
		1:  "TRANSACTION_RESULT_SUCCESS",
		2:  "TRANSACTION_RESULT_DECLINED",
		3:  "TRANSACTION_RESULT_VERIFY",
		5:  "TRANSACTION_RESULT_PENDING",
		6:  "TRANSACTION_RESULT_PENDING_SUCCESS",
		7:  "TRANSACTION_RESULT_RETRY",
		8:  "TRANSACTION_RESULT_EXPIRED",
		9:  "TRANSACTION_RESULT_PARTIAL_SUCCESS",
		10: "TRANSACTION_RESULT_FAILURE",
		11: "TRANSACTION_RESULT_POLLING",
	}
	TransactionResult_value = map[string]int32{
		"TRANSACTION_RESULT_INVALID":         0,
		"TRANSACTION_RESULT_SUCCESS":         1,
		"TRANSACTION_RESULT_DECLINED":        2,
		"TRANSACTION_RESULT_VERIFY":          3,
		"TRANSACTION_RESULT_PENDING":         5,
		"TRANSACTION_RESULT_PENDING_SUCCESS": 6,
		"TRANSACTION_RESULT_RETRY":           7,
		"TRANSACTION_RESULT_EXPIRED":         8,
		"TRANSACTION_RESULT_PARTIAL_SUCCESS": 9,
		"TRANSACTION_RESULT_FAILURE":         10,
		"TRANSACTION_RESULT_POLLING":         11,
	}
)

func (x TransactionResult) Enum() *TransactionResult {
	p := new(TransactionResult)
	*p = x
	return p
}

func (x TransactionResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionResult) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_enum_proto_enumTypes[16].Descriptor()
}

func (TransactionResult) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_enum_proto_enumTypes[16]
}

func (x TransactionResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionResult.Descriptor instead.
func (TransactionResult) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_enum_proto_rawDescGZIP(), []int{16}
}

type VerificationStatus int32

const (
	VerificationStatus_VERIFICATION_STATUS_INVALID     VerificationStatus = 0
	VerificationStatus_VERIFICATION_STATUS_NOT_CHECKED VerificationStatus = 1
	VerificationStatus_VERIFICATION_STATUS_PASSED      VerificationStatus = 2
	VerificationStatus_VERIFICATION_STATUS_FAILED      VerificationStatus = 3
	VerificationStatus_VERIFICATION_STATUS_CONTINUE    VerificationStatus = 4
)

// Enum value maps for VerificationStatus.
var (
	VerificationStatus_name = map[int32]string{
		0: "VERIFICATION_STATUS_INVALID",
		1: "VERIFICATION_STATUS_NOT_CHECKED",
		2: "VERIFICATION_STATUS_PASSED",
		3: "VERIFICATION_STATUS_FAILED",
		4: "VERIFICATION_STATUS_CONTINUE",
	}
	VerificationStatus_value = map[string]int32{
		"VERIFICATION_STATUS_INVALID":     0,
		"VERIFICATION_STATUS_NOT_CHECKED": 1,
		"VERIFICATION_STATUS_PASSED":      2,
		"VERIFICATION_STATUS_FAILED":      3,
		"VERIFICATION_STATUS_CONTINUE":    4,
	}
)

func (x VerificationStatus) Enum() *VerificationStatus {
	p := new(VerificationStatus)
	*p = x
	return p
}

func (x VerificationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerificationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_enum_proto_enumTypes[17].Descriptor()
}

func (VerificationStatus) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_enum_proto_enumTypes[17]
}

func (x VerificationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerificationStatus.Descriptor instead.
func (VerificationStatus) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_enum_proto_rawDescGZIP(), []int{17}
}

type VerifyRequestType int32

const (
	VerifyRequestType_VERIFY_REQUEST_TYPE_INVALID   VerifyRequestType = 0
	VerifyRequestType_VERIFY_REQUEST_TYPE_IDENTIFY  VerifyRequestType = 1 //Frictionless Auth
	VerifyRequestType_VERIFY_REQUEST_TYPE_CHALLENGE VerifyRequestType = 2 //User Prompt Auth
	VerifyRequestType_VERIFY_REQUEST_TYPE_NONE      VerifyRequestType = 3
)

// Enum value maps for VerifyRequestType.
var (
	VerifyRequestType_name = map[int32]string{
		0: "VERIFY_REQUEST_TYPE_INVALID",
		1: "VERIFY_REQUEST_TYPE_IDENTIFY",
		2: "VERIFY_REQUEST_TYPE_CHALLENGE",
		3: "VERIFY_REQUEST_TYPE_NONE",
	}
	VerifyRequestType_value = map[string]int32{
		"VERIFY_REQUEST_TYPE_INVALID":   0,
		"VERIFY_REQUEST_TYPE_IDENTIFY":  1,
		"VERIFY_REQUEST_TYPE_CHALLENGE": 2,
		"VERIFY_REQUEST_TYPE_NONE":      3,
	}
)

func (x VerifyRequestType) Enum() *VerifyRequestType {
	p := new(VerifyRequestType)
	*p = x
	return p
}

func (x VerifyRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerifyRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_enum_proto_enumTypes[18].Descriptor()
}

func (VerifyRequestType) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_enum_proto_enumTypes[18]
}

func (x VerifyRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerifyRequestType.Descriptor instead.
func (VerifyRequestType) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_enum_proto_rawDescGZIP(), []int{18}
}

type Liability int32

const (
	Liability_LIABILITY_INVALID  Liability = 0
	Liability_LIABILITY_UNKNOWN  Liability = 1
	Liability_LIABILITY_MERCHANT Liability = 2
	Liability_LIABILITY_ISSUER   Liability = 3
)

// Enum value maps for Liability.
var (
	Liability_name = map[int32]string{
		0: "LIABILITY_INVALID",
		1: "LIABILITY_UNKNOWN",
		2: "LIABILITY_MERCHANT",
		3: "LIABILITY_ISSUER",
	}
	Liability_value = map[string]int32{
		"LIABILITY_INVALID":  0,
		"LIABILITY_UNKNOWN":  1,
		"LIABILITY_MERCHANT": 2,
		"LIABILITY_ISSUER":   3,
	}
)

func (x Liability) Enum() *Liability {
	p := new(Liability)
	*p = x
	return p
}

func (x Liability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Liability) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_enum_proto_enumTypes[19].Descriptor()
}

func (Liability) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_enum_proto_enumTypes[19]
}

func (x Liability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Liability.Descriptor instead.
func (Liability) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_enum_proto_rawDescGZIP(), []int{19}
}

type PlacementCapability int32

const (
	PlacementCapability_PLACEMENT_CAPABILITY_INVALID          PlacementCapability = 0
	PlacementCapability_PLACEMENT_CAPABILITY_CARD_FORM        PlacementCapability = 1
	PlacementCapability_PLACEMENT_CAPABILITY_APPLE_PAY        PlacementCapability = 2
	PlacementCapability_PLACEMENT_CAPABILITY_GOOGLE_PAY       PlacementCapability = 3
	PlacementCapability_PLACEMENT_CAPABILITY_PAYPAL           PlacementCapability = 4
	PlacementCapability_PLACEMENT_CAPABILITY_TOKEN            PlacementCapability = 5
	PlacementCapability_PLACEMENT_CAPABILITY_DIRECTDEBIT_FORM PlacementCapability = 6
)

// Enum value maps for PlacementCapability.
var (
	PlacementCapability_name = map[int32]string{
		0: "PLACEMENT_CAPABILITY_INVALID",
		1: "PLACEMENT_CAPABILITY_CARD_FORM",
		2: "PLACEMENT_CAPABILITY_APPLE_PAY",
		3: "PLACEMENT_CAPABILITY_GOOGLE_PAY",
		4: "PLACEMENT_CAPABILITY_PAYPAL",
		5: "PLACEMENT_CAPABILITY_TOKEN",
		6: "PLACEMENT_CAPABILITY_DIRECTDEBIT_FORM",
	}
	PlacementCapability_value = map[string]int32{
		"PLACEMENT_CAPABILITY_INVALID":          0,
		"PLACEMENT_CAPABILITY_CARD_FORM":        1,
		"PLACEMENT_CAPABILITY_APPLE_PAY":        2,
		"PLACEMENT_CAPABILITY_GOOGLE_PAY":       3,
		"PLACEMENT_CAPABILITY_PAYPAL":           4,
		"PLACEMENT_CAPABILITY_TOKEN":            5,
		"PLACEMENT_CAPABILITY_DIRECTDEBIT_FORM": 6,
	}
)

func (x PlacementCapability) Enum() *PlacementCapability {
	p := new(PlacementCapability)
	*p = x
	return p
}

func (x PlacementCapability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlacementCapability) Descriptor() protoreflect.EnumDescriptor {
	return file_chargehive_chtype_enum_proto_enumTypes[20].Descriptor()
}

func (PlacementCapability) Type() protoreflect.EnumType {
	return &file_chargehive_chtype_enum_proto_enumTypes[20]
}

func (x PlacementCapability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlacementCapability.Descriptor instead.
func (PlacementCapability) EnumDescriptor() ([]byte, []int) {
	return file_chargehive_chtype_enum_proto_rawDescGZIP(), []int{20}
}

var File_chargehive_chtype_enum_proto protoreflect.FileDescriptor

var file_chargehive_chtype_enum_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70,
	0x65, 0x2a, 0xc3, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x45, 0x54, 0x55, 0x50, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x14, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x53,
	0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x32, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x3c, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45,
	0x44, 0x10, 0x46, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x5a, 0x2a, 0xee, 0x02, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53,
	0x55, 0x4d, 0x45, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x52, 0x47, 0x45, 0x48, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10,
	0x04, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x41,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x1e, 0x0a,
	0x1a, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x07, 0x12, 0x1d, 0x0a,
	0x19, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x51, 0x55,
	0x49, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x49,
	0x4e, 0x47, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x43, 0x54,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x0b, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x0c, 0x2a, 0xa0, 0x01, 0x0a, 0x0b, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x41, 0x4e, 0x44,
	0x4c, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x41, 0x4e, 0x44,
	0x4c, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x50, 0x49, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x1c, 0x0a,
	0x18, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41,
	0x53, 0x53, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x10, 0x05, 0x2a, 0x9f, 0x02, 0x0a, 0x0f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a,
	0x1a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a,
	0x18, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54,
	0x45, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x10, 0x06,
	0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1d,
	0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x63, 0x2a, 0xc3, 0x01,
	0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x59, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x25, 0x0a,
	0x21, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x04, 0x2a, 0xc6, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x02, 0x12,
	0x23, 0x0a, 0x1f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x44, 0x45, 0x42,
	0x49, 0x54, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x59, 0x50,
	0x54, 0x4f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x04, 0x2a, 0xa1, 0x02, 0x0a,
	0x15, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x59, 0x50, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x45, 0x50, 0x41, 0x59, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44,
	0x45, 0x52, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x50, 0x41, 0x59, 0x10, 0x04, 0x12, 0x25,
	0x0a, 0x21, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x4d, 0x41, 0x5a, 0x4f, 0x4e,
	0x50, 0x41, 0x59, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52,
	0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0a,
	0x2a, 0x77, 0x0a, 0x16, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e,
	0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x49,
	0x4e, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x10, 0x03, 0x2a, 0xc8, 0x01, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x03,
	0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x4e, 0x45, 0x57, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x43, 0x4c, 0x49,
	0x43, 0x4b, 0x10, 0x05, 0x2a, 0x82, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x41,
	0x43, 0x4b, 0x42, 0x4f, 0x58, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x56, 0x49, 0x52,
	0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x56,
	0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x43, 0x4b, 0x10, 0x04, 0x2a, 0x7a, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x5e, 0x0a, 0x07, 0x53, 0x4b, 0x55, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x4b, 0x55, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4b, 0x55, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x4b, 0x55, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4b, 0x55, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x53,
	0x45, 0x4c, 0x4c, 0x10, 0x03, 0x2a, 0x78, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x4c, 0x49,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x03, 0x2a,
	0xe8, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x41,
	0x59, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x44, 0x41,
	0x59, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x57, 0x4f, 0x5f, 0x44, 0x41, 0x59,
	0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x10,
	0x04, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x05, 0x12, 0x1a,
	0x0a, 0x16, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44,
	0x41, 0x52, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x06, 0x2a, 0xb3, 0x01, 0x0a, 0x08, 0x54,
	0x65, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x45, 0x52, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x45,
	0x4b, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x45, 0x52, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e,
	0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x08,
	0x2a, 0x9f, 0x01, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x10, 0x03, 0x12,
	0x16, 0x0a, 0x12, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x10, 0x05, 0x2a, 0x81, 0x03, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x44,
	0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x06,
	0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x07, 0x12, 0x1e,
	0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x08, 0x12, 0x26,
	0x0a, 0x22, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x50, 0x4f, 0x4c,
	0x4c, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x2a, 0xbc, 0x01, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x1b, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x23,
	0x0a, 0x1f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49,
	0x4e, 0x55, 0x45, 0x10, 0x04, 0x2a, 0x97, 0x01, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x56,
	0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x59, 0x10, 0x01, 0x12, 0x21,
	0x0a, 0x1d, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x2a,
	0x67, 0x0a, 0x09, 0x4c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x15, 0x0a, 0x11,
	0x4c, 0x49, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x49, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x54,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x49, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x53, 0x53, 0x55, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x90, 0x02, 0x0a, 0x13, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41,
	0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x10, 0x03, 0x12,
	0x1f, 0x0a, 0x1b, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x50,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x41, 0x59, 0x50, 0x41, 0x4c, 0x10, 0x04,
	0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41,
	0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x05,
	0x12, 0x29, 0x0a, 0x25, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41,
	0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x44,
	0x45, 0x42, 0x49, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x06, 0x42, 0x67, 0x5a, 0x34, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x68, 0x69, 0x76, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x74,
	0x79, 0x70, 0x65, 0xca, 0x02, 0x11, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x48, 0x69, 0x76, 0x65,
	0x5c, 0x43, 0x68, 0x74, 0x79, 0x70, 0x65, 0xe2, 0x02, 0x1a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x48, 0x69, 0x76, 0x65, 0x5c, 0x43, 0x68, 0x74, 0x79, 0x70, 0x65, 0x5c, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chargehive_chtype_enum_proto_rawDescOnce sync.Once
	file_chargehive_chtype_enum_proto_rawDescData = file_chargehive_chtype_enum_proto_rawDesc
)

func file_chargehive_chtype_enum_proto_rawDescGZIP() []byte {
	file_chargehive_chtype_enum_proto_rawDescOnce.Do(func() {
		file_chargehive_chtype_enum_proto_rawDescData = protoimpl.X.CompressGZIP(file_chargehive_chtype_enum_proto_rawDescData)
	})
	return file_chargehive_chtype_enum_proto_rawDescData
}

var file_chargehive_chtype_enum_proto_enumTypes = make([]protoimpl.EnumInfo, 21)
var file_chargehive_chtype_enum_proto_goTypes = []interface{}{
	(Status)(0),                 // 0: chargehive.chtype.Status
	(ActorType)(0),              // 1: chargehive.chtype.ActorType
	(HandlerType)(0),            // 2: chargehive.chtype.HandlerType
	(TransactionType)(0),        // 3: chargehive.chtype.TransactionType
	(TransactionSubType)(0),     // 4: chargehive.chtype.TransactionSubType
	(PaymentMethodType)(0),      // 5: chargehive.chtype.PaymentMethodType
	(PaymentMethodProvider)(0),  // 6: chargehive.chtype.PaymentMethodProvider
	(PaymentMethodInputType)(0), // 7: chargehive.chtype.PaymentMethodInputType
	(ContractType)(0),           // 8: chargehive.chtype.ContractType
	(Environment)(0),            // 9: chargehive.chtype.Environment
	(ProductType)(0),            // 10: chargehive.chtype.ProductType
	(SKUType)(0),                // 11: chargehive.chtype.SKUType
	(DeliveryType)(0),           // 12: chargehive.chtype.DeliveryType
	(DeliveryStandard)(0),       // 13: chargehive.chtype.DeliveryStandard
	(TermType)(0),               // 14: chargehive.chtype.TermType
	(FailureType)(0),            // 15: chargehive.chtype.FailureType
	(TransactionResult)(0),      // 16: chargehive.chtype.TransactionResult
	(VerificationStatus)(0),     // 17: chargehive.chtype.VerificationStatus
	(VerifyRequestType)(0),      // 18: chargehive.chtype.VerifyRequestType
	(Liability)(0),              // 19: chargehive.chtype.Liability
	(PlacementCapability)(0),    // 20: chargehive.chtype.PlacementCapability
}
var file_chargehive_chtype_enum_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_chargehive_chtype_enum_proto_init() }
func file_chargehive_chtype_enum_proto_init() {
	if File_chargehive_chtype_enum_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chargehive_chtype_enum_proto_rawDesc,
			NumEnums:      21,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chargehive_chtype_enum_proto_goTypes,
		DependencyIndexes: file_chargehive_chtype_enum_proto_depIdxs,
		EnumInfos:         file_chargehive_chtype_enum_proto_enumTypes,
	}.Build()
	File_chargehive_chtype_enum_proto = out.File
	file_chargehive_chtype_enum_proto_rawDesc = nil
	file_chargehive_chtype_enum_proto_goTypes = nil
	file_chargehive_chtype_enum_proto_depIdxs = nil
}
