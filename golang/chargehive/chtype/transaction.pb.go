// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: chargehive/chtype/transaction.proto

package chtype

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId                   string                 `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	TransactionId             string                 `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Details                   []*TransactionDetail   `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
	PaymentType               PaymentMethodType      `protobuf:"varint,4,opt,name=payment_type,json=paymentType,proto3,enum=chargehive.chtype.PaymentMethodType" json:"payment_type,omitempty"`
	PaymentScheme             string                 `protobuf:"bytes,5,opt,name=payment_scheme,json=paymentScheme,proto3" json:"payment_scheme,omitempty"`
	TransactionType           TransactionType        `protobuf:"varint,6,opt,name=transaction_type,json=transactionType,proto3,enum=chargehive.chtype.TransactionType" json:"transaction_type,omitempty"`
	RequestAmount             *Amount                `protobuf:"bytes,7,opt,name=request_amount,json=requestAmount,proto3" json:"request_amount,omitempty"`          //Amount requested
	TransactedAmount          *Amount                `protobuf:"bytes,8,opt,name=transacted_amount,json=transactedAmount,proto3" json:"transacted_amount,omitempty"` //Amount received
	Contract                  ContractType           `protobuf:"varint,9,opt,name=contract,proto3,enum=chargehive.chtype.ContractType" json:"contract,omitempty"`
	StatementDescriptor       string                 `protobuf:"bytes,10,opt,name=statement_descriptor,json=statementDescriptor,proto3" json:"statement_descriptor,omitempty"`
	Result                    TransactionResult      `protobuf:"varint,11,opt,name=result,proto3,enum=chargehive.chtype.TransactionResult" json:"result,omitempty"`
	VerifyRequest             *VerifyRequestData     `protobuf:"bytes,12,opt,name=verify_request,json=verifyRequest,proto3" json:"verify_request,omitempty"`
	FailureType               FailureType            `protobuf:"varint,13,opt,name=failure_type,json=failureType,proto3,enum=chargehive.chtype.FailureType" json:"failure_type,omitempty"`
	Arn                       string                 `protobuf:"bytes,14,opt,name=arn,proto3" json:"arn,omitempty"`
	Verified                  VerificationStatus     `protobuf:"varint,15,opt,name=verified,proto3,enum=chargehive.chtype.VerificationStatus" json:"verified,omitempty"` //Additional Verification provided and passed
	Liability                 Liability              `protobuf:"varint,16,opt,name=liability,proto3,enum=chargehive.chtype.Liability" json:"liability,omitempty"`
	AttemptDetail             *AttemptDetail         `protobuf:"bytes,17,opt,name=attempt_detail,json=attemptDetail,proto3" json:"attempt_detail,omitempty"`
	FraudResults              []*FraudResult         `protobuf:"bytes,18,rep,name=fraud_results,json=fraudResults,proto3" json:"fraud_results,omitempty"`
	Response                  *ResponseDetail        `protobuf:"bytes,19,opt,name=response,proto3" json:"response,omitempty"`
	SourceTransactionId       string                 `protobuf:"bytes,20,opt,name=source_transaction_id,json=sourceTransactionId,proto3" json:"source_transaction_id,omitempty"` //Auth Trans ID for captureAuth, Capture Trans ID for Refund
	PaymentMethodId           string                 `protobuf:"bytes,21,opt,name=payment_method_id,json=paymentMethodId,proto3" json:"payment_method_id,omitempty"`             // Potential duplicate of token_id (1)
	TransactionSubType        TransactionSubType     `protobuf:"varint,22,opt,name=transaction_sub_type,json=transactionSubType,proto3,enum=chargehive.chtype.TransactionSubType" json:"transaction_sub_type,omitempty"`
	AncillaryTransactions     []*Transaction         `protobuf:"bytes,23,rep,name=ancillary_transactions,json=ancillaryTransactions,proto3" json:"ancillary_transactions,omitempty"`
	RequestedConnectorId      string                 `protobuf:"bytes,24,opt,name=requested_connector_id,json=requestedConnectorId,proto3" json:"requested_connector_id,omitempty"`
	RequestedConnectorLibrary string                 `protobuf:"bytes,25,opt,name=requested_connector_library,json=requestedConnectorLibrary,proto3" json:"requested_connector_library,omitempty"`
	TransactionTime           *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=transaction_time,json=transactionTime,proto3" json:"transaction_time,omitempty"`
	PaymentProvider           PaymentMethodProvider  `protobuf:"varint,27,opt,name=payment_provider,json=paymentProvider,proto3,enum=chargehive.chtype.PaymentMethodProvider" json:"payment_provider,omitempty"`
	PaymentInputType          PaymentMethodInputType `protobuf:"varint,28,opt,name=payment_input_type,json=paymentInputType,proto3,enum=chargehive.chtype.PaymentMethodInputType" json:"payment_input_type,omitempty"`
	AuthCode                  string                 `protobuf:"bytes,29,opt,name=auth_code,json=authCode,proto3" json:"auth_code,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chargehive_chtype_transaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_transaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *Transaction) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *Transaction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *Transaction) GetDetails() []*TransactionDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *Transaction) GetPaymentType() PaymentMethodType {
	if x != nil {
		return x.PaymentType
	}
	return PaymentMethodType_PAYMENT_METHOD_TYPE_INVALID
}

func (x *Transaction) GetPaymentScheme() string {
	if x != nil {
		return x.PaymentScheme
	}
	return ""
}

func (x *Transaction) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_TRANSACTION_TYPE_INVALID
}

func (x *Transaction) GetRequestAmount() *Amount {
	if x != nil {
		return x.RequestAmount
	}
	return nil
}

func (x *Transaction) GetTransactedAmount() *Amount {
	if x != nil {
		return x.TransactedAmount
	}
	return nil
}

func (x *Transaction) GetContract() ContractType {
	if x != nil {
		return x.Contract
	}
	return ContractType_CONTRACT_TYPE_INVALID
}

func (x *Transaction) GetStatementDescriptor() string {
	if x != nil {
		return x.StatementDescriptor
	}
	return ""
}

func (x *Transaction) GetResult() TransactionResult {
	if x != nil {
		return x.Result
	}
	return TransactionResult_TRANSACTION_RESULT_INVALID
}

func (x *Transaction) GetVerifyRequest() *VerifyRequestData {
	if x != nil {
		return x.VerifyRequest
	}
	return nil
}

func (x *Transaction) GetFailureType() FailureType {
	if x != nil {
		return x.FailureType
	}
	return FailureType_FAILURE_TYPE_INVALID
}

func (x *Transaction) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *Transaction) GetVerified() VerificationStatus {
	if x != nil {
		return x.Verified
	}
	return VerificationStatus_VERIFICATION_STATUS_INVALID
}

func (x *Transaction) GetLiability() Liability {
	if x != nil {
		return x.Liability
	}
	return Liability_LIABILITY_INVALID
}

func (x *Transaction) GetAttemptDetail() *AttemptDetail {
	if x != nil {
		return x.AttemptDetail
	}
	return nil
}

func (x *Transaction) GetFraudResults() []*FraudResult {
	if x != nil {
		return x.FraudResults
	}
	return nil
}

func (x *Transaction) GetResponse() *ResponseDetail {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Transaction) GetSourceTransactionId() string {
	if x != nil {
		return x.SourceTransactionId
	}
	return ""
}

func (x *Transaction) GetPaymentMethodId() string {
	if x != nil {
		return x.PaymentMethodId
	}
	return ""
}

func (x *Transaction) GetTransactionSubType() TransactionSubType {
	if x != nil {
		return x.TransactionSubType
	}
	return TransactionSubType_TRANSACTION_SUB_TYPE_INVALID
}

func (x *Transaction) GetAncillaryTransactions() []*Transaction {
	if x != nil {
		return x.AncillaryTransactions
	}
	return nil
}

func (x *Transaction) GetRequestedConnectorId() string {
	if x != nil {
		return x.RequestedConnectorId
	}
	return ""
}

func (x *Transaction) GetRequestedConnectorLibrary() string {
	if x != nil {
		return x.RequestedConnectorLibrary
	}
	return ""
}

func (x *Transaction) GetTransactionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionTime
	}
	return nil
}

func (x *Transaction) GetPaymentProvider() PaymentMethodProvider {
	if x != nil {
		return x.PaymentProvider
	}
	return PaymentMethodProvider_PAYMENT_METHOD_PROVIDER_INVALID
}

func (x *Transaction) GetPaymentInputType() PaymentMethodInputType {
	if x != nil {
		return x.PaymentInputType
	}
	return PaymentMethodInputType_INPUT_TYPE_INVALID
}

func (x *Transaction) GetAuthCode() string {
	if x != nil {
		return x.AuthCode
	}
	return ""
}

type TransactionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorId            string                 `protobuf:"bytes,1,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	ActorVersion       string                 `protobuf:"bytes,2,opt,name=actor_version,json=actorVersion,proto3" json:"actor_version,omitempty"`
	ActorType          ActorType              `protobuf:"varint,3,opt,name=actor_type,json=actorType,proto3,enum=chargehive.chtype.ActorType" json:"actor_type,omitempty"`
	TransactionId      string                 `protobuf:"bytes,4,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	RequestedAmount    *Amount                `protobuf:"bytes,5,opt,name=requested_amount,json=requestedAmount,proto3" json:"requested_amount,omitempty"` //Amount sent in the request
	ProcessedAmount    *Amount                `protobuf:"bytes,6,opt,name=processed_amount,json=processedAmount,proto3" json:"processed_amount,omitempty"` //Amount received in the result
	FeeEstimate        *Amount                `protobuf:"bytes,7,opt,name=fee_estimate,json=feeEstimate,proto3" json:"fee_estimate,omitempty"`             //Amount charged for the transaction
	FeeActual          *Amount                `protobuf:"bytes,8,opt,name=fee_actual,json=feeActual,proto3" json:"fee_actual,omitempty"`                   //Amount charged for the transaction
	StartTime          *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                   //Request Send Time
	EndTime            *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                        //Response Receive Time
	WasSuccessful      bool                   `protobuf:"varint,11,opt,name=was_successful,json=wasSuccessful,proto3" json:"was_successful,omitempty"`
	Environment        Environment            `protobuf:"varint,13,opt,name=environment,proto3,enum=chargehive.chtype.Environment" json:"environment,omitempty"`
	Response           *ResponseDetail        `protobuf:"bytes,14,opt,name=response,proto3" json:"response,omitempty"`
	VerificationResult *VerificationResult    `protobuf:"bytes,15,opt,name=verification_result,json=verificationResult,proto3" json:"verification_result,omitempty"`
	AdditionalData     map[string]string      `protobuf:"bytes,16,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AuthorizationCode  string                 `protobuf:"bytes,17,opt,name=authorization_code,json=authorizationCode,proto3" json:"authorization_code,omitempty"`
	Liability          Liability              `protobuf:"varint,18,opt,name=liability,proto3,enum=chargehive.chtype.Liability" json:"liability,omitempty"`
	ConnectorLibrary   string                 `protobuf:"bytes,19,opt,name=connector_library,json=connectorLibrary,proto3" json:"connector_library,omitempty"`
	ConnectorId        string                 `protobuf:"bytes,20,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`
	Primary            bool                   `protobuf:"varint,21,opt,name=primary,proto3" json:"primary,omitempty"`
	NetworkId          string                 `protobuf:"bytes,22,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`                        // Network ID returned by the PSP
	PspTransactionId   string                 `protobuf:"bytes,23,opt,name=psp_transaction_id,json=pspTransactionId,proto3" json:"psp_transaction_id,omitempty"` // Transaction ID returned by the PSP to replace transaction_id which is ambiguous
}

func (x *TransactionDetail) Reset() {
	*x = TransactionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chargehive_chtype_transaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionDetail) ProtoMessage() {}

func (x *TransactionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_transaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionDetail.ProtoReflect.Descriptor instead.
func (*TransactionDetail) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *TransactionDetail) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *TransactionDetail) GetActorVersion() string {
	if x != nil {
		return x.ActorVersion
	}
	return ""
}

func (x *TransactionDetail) GetActorType() ActorType {
	if x != nil {
		return x.ActorType
	}
	return ActorType_ACTOR_TYPE_INVALID
}

func (x *TransactionDetail) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *TransactionDetail) GetRequestedAmount() *Amount {
	if x != nil {
		return x.RequestedAmount
	}
	return nil
}

func (x *TransactionDetail) GetProcessedAmount() *Amount {
	if x != nil {
		return x.ProcessedAmount
	}
	return nil
}

func (x *TransactionDetail) GetFeeEstimate() *Amount {
	if x != nil {
		return x.FeeEstimate
	}
	return nil
}

func (x *TransactionDetail) GetFeeActual() *Amount {
	if x != nil {
		return x.FeeActual
	}
	return nil
}

func (x *TransactionDetail) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TransactionDetail) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TransactionDetail) GetWasSuccessful() bool {
	if x != nil {
		return x.WasSuccessful
	}
	return false
}

func (x *TransactionDetail) GetEnvironment() Environment {
	if x != nil {
		return x.Environment
	}
	return Environment_ENVIRONMENT_INVALID
}

func (x *TransactionDetail) GetResponse() *ResponseDetail {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *TransactionDetail) GetVerificationResult() *VerificationResult {
	if x != nil {
		return x.VerificationResult
	}
	return nil
}

func (x *TransactionDetail) GetAdditionalData() map[string]string {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

func (x *TransactionDetail) GetAuthorizationCode() string {
	if x != nil {
		return x.AuthorizationCode
	}
	return ""
}

func (x *TransactionDetail) GetLiability() Liability {
	if x != nil {
		return x.Liability
	}
	return Liability_LIABILITY_INVALID
}

func (x *TransactionDetail) GetConnectorLibrary() string {
	if x != nil {
		return x.ConnectorLibrary
	}
	return ""
}

func (x *TransactionDetail) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

func (x *TransactionDetail) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *TransactionDetail) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *TransactionDetail) GetPspTransactionId() string {
	if x != nil {
		return x.PspTransactionId
	}
	return ""
}

type VerifyRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             VerifyRequestType `protobuf:"varint,1,opt,name=type,proto3,enum=chargehive.chtype.VerifyRequestType" json:"type,omitempty"`
	Data             map[string]string `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ConnectorLibrary string            `protobuf:"bytes,3,opt,name=connector_library,json=connectorLibrary,proto3" json:"connector_library,omitempty"`
	Environment      Environment       `protobuf:"varint,4,opt,name=environment,proto3,enum=chargehive.chtype.Environment" json:"environment,omitempty"`
	Required         bool              `protobuf:"varint,5,opt,name=required,proto3" json:"required,omitempty"`
	MethodData       map[string]string `protobuf:"bytes,6,rep,name=methodData,proto3" json:"methodData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VerifyRequestData) Reset() {
	*x = VerifyRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chargehive_chtype_transaction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyRequestData) ProtoMessage() {}

func (x *VerifyRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_transaction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyRequestData.ProtoReflect.Descriptor instead.
func (*VerifyRequestData) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *VerifyRequestData) GetType() VerifyRequestType {
	if x != nil {
		return x.Type
	}
	return VerifyRequestType_VERIFY_REQUEST_TYPE_INVALID
}

func (x *VerifyRequestData) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *VerifyRequestData) GetConnectorLibrary() string {
	if x != nil {
		return x.ConnectorLibrary
	}
	return ""
}

func (x *VerifyRequestData) GetEnvironment() Environment {
	if x != nil {
		return x.Environment
	}
	return Environment_ENVIRONMENT_INVALID
}

func (x *VerifyRequestData) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *VerifyRequestData) GetMethodData() map[string]string {
	if x != nil {
		return x.MethodData
	}
	return nil
}

type ThreeDSResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eci                 string                 `protobuf:"bytes,1,opt,name=eci,proto3" json:"eci,omitempty"`
	Cavv                string                 `protobuf:"bytes,2,opt,name=cavv,proto3" json:"cavv,omitempty"`
	Xid                 string                 `protobuf:"bytes,3,opt,name=xid,proto3" json:"xid,omitempty"`
	Enrollment          string                 `protobuf:"bytes,4,opt,name=enrollment,proto3" json:"enrollment,omitempty"`
	Result              string                 `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	SignatureStatus     string                 `protobuf:"bytes,6,opt,name=signature_status,json=signatureStatus,proto3" json:"signature_status,omitempty"`
	ServerTransactionId string                 `protobuf:"bytes,7,opt,name=server_transaction_id,json=serverTransactionId,proto3" json:"server_transaction_id,omitempty"`
	Status              string                 `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	MajorVersion        int32                  `protobuf:"varint,9,opt,name=major_version,json=majorVersion,proto3" json:"major_version,omitempty"`
	Version             string                 `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
	PaReq               string                 `protobuf:"bytes,11,opt,name=pa_req,json=paReq,proto3" json:"pa_req,omitempty"`
	AcsUrl              string                 `protobuf:"bytes,12,opt,name=acs_url,json=acsUrl,proto3" json:"acs_url,omitempty"`
	PaRes               string                 `protobuf:"bytes,13,opt,name=pa_res,json=paRes,proto3" json:"pa_res,omitempty"`
	Id                  string                 `protobuf:"bytes,14,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp           *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Liability           Liability              `protobuf:"varint,16,opt,name=liability,proto3,enum=chargehive.chtype.Liability" json:"liability,omitempty"`
	SdkResponse         string                 `protobuf:"bytes,17,opt,name=sdk_response,json=sdkResponse,proto3" json:"sdk_response,omitempty"`
}

func (x *ThreeDSResult) Reset() {
	*x = ThreeDSResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chargehive_chtype_transaction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreeDSResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreeDSResult) ProtoMessage() {}

func (x *ThreeDSResult) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_transaction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreeDSResult.ProtoReflect.Descriptor instead.
func (*ThreeDSResult) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_transaction_proto_rawDescGZIP(), []int{3}
}

func (x *ThreeDSResult) GetEci() string {
	if x != nil {
		return x.Eci
	}
	return ""
}

func (x *ThreeDSResult) GetCavv() string {
	if x != nil {
		return x.Cavv
	}
	return ""
}

func (x *ThreeDSResult) GetXid() string {
	if x != nil {
		return x.Xid
	}
	return ""
}

func (x *ThreeDSResult) GetEnrollment() string {
	if x != nil {
		return x.Enrollment
	}
	return ""
}

func (x *ThreeDSResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *ThreeDSResult) GetSignatureStatus() string {
	if x != nil {
		return x.SignatureStatus
	}
	return ""
}

func (x *ThreeDSResult) GetServerTransactionId() string {
	if x != nil {
		return x.ServerTransactionId
	}
	return ""
}

func (x *ThreeDSResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ThreeDSResult) GetMajorVersion() int32 {
	if x != nil {
		return x.MajorVersion
	}
	return 0
}

func (x *ThreeDSResult) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ThreeDSResult) GetPaReq() string {
	if x != nil {
		return x.PaReq
	}
	return ""
}

func (x *ThreeDSResult) GetAcsUrl() string {
	if x != nil {
		return x.AcsUrl
	}
	return ""
}

func (x *ThreeDSResult) GetPaRes() string {
	if x != nil {
		return x.PaRes
	}
	return ""
}

func (x *ThreeDSResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ThreeDSResult) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ThreeDSResult) GetLiability() Liability {
	if x != nil {
		return x.Liability
	}
	return Liability_LIABILITY_INVALID
}

func (x *ThreeDSResult) GetSdkResponse() string {
	if x != nil {
		return x.SdkResponse
	}
	return ""
}

type VerificationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressVerificationResult string         `protobuf:"bytes,1,opt,name=address_verification_result,json=addressVerificationResult,proto3" json:"address_verification_result,omitempty"` //Address verification code
	CvvVerificationResult     string         `protobuf:"bytes,2,opt,name=cvv_verification_result,json=cvvVerificationResult,proto3" json:"cvv_verification_result,omitempty"`             //e.g. CVV Response Code
	FraudResult               string         `protobuf:"bytes,3,opt,name=fraud_result,json=fraudResult,proto3" json:"fraud_result,omitempty"`                                             //Calculated fraud response if available
	ThreedsResult             *ThreeDSResult `protobuf:"bytes,5,opt,name=threeds_result,json=threedsResult,proto3" json:"threeds_result,omitempty"`
}

func (x *VerificationResult) Reset() {
	*x = VerificationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chargehive_chtype_transaction_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerificationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationResult) ProtoMessage() {}

func (x *VerificationResult) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_transaction_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationResult.ProtoReflect.Descriptor instead.
func (*VerificationResult) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_transaction_proto_rawDescGZIP(), []int{4}
}

func (x *VerificationResult) GetAddressVerificationResult() string {
	if x != nil {
		return x.AddressVerificationResult
	}
	return ""
}

func (x *VerificationResult) GetCvvVerificationResult() string {
	if x != nil {
		return x.CvvVerificationResult
	}
	return ""
}

func (x *VerificationResult) GetFraudResult() string {
	if x != nil {
		return x.FraudResult
	}
	return ""
}

func (x *VerificationResult) GetThreedsResult() *ThreeDSResult {
	if x != nil {
		return x.ThreedsResult
	}
	return nil
}

type AttemptDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeTransactionNumber  int64 `protobuf:"varint,1,opt,name=ChargeTransactionNumber,proto3" json:"ChargeTransactionNumber,omitempty"`
	ChargeAttemptNumber      int64 `protobuf:"varint,2,opt,name=ChargeAttemptNumber,proto3" json:"ChargeAttemptNumber,omitempty"`
	AttemptTransactionNumber int64 `protobuf:"varint,3,opt,name=AttemptTransactionNumber,proto3" json:"AttemptTransactionNumber,omitempty"`
	AttemptMethodCascade     int64 `protobuf:"varint,4,opt,name=AttemptMethodCascade,proto3" json:"AttemptMethodCascade,omitempty"`
	AttemptConnectorCascade  int64 `protobuf:"varint,5,opt,name=AttemptConnectorCascade,proto3" json:"AttemptConnectorCascade,omitempty"`
	IsPrimaryMethod          bool  `protobuf:"varint,6,opt,name=IsPrimaryMethod,proto3" json:"IsPrimaryMethod,omitempty"`
}

func (x *AttemptDetail) Reset() {
	*x = AttemptDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chargehive_chtype_transaction_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttemptDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttemptDetail) ProtoMessage() {}

func (x *AttemptDetail) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_transaction_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttemptDetail.ProtoReflect.Descriptor instead.
func (*AttemptDetail) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_transaction_proto_rawDescGZIP(), []int{5}
}

func (x *AttemptDetail) GetChargeTransactionNumber() int64 {
	if x != nil {
		return x.ChargeTransactionNumber
	}
	return 0
}

func (x *AttemptDetail) GetChargeAttemptNumber() int64 {
	if x != nil {
		return x.ChargeAttemptNumber
	}
	return 0
}

func (x *AttemptDetail) GetAttemptTransactionNumber() int64 {
	if x != nil {
		return x.AttemptTransactionNumber
	}
	return 0
}

func (x *AttemptDetail) GetAttemptMethodCascade() int64 {
	if x != nil {
		return x.AttemptMethodCascade
	}
	return 0
}

func (x *AttemptDetail) GetAttemptConnectorCascade() int64 {
	if x != nil {
		return x.AttemptConnectorCascade
	}
	return 0
}

func (x *AttemptDetail) GetIsPrimaryMethod() bool {
	if x != nil {
		return x.IsPrimaryMethod
	}
	return false
}

type InitialTransactionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeId      string `protobuf:"bytes,1,opt,name=charge_id,json=chargeId,proto3" json:"charge_id,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	ConnectorId   string `protobuf:"bytes,3,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`
}

func (x *InitialTransactionData) Reset() {
	*x = InitialTransactionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chargehive_chtype_transaction_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitialTransactionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitialTransactionData) ProtoMessage() {}

func (x *InitialTransactionData) ProtoReflect() protoreflect.Message {
	mi := &file_chargehive_chtype_transaction_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitialTransactionData.ProtoReflect.Descriptor instead.
func (*InitialTransactionData) Descriptor() ([]byte, []int) {
	return file_chargehive_chtype_transaction_proto_rawDescGZIP(), []int{6}
}

func (x *InitialTransactionData) GetChargeId() string {
	if x != nil {
		return x.ChargeId
	}
	return ""
}

func (x *InitialTransactionData) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *InitialTransactionData) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

var File_chargehive_chtype_transaction_proto protoreflect.FileDescriptor

var file_chargehive_chtype_transaction_proto_rawDesc = []byte{
	0x0a, 0x23, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x1f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x68, 0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68,
	0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x75, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69,
	0x76, 0x65, 0x2f, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x8c, 0x0e, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x47, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x12, 0x4d, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x40, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x41, 0x0a, 0x08, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x3a, 0x0a,
	0x09, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x09,
	0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x0e, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63,
	0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x43, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x72,
	0x61, 0x75, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x75, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x55, 0x0a, 0x16, 0x61, 0x6e, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x15, 0x61, 0x6e, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf5,
	0x09, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x09, 0x66, 0x65, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x77, 0x61, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x77, 0x61, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x12, 0x40, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x61,
	0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x09, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x09, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x73, 0x70, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x73, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x1a, 0x41, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xea, 0x03, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa5, 0x04, 0x0a, 0x0d, 0x54, 0x68, 0x72, 0x65, 0x65, 0x44, 0x53, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x63, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x63, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x76, 0x76, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x61, 0x76, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x78,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x78, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x70,
	0x61, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x63, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x70,
	0x61, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x52,
	0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x09,
	0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x63, 0x68, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x4c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x09, 0x6c,
	0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x64, 0x6b, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x64, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x12,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x76, 0x76, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x76, 0x76, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72,
	0x61, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x72, 0x61, 0x75, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x47, 0x0a,
	0x0e, 0x74, 0x68, 0x72, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x44,
	0x53, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x74, 0x68, 0x72, 0x65, 0x65, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xcf, 0x02, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x18, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x32, 0x0a, 0x14, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x43, 0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x61, 0x73,
	0x63, 0x61, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x49, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x49, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x7f, 0x0a, 0x16, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x42, 0x67, 0x5a, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69,
	0x76, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x63, 0x68, 0x74, 0x79, 0x70,
	0x65, 0xca, 0x02, 0x11, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x48, 0x69, 0x76, 0x65, 0x5c, 0x43,
	0x68, 0x74, 0x79, 0x70, 0x65, 0xe2, 0x02, 0x1a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x48, 0x69,
	0x76, 0x65, 0x5c, 0x43, 0x68, 0x74, 0x79, 0x70, 0x65, 0x5c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chargehive_chtype_transaction_proto_rawDescOnce sync.Once
	file_chargehive_chtype_transaction_proto_rawDescData = file_chargehive_chtype_transaction_proto_rawDesc
)

func file_chargehive_chtype_transaction_proto_rawDescGZIP() []byte {
	file_chargehive_chtype_transaction_proto_rawDescOnce.Do(func() {
		file_chargehive_chtype_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_chargehive_chtype_transaction_proto_rawDescData)
	})
	return file_chargehive_chtype_transaction_proto_rawDescData
}

var file_chargehive_chtype_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_chargehive_chtype_transaction_proto_goTypes = []interface{}{
	(*Transaction)(nil),            // 0: chargehive.chtype.Transaction
	(*TransactionDetail)(nil),      // 1: chargehive.chtype.TransactionDetail
	(*VerifyRequestData)(nil),      // 2: chargehive.chtype.VerifyRequestData
	(*ThreeDSResult)(nil),          // 3: chargehive.chtype.ThreeDSResult
	(*VerificationResult)(nil),     // 4: chargehive.chtype.VerificationResult
	(*AttemptDetail)(nil),          // 5: chargehive.chtype.AttemptDetail
	(*InitialTransactionData)(nil), // 6: chargehive.chtype.InitialTransactionData
	nil,                            // 7: chargehive.chtype.TransactionDetail.AdditionalDataEntry
	nil,                            // 8: chargehive.chtype.VerifyRequestData.DataEntry
	nil,                            // 9: chargehive.chtype.VerifyRequestData.MethodDataEntry
	(PaymentMethodType)(0),         // 10: chargehive.chtype.PaymentMethodType
	(TransactionType)(0),           // 11: chargehive.chtype.TransactionType
	(*Amount)(nil),                 // 12: chargehive.chtype.Amount
	(ContractType)(0),              // 13: chargehive.chtype.ContractType
	(TransactionResult)(0),         // 14: chargehive.chtype.TransactionResult
	(FailureType)(0),               // 15: chargehive.chtype.FailureType
	(VerificationStatus)(0),        // 16: chargehive.chtype.VerificationStatus
	(Liability)(0),                 // 17: chargehive.chtype.Liability
	(*FraudResult)(nil),            // 18: chargehive.chtype.FraudResult
	(*ResponseDetail)(nil),         // 19: chargehive.chtype.ResponseDetail
	(TransactionSubType)(0),        // 20: chargehive.chtype.TransactionSubType
	(*timestamppb.Timestamp)(nil),  // 21: google.protobuf.Timestamp
	(PaymentMethodProvider)(0),     // 22: chargehive.chtype.PaymentMethodProvider
	(PaymentMethodInputType)(0),    // 23: chargehive.chtype.PaymentMethodInputType
	(ActorType)(0),                 // 24: chargehive.chtype.ActorType
	(Environment)(0),               // 25: chargehive.chtype.Environment
	(VerifyRequestType)(0),         // 26: chargehive.chtype.VerifyRequestType
}
var file_chargehive_chtype_transaction_proto_depIdxs = []int32{
	1,  // 0: chargehive.chtype.Transaction.details:type_name -> chargehive.chtype.TransactionDetail
	10, // 1: chargehive.chtype.Transaction.payment_type:type_name -> chargehive.chtype.PaymentMethodType
	11, // 2: chargehive.chtype.Transaction.transaction_type:type_name -> chargehive.chtype.TransactionType
	12, // 3: chargehive.chtype.Transaction.request_amount:type_name -> chargehive.chtype.Amount
	12, // 4: chargehive.chtype.Transaction.transacted_amount:type_name -> chargehive.chtype.Amount
	13, // 5: chargehive.chtype.Transaction.contract:type_name -> chargehive.chtype.ContractType
	14, // 6: chargehive.chtype.Transaction.result:type_name -> chargehive.chtype.TransactionResult
	2,  // 7: chargehive.chtype.Transaction.verify_request:type_name -> chargehive.chtype.VerifyRequestData
	15, // 8: chargehive.chtype.Transaction.failure_type:type_name -> chargehive.chtype.FailureType
	16, // 9: chargehive.chtype.Transaction.verified:type_name -> chargehive.chtype.VerificationStatus
	17, // 10: chargehive.chtype.Transaction.liability:type_name -> chargehive.chtype.Liability
	5,  // 11: chargehive.chtype.Transaction.attempt_detail:type_name -> chargehive.chtype.AttemptDetail
	18, // 12: chargehive.chtype.Transaction.fraud_results:type_name -> chargehive.chtype.FraudResult
	19, // 13: chargehive.chtype.Transaction.response:type_name -> chargehive.chtype.ResponseDetail
	20, // 14: chargehive.chtype.Transaction.transaction_sub_type:type_name -> chargehive.chtype.TransactionSubType
	0,  // 15: chargehive.chtype.Transaction.ancillary_transactions:type_name -> chargehive.chtype.Transaction
	21, // 16: chargehive.chtype.Transaction.transaction_time:type_name -> google.protobuf.Timestamp
	22, // 17: chargehive.chtype.Transaction.payment_provider:type_name -> chargehive.chtype.PaymentMethodProvider
	23, // 18: chargehive.chtype.Transaction.payment_input_type:type_name -> chargehive.chtype.PaymentMethodInputType
	24, // 19: chargehive.chtype.TransactionDetail.actor_type:type_name -> chargehive.chtype.ActorType
	12, // 20: chargehive.chtype.TransactionDetail.requested_amount:type_name -> chargehive.chtype.Amount
	12, // 21: chargehive.chtype.TransactionDetail.processed_amount:type_name -> chargehive.chtype.Amount
	12, // 22: chargehive.chtype.TransactionDetail.fee_estimate:type_name -> chargehive.chtype.Amount
	12, // 23: chargehive.chtype.TransactionDetail.fee_actual:type_name -> chargehive.chtype.Amount
	21, // 24: chargehive.chtype.TransactionDetail.start_time:type_name -> google.protobuf.Timestamp
	21, // 25: chargehive.chtype.TransactionDetail.end_time:type_name -> google.protobuf.Timestamp
	25, // 26: chargehive.chtype.TransactionDetail.environment:type_name -> chargehive.chtype.Environment
	19, // 27: chargehive.chtype.TransactionDetail.response:type_name -> chargehive.chtype.ResponseDetail
	4,  // 28: chargehive.chtype.TransactionDetail.verification_result:type_name -> chargehive.chtype.VerificationResult
	7,  // 29: chargehive.chtype.TransactionDetail.additional_data:type_name -> chargehive.chtype.TransactionDetail.AdditionalDataEntry
	17, // 30: chargehive.chtype.TransactionDetail.liability:type_name -> chargehive.chtype.Liability
	26, // 31: chargehive.chtype.VerifyRequestData.type:type_name -> chargehive.chtype.VerifyRequestType
	8,  // 32: chargehive.chtype.VerifyRequestData.data:type_name -> chargehive.chtype.VerifyRequestData.DataEntry
	25, // 33: chargehive.chtype.VerifyRequestData.environment:type_name -> chargehive.chtype.Environment
	9,  // 34: chargehive.chtype.VerifyRequestData.methodData:type_name -> chargehive.chtype.VerifyRequestData.MethodDataEntry
	21, // 35: chargehive.chtype.ThreeDSResult.timestamp:type_name -> google.protobuf.Timestamp
	17, // 36: chargehive.chtype.ThreeDSResult.liability:type_name -> chargehive.chtype.Liability
	3,  // 37: chargehive.chtype.VerificationResult.threeds_result:type_name -> chargehive.chtype.ThreeDSResult
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_chargehive_chtype_transaction_proto_init() }
func file_chargehive_chtype_transaction_proto_init() {
	if File_chargehive_chtype_transaction_proto != nil {
		return
	}
	file_chargehive_chtype_generic_proto_init()
	file_chargehive_chtype_enum_proto_init()
	file_chargehive_chtype_fraud_proto_init()
	file_chargehive_chtype_response_codes_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chargehive_chtype_transaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chargehive_chtype_transaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chargehive_chtype_transaction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chargehive_chtype_transaction_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreeDSResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chargehive_chtype_transaction_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerificationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chargehive_chtype_transaction_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttemptDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chargehive_chtype_transaction_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitialTransactionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chargehive_chtype_transaction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chargehive_chtype_transaction_proto_goTypes,
		DependencyIndexes: file_chargehive_chtype_transaction_proto_depIdxs,
		MessageInfos:      file_chargehive_chtype_transaction_proto_msgTypes,
	}.Build()
	File_chargehive_chtype_transaction_proto = out.File
	file_chargehive_chtype_transaction_proto_rawDesc = nil
	file_chargehive_chtype_transaction_proto_goTypes = nil
	file_chargehive_chtype_transaction_proto_depIdxs = nil
}
