// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: response_codes.proto

package chtype

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ResponseCategory int32

const (
	RESPONSE_CATEGORY_INVALID       ResponseCategory = 0
	RESPONSE_CATEGORY_CHARGE        ResponseCategory = 1
	RESPONSE_CATEGORY_METHOD        ResponseCategory = 2
	RESPONSE_CATEGORY_ADDRESS       ResponseCategory = 3
	RESPONSE_CATEGORY_CONFIGURATION ResponseCategory = 4
	RESPONSE_CATEGORY_CONNECTIVITY  ResponseCategory = 5
	RESPONSE_CATEGORY_FRAUD         ResponseCategory = 6
	RESPONSE_CATEGORY_VERIFICATION  ResponseCategory = 7
	RESPONSE_CATEGORY_PROCESSING    ResponseCategory = 8
	RESPONSE_CATEGORY_UNKNOWN       ResponseCategory = 9
)

var ResponseCategory_name = map[int32]string{
	0: "RESPONSE_CATEGORY_INVALID",
	1: "RESPONSE_CATEGORY_CHARGE",
	2: "RESPONSE_CATEGORY_METHOD",
	3: "RESPONSE_CATEGORY_ADDRESS",
	4: "RESPONSE_CATEGORY_CONFIGURATION",
	5: "RESPONSE_CATEGORY_CONNECTIVITY",
	6: "RESPONSE_CATEGORY_FRAUD",
	7: "RESPONSE_CATEGORY_VERIFICATION",
	8: "RESPONSE_CATEGORY_PROCESSING",
	9: "RESPONSE_CATEGORY_UNKNOWN",
}

var ResponseCategory_value = map[string]int32{
	"RESPONSE_CATEGORY_INVALID":       0,
	"RESPONSE_CATEGORY_CHARGE":        1,
	"RESPONSE_CATEGORY_METHOD":        2,
	"RESPONSE_CATEGORY_ADDRESS":       3,
	"RESPONSE_CATEGORY_CONFIGURATION": 4,
	"RESPONSE_CATEGORY_CONNECTIVITY":  5,
	"RESPONSE_CATEGORY_FRAUD":         6,
	"RESPONSE_CATEGORY_VERIFICATION":  7,
	"RESPONSE_CATEGORY_PROCESSING":    8,
	"RESPONSE_CATEGORY_UNKNOWN":       9,
}

func (x ResponseCategory) String() string {
	return proto.EnumName(ResponseCategory_name, int32(x))
}

func (ResponseCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e1fdc72718db4e4d, []int{0}
}

type ResponseError int32

const (
	RESPONSE_ERROR_INVALID         ResponseError = 0
	RESPONSE_ERROR_NONE            ResponseError = 1
	RESPONSE_ERROR_AVAILABLE_FUNDS ResponseError = 2
	RESPONSE_ERROR_PAYLOAD         ResponseError = 3
	RESPONSE_ERROR_LIMIT           ResponseError = 4
	RESPONSE_ERROR_EXPIRED         ResponseError = 5
	RESPONSE_ERROR_UNAVAILABLE     ResponseError = 6
	RESPONSE_ERROR_UNSUPPORTED     ResponseError = 7
	RESPONSE_ERROR_LOST            ResponseError = 8
	RESPONSE_ERROR_STOLEN          ResponseError = 9
	RESPONSE_ERROR_FRAUD           ResponseError = 10
	RESPONSE_ERROR_PICKUP          ResponseError = 11
	RESPONSE_ERROR_VELOCITY        ResponseError = 12
	RESPONSE_ERROR_ADDRESS         ResponseError = 13
	RESPONSE_ERROR_DUPLICATE       ResponseError = 14
	RESPONSE_ERROR_TIMEOUT         ResponseError = 15
	RESPONSE_ERROR_NOT_FOUND       ResponseError = 16
	RESPONSE_ERROR_DISPUTED        ResponseError = 17
	RESPONSE_ERROR_PERMISSION      ResponseError = 18
	RESPONSE_ERROR_DECLINE         ResponseError = 19
	RESPONSE_ERROR_USER_INPUT      ResponseError = 20
	RESPONSE_ERROR_USER_DEVICE     ResponseError = 21
	RESPONSE_ERROR_ALREADY_DONE    ResponseError = 22
	RESPONSE_ERROR_RETRY           ResponseError = 23
	RESPONSE_ERROR_QUEUED          ResponseError = 24
	RESPONSE_ERROR_UNKNOWN         ResponseError = 25
)

var ResponseError_name = map[int32]string{
	0:  "RESPONSE_ERROR_INVALID",
	1:  "RESPONSE_ERROR_NONE",
	2:  "RESPONSE_ERROR_AVAILABLE_FUNDS",
	3:  "RESPONSE_ERROR_PAYLOAD",
	4:  "RESPONSE_ERROR_LIMIT",
	5:  "RESPONSE_ERROR_EXPIRED",
	6:  "RESPONSE_ERROR_UNAVAILABLE",
	7:  "RESPONSE_ERROR_UNSUPPORTED",
	8:  "RESPONSE_ERROR_LOST",
	9:  "RESPONSE_ERROR_STOLEN",
	10: "RESPONSE_ERROR_FRAUD",
	11: "RESPONSE_ERROR_PICKUP",
	12: "RESPONSE_ERROR_VELOCITY",
	13: "RESPONSE_ERROR_ADDRESS",
	14: "RESPONSE_ERROR_DUPLICATE",
	15: "RESPONSE_ERROR_TIMEOUT",
	16: "RESPONSE_ERROR_NOT_FOUND",
	17: "RESPONSE_ERROR_DISPUTED",
	18: "RESPONSE_ERROR_PERMISSION",
	19: "RESPONSE_ERROR_DECLINE",
	20: "RESPONSE_ERROR_USER_INPUT",
	21: "RESPONSE_ERROR_USER_DEVICE",
	22: "RESPONSE_ERROR_ALREADY_DONE",
	23: "RESPONSE_ERROR_RETRY",
	24: "RESPONSE_ERROR_QUEUED",
	25: "RESPONSE_ERROR_UNKNOWN",
}

var ResponseError_value = map[string]int32{
	"RESPONSE_ERROR_INVALID":         0,
	"RESPONSE_ERROR_NONE":            1,
	"RESPONSE_ERROR_AVAILABLE_FUNDS": 2,
	"RESPONSE_ERROR_PAYLOAD":         3,
	"RESPONSE_ERROR_LIMIT":           4,
	"RESPONSE_ERROR_EXPIRED":         5,
	"RESPONSE_ERROR_UNAVAILABLE":     6,
	"RESPONSE_ERROR_UNSUPPORTED":     7,
	"RESPONSE_ERROR_LOST":            8,
	"RESPONSE_ERROR_STOLEN":          9,
	"RESPONSE_ERROR_FRAUD":           10,
	"RESPONSE_ERROR_PICKUP":          11,
	"RESPONSE_ERROR_VELOCITY":        12,
	"RESPONSE_ERROR_ADDRESS":         13,
	"RESPONSE_ERROR_DUPLICATE":       14,
	"RESPONSE_ERROR_TIMEOUT":         15,
	"RESPONSE_ERROR_NOT_FOUND":       16,
	"RESPONSE_ERROR_DISPUTED":        17,
	"RESPONSE_ERROR_PERMISSION":      18,
	"RESPONSE_ERROR_DECLINE":         19,
	"RESPONSE_ERROR_USER_INPUT":      20,
	"RESPONSE_ERROR_USER_DEVICE":     21,
	"RESPONSE_ERROR_ALREADY_DONE":    22,
	"RESPONSE_ERROR_RETRY":           23,
	"RESPONSE_ERROR_QUEUED":          24,
	"RESPONSE_ERROR_UNKNOWN":         25,
}

func (x ResponseError) String() string {
	return proto.EnumName(ResponseError_name, int32(x))
}

func (ResponseError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e1fdc72718db4e4d, []int{1}
}

type ResponseCode int32

const (
	//Invalid response code
	RESPONSE_CODE_INVALID ResponseCode = 0
	//Generic Informational Response
	RESPONSE_CODE_INFO ResponseCode = 1000
	//Success Response
	RESPONSE_CODE_OK ResponseCode = 2000
	//Partial Success Response
	RESPONSE_CODE_OK_PARTIAL ResponseCode = 2100
	//3D Secure, Pending, Come back later
	RESPONSE_CODE_REDIRECT ResponseCode = 3000
	//Request is still processing, check back later
	RESPONSE_CODE_REDIRECT_STILL_PROCESSING ResponseCode = 3010
	//Issue with the client request
	RESPONSE_CODE_CLIENT ResponseCode = 4000
	//Invalid request payload
	RESPONSE_CODE_CLIENT_PAYLOAD ResponseCode = 4100
	//Invalid amount in request payload
	RESPONSE_CODE_CLIENT_PAYLOAD_AMOUNT ResponseCode = 4110
	//Invalid card data in request payload
	RESPONSE_CODE_CLIENT_PAYLOAD_CARD ResponseCode = 4120
	//Invalid card number in request payload
	RESPONSE_CODE_CLIENT_PAYLOAD_CARD_NUMBER ResponseCode = 4130
	//Invalid card date in request payload
	RESPONSE_CODE_CLIENT_PAYLOAD_CARD_DATE ResponseCode = 4140
	//Invalid card CVV in request payload
	RESPONSE_CODE_CLIENT_PAYLOAD_CARD_CVV ResponseCode = 4150
	//Invalid card type in request payload
	RESPONSE_CODE_CLIENT_PAYLOAD_CARD_TYPE ResponseCode = 4160
	//Invalid address data in request payload
	RESPONSE_CODE_CLIENT_PAYLOAD_ADDRESS ResponseCode = 4170
	//Invalid zip data in request payload
	RESPONSE_CODE_CLIENT_PAYLOAD_ZIP ResponseCode = 4180
	//Invalid currency data in request payload
	RESPONSE_CODE_CLIENT_PAYLOAD_CURRENCY ResponseCode = 4190
	//Error with payment method source
	RESPONSE_CODE_CLIENT_PAYMENT_METHOD ResponseCode = 4300
	//Payment method has insufficient funds
	RESPONSE_CODE_CLIENT_PAYMENT_METHOD_FUNDS ResponseCode = 4310
	//Payment method has reached an amount or frequency limit
	RESPONSE_CODE_CLIENT_PAYMENT_METHOD_LIMIT ResponseCode = 4320
	//Payment method does not allow this request
	RESPONSE_CODE_CLIENT_PAYMENT_METHOD_NOT_PERMITTED ResponseCode = 4330
	//Transaction declined due to security issues
	RESPONSE_CODE_CLIENT_SECURITY ResponseCode = 4500
	//Transaction likely fraudulent
	RESPONSE_CODE_CLIENT_SECURITY_FRAUD ResponseCode = 4510
	//Payment card may be lost
	RESPONSE_CODE_CLIENT_SECURITY_LOST ResponseCode = 4520
	//Payment card may be stolen
	RESPONSE_CODE_CLIENT_SECURITY_STOLEN ResponseCode = 4530
	//Payment card should be retrieved from the customer
	RESPONSE_CODE_CLIENT_SECURITY_PICKUP ResponseCode = 4540
	//Customer should contact their payment method provider
	RESPONSE_CODE_CLIENT_SECURITY_CONTACT_ISSUER ResponseCode = 4550
	//Transaction suspected of fraud
	RESPONSE_CODE_CLIENT_SECURITY_SUSPECTED_FRAUD ResponseCode = 4560
	//Velocity fraud check failed
	RESPONSE_CODE_CLIENT_SECURITY_VELOCITY ResponseCode = 4570
	//AVS fraud check failed
	RESPONSE_CODE_CLIENT_SECURITY_AVS ResponseCode = 4580
	//CVV security check failed
	RESPONSE_CODE_CLIENT_SECURITY_CVV ResponseCode = 4590
	//Issues with the processing the transaction or associated transactions
	RESPONSE_CODE_CLIENT_TRANS ResponseCode = 4700
	//Generic decline from payment method
	RESPONSE_CODE_CLIENT_TRANS_DECLINED ResponseCode = 4710
	//Generic failure of payment method
	RESPONSE_CODE_CLIENT_TRANS_FAILED ResponseCode = 4720
	//Cannot complete transaction as not authorised or unable to complete
	RESPONSE_CODE_CLIENT_TRANS_PERMISSION ResponseCode = 4730
	//Transaction or associated transaction cannot be found
	RESPONSE_CODE_CLIENT_TRANS_NOT_FOUND ResponseCode = 4740
	//This transaction has already been sent
	RESPONSE_CODE_CLIENT_TRANS_DUPLICATE ResponseCode = 4750
	//Payment method provider suggests the transaction be reattempted
	RESPONSE_CODE_CLIENT_TRANS_RETRY ResponseCode = 4760
	//Transaction or associated transaction has expired and cannot complete
	RESPONSE_CODE_CLIENT_TRANS_EXPIRED ResponseCode = 4770
	//Transaction or associated transaction is disputed/part of a chargeback
	RESPONSE_CODE_CLIENT_TRANS_DISPUTE ResponseCode = 4780
	//Payment method provider did not response in time
	RESPONSE_CODE_CLIENT_TRANS_TIMEOUT ResponseCode = 4790
	//Operation has already been completed
	RESPONSE_CODE_CLIENT_TRANS_ALREADY_DONE ResponseCode = 4800
	//Cannot complete operation now, but may be ready later
	RESPONSE_CODE_CLIENT_TRANS_NOT_READY ResponseCode = 4810
	//Connector does not support this payment method
	RESPONSE_CODE_CLIENT_TRANS_PAYMENT_METHOD ResponseCode = 4820
	//Amount or volume exceeds some limit
	RESPONSE_CODE_CLIENT_TRANS_EXCEEDS_LIMIT ResponseCode = 4830
	//3D Secure issues
	RESPONSE_CODE_CLIENT_3DSEC ResponseCode = 4900
	//3D Secure Authentication required
	RESPONSE_CODE_CLIENT_3DSEC_AUTHENTICATION ResponseCode = 4910
	//Issues with the connector
	RESPONSE_CODE_CONN ResponseCode = 5000
	//Internal ChargeHive error
	RESPONSE_CODE_CONN_CHARGEHIVE ResponseCode = 5010
	//Connector misconfiguration or authentication error
	RESPONSE_CODE_CONN_CONFIG_AUTH ResponseCode = 5500
	//Connector does not exist
	RESPONSE_CODE_CONN_INVALID ResponseCode = 5510
	//Cannot communicate with connector service
	RESPONSE_CODE_CONN_UNAVAILABLE ResponseCode = 5520
	//Internal error from connector
	RESPONSE_CODE_CONN_ERROR ResponseCode = 5530
	//Connector rate or amount limit has been reached
	RESPONSE_CODE_CONN_LIMIT_EXCEEDED ResponseCode = 5540
	//Connector, or connector account does not support this type of request
	RESPONSE_CODE_CONN_UNSUPPORTED_METHOD ResponseCode = 5550
	//Connection with the connector has timed out
	RESPONSE_CODE_CONN_TIMEOUT ResponseCode = 5570
	//Unknown error, if received, this should be remapped to a propper code
	RESPONSE_CODE_UNKNOWN ResponseCode = 5990
)

var ResponseCode_name = map[int32]string{
	0:    "RESPONSE_CODE_INVALID",
	1000: "RESPONSE_CODE_INFO",
	2000: "RESPONSE_CODE_OK",
	2100: "RESPONSE_CODE_OK_PARTIAL",
	3000: "RESPONSE_CODE_REDIRECT",
	3010: "RESPONSE_CODE_REDIRECT_STILL_PROCESSING",
	4000: "RESPONSE_CODE_CLIENT",
	4100: "RESPONSE_CODE_CLIENT_PAYLOAD",
	4110: "RESPONSE_CODE_CLIENT_PAYLOAD_AMOUNT",
	4120: "RESPONSE_CODE_CLIENT_PAYLOAD_CARD",
	4130: "RESPONSE_CODE_CLIENT_PAYLOAD_CARD_NUMBER",
	4140: "RESPONSE_CODE_CLIENT_PAYLOAD_CARD_DATE",
	4150: "RESPONSE_CODE_CLIENT_PAYLOAD_CARD_CVV",
	4160: "RESPONSE_CODE_CLIENT_PAYLOAD_CARD_TYPE",
	4170: "RESPONSE_CODE_CLIENT_PAYLOAD_ADDRESS",
	4180: "RESPONSE_CODE_CLIENT_PAYLOAD_ZIP",
	4190: "RESPONSE_CODE_CLIENT_PAYLOAD_CURRENCY",
	4300: "RESPONSE_CODE_CLIENT_PAYMENT_METHOD",
	4310: "RESPONSE_CODE_CLIENT_PAYMENT_METHOD_FUNDS",
	4320: "RESPONSE_CODE_CLIENT_PAYMENT_METHOD_LIMIT",
	4330: "RESPONSE_CODE_CLIENT_PAYMENT_METHOD_NOT_PERMITTED",
	4500: "RESPONSE_CODE_CLIENT_SECURITY",
	4510: "RESPONSE_CODE_CLIENT_SECURITY_FRAUD",
	4520: "RESPONSE_CODE_CLIENT_SECURITY_LOST",
	4530: "RESPONSE_CODE_CLIENT_SECURITY_STOLEN",
	4540: "RESPONSE_CODE_CLIENT_SECURITY_PICKUP",
	4550: "RESPONSE_CODE_CLIENT_SECURITY_CONTACT_ISSUER",
	4560: "RESPONSE_CODE_CLIENT_SECURITY_SUSPECTED_FRAUD",
	4570: "RESPONSE_CODE_CLIENT_SECURITY_VELOCITY",
	4580: "RESPONSE_CODE_CLIENT_SECURITY_AVS",
	4590: "RESPONSE_CODE_CLIENT_SECURITY_CVV",
	4700: "RESPONSE_CODE_CLIENT_TRANS",
	4710: "RESPONSE_CODE_CLIENT_TRANS_DECLINED",
	4720: "RESPONSE_CODE_CLIENT_TRANS_FAILED",
	4730: "RESPONSE_CODE_CLIENT_TRANS_PERMISSION",
	4740: "RESPONSE_CODE_CLIENT_TRANS_NOT_FOUND",
	4750: "RESPONSE_CODE_CLIENT_TRANS_DUPLICATE",
	4760: "RESPONSE_CODE_CLIENT_TRANS_RETRY",
	4770: "RESPONSE_CODE_CLIENT_TRANS_EXPIRED",
	4780: "RESPONSE_CODE_CLIENT_TRANS_DISPUTE",
	4790: "RESPONSE_CODE_CLIENT_TRANS_TIMEOUT",
	4800: "RESPONSE_CODE_CLIENT_TRANS_ALREADY_DONE",
	4810: "RESPONSE_CODE_CLIENT_TRANS_NOT_READY",
	4820: "RESPONSE_CODE_CLIENT_TRANS_PAYMENT_METHOD",
	4830: "RESPONSE_CODE_CLIENT_TRANS_EXCEEDS_LIMIT",
	4900: "RESPONSE_CODE_CLIENT_3DSEC",
	4910: "RESPONSE_CODE_CLIENT_3DSEC_AUTHENTICATION",
	5000: "RESPONSE_CODE_CONN",
	5010: "RESPONSE_CODE_CONN_CHARGEHIVE",
	5500: "RESPONSE_CODE_CONN_CONFIG_AUTH",
	5510: "RESPONSE_CODE_CONN_INVALID",
	5520: "RESPONSE_CODE_CONN_UNAVAILABLE",
	5530: "RESPONSE_CODE_CONN_ERROR",
	5540: "RESPONSE_CODE_CONN_LIMIT_EXCEEDED",
	5550: "RESPONSE_CODE_CONN_UNSUPPORTED_METHOD",
	5570: "RESPONSE_CODE_CONN_TIMEOUT",
	5990: "RESPONSE_CODE_UNKNOWN",
}

var ResponseCode_value = map[string]int32{
	"RESPONSE_CODE_INVALID":                             0,
	"RESPONSE_CODE_INFO":                                1000,
	"RESPONSE_CODE_OK":                                  2000,
	"RESPONSE_CODE_OK_PARTIAL":                          2100,
	"RESPONSE_CODE_REDIRECT":                            3000,
	"RESPONSE_CODE_REDIRECT_STILL_PROCESSING":           3010,
	"RESPONSE_CODE_CLIENT":                              4000,
	"RESPONSE_CODE_CLIENT_PAYLOAD":                      4100,
	"RESPONSE_CODE_CLIENT_PAYLOAD_AMOUNT":               4110,
	"RESPONSE_CODE_CLIENT_PAYLOAD_CARD":                 4120,
	"RESPONSE_CODE_CLIENT_PAYLOAD_CARD_NUMBER":          4130,
	"RESPONSE_CODE_CLIENT_PAYLOAD_CARD_DATE":            4140,
	"RESPONSE_CODE_CLIENT_PAYLOAD_CARD_CVV":             4150,
	"RESPONSE_CODE_CLIENT_PAYLOAD_CARD_TYPE":            4160,
	"RESPONSE_CODE_CLIENT_PAYLOAD_ADDRESS":              4170,
	"RESPONSE_CODE_CLIENT_PAYLOAD_ZIP":                  4180,
	"RESPONSE_CODE_CLIENT_PAYLOAD_CURRENCY":             4190,
	"RESPONSE_CODE_CLIENT_PAYMENT_METHOD":               4300,
	"RESPONSE_CODE_CLIENT_PAYMENT_METHOD_FUNDS":         4310,
	"RESPONSE_CODE_CLIENT_PAYMENT_METHOD_LIMIT":         4320,
	"RESPONSE_CODE_CLIENT_PAYMENT_METHOD_NOT_PERMITTED": 4330,
	"RESPONSE_CODE_CLIENT_SECURITY":                     4500,
	"RESPONSE_CODE_CLIENT_SECURITY_FRAUD":               4510,
	"RESPONSE_CODE_CLIENT_SECURITY_LOST":                4520,
	"RESPONSE_CODE_CLIENT_SECURITY_STOLEN":              4530,
	"RESPONSE_CODE_CLIENT_SECURITY_PICKUP":              4540,
	"RESPONSE_CODE_CLIENT_SECURITY_CONTACT_ISSUER":      4550,
	"RESPONSE_CODE_CLIENT_SECURITY_SUSPECTED_FRAUD":     4560,
	"RESPONSE_CODE_CLIENT_SECURITY_VELOCITY":            4570,
	"RESPONSE_CODE_CLIENT_SECURITY_AVS":                 4580,
	"RESPONSE_CODE_CLIENT_SECURITY_CVV":                 4590,
	"RESPONSE_CODE_CLIENT_TRANS":                        4700,
	"RESPONSE_CODE_CLIENT_TRANS_DECLINED":               4710,
	"RESPONSE_CODE_CLIENT_TRANS_FAILED":                 4720,
	"RESPONSE_CODE_CLIENT_TRANS_PERMISSION":             4730,
	"RESPONSE_CODE_CLIENT_TRANS_NOT_FOUND":              4740,
	"RESPONSE_CODE_CLIENT_TRANS_DUPLICATE":              4750,
	"RESPONSE_CODE_CLIENT_TRANS_RETRY":                  4760,
	"RESPONSE_CODE_CLIENT_TRANS_EXPIRED":                4770,
	"RESPONSE_CODE_CLIENT_TRANS_DISPUTE":                4780,
	"RESPONSE_CODE_CLIENT_TRANS_TIMEOUT":                4790,
	"RESPONSE_CODE_CLIENT_TRANS_ALREADY_DONE":           4800,
	"RESPONSE_CODE_CLIENT_TRANS_NOT_READY":              4810,
	"RESPONSE_CODE_CLIENT_TRANS_PAYMENT_METHOD":         4820,
	"RESPONSE_CODE_CLIENT_TRANS_EXCEEDS_LIMIT":          4830,
	"RESPONSE_CODE_CLIENT_3DSEC":                        4900,
	"RESPONSE_CODE_CLIENT_3DSEC_AUTHENTICATION":         4910,
	"RESPONSE_CODE_CONN":                                5000,
	"RESPONSE_CODE_CONN_CHARGEHIVE":                     5010,
	"RESPONSE_CODE_CONN_CONFIG_AUTH":                    5500,
	"RESPONSE_CODE_CONN_INVALID":                        5510,
	"RESPONSE_CODE_CONN_UNAVAILABLE":                    5520,
	"RESPONSE_CODE_CONN_ERROR":                          5530,
	"RESPONSE_CODE_CONN_LIMIT_EXCEEDED":                 5540,
	"RESPONSE_CODE_CONN_UNSUPPORTED_METHOD":             5550,
	"RESPONSE_CODE_CONN_TIMEOUT":                        5570,
	"RESPONSE_CODE_UNKNOWN":                             5990,
}

func (x ResponseCode) String() string {
	return proto.EnumName(ResponseCode_name, int32(x))
}

func (ResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e1fdc72718db4e4d, []int{2}
}

type ResponseDetail struct {
	ResponseCode         string            `protobuf:"bytes,1,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
	ConsumerMessage      string            `protobuf:"bytes,2,opt,name=consumer_message,json=consumerMessage,proto3" json:"consumer_message,omitempty"`
	MerchantMessage      string            `protobuf:"bytes,3,opt,name=merchant_message,json=merchantMessage,proto3" json:"merchant_message,omitempty"`
	FailureType          FailureType       `protobuf:"varint,4,opt,name=failure_type,json=failureType,proto3,enum=chtype.FailureType" json:"failure_type,omitempty"`
	Category             ResponseCategory  `protobuf:"varint,5,opt,name=category,proto3,enum=chtype.ResponseCategory" json:"category,omitempty"`
	ErrorType            ResponseError     `protobuf:"varint,6,opt,name=error_type,json=errorType,proto3,enum=chtype.ResponseError" json:"error_type,omitempty"`
	ErrorProperties      []string          `protobuf:"bytes,7,rep,name=error_properties,json=errorProperties,proto3" json:"error_properties,omitempty"`
	OriginatingCode      string            `protobuf:"bytes,8,opt,name=originating_code,json=originatingCode,proto3" json:"originating_code,omitempty"`
	SubErrors            []*ResponseDetail `protobuf:"bytes,9,rep,name=sub_errors,json=subErrors,proto3" json:"sub_errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ResponseDetail) Reset()         { *m = ResponseDetail{} }
func (m *ResponseDetail) String() string { return proto.CompactTextString(m) }
func (*ResponseDetail) ProtoMessage()    {}
func (*ResponseDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1fdc72718db4e4d, []int{0}
}
func (m *ResponseDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseDetail.Unmarshal(m, b)
}
func (m *ResponseDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseDetail.Marshal(b, m, deterministic)
}
func (m *ResponseDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseDetail.Merge(m, src)
}
func (m *ResponseDetail) XXX_Size() int {
	return xxx_messageInfo_ResponseDetail.Size(m)
}
func (m *ResponseDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseDetail proto.InternalMessageInfo

func (m *ResponseDetail) GetResponseCode() string {
	if m != nil {
		return m.ResponseCode
	}
	return ""
}

func (m *ResponseDetail) GetConsumerMessage() string {
	if m != nil {
		return m.ConsumerMessage
	}
	return ""
}

func (m *ResponseDetail) GetMerchantMessage() string {
	if m != nil {
		return m.MerchantMessage
	}
	return ""
}

func (m *ResponseDetail) GetFailureType() FailureType {
	if m != nil {
		return m.FailureType
	}
	return FAILURE_TYPE_INVALID
}

func (m *ResponseDetail) GetCategory() ResponseCategory {
	if m != nil {
		return m.Category
	}
	return RESPONSE_CATEGORY_INVALID
}

func (m *ResponseDetail) GetErrorType() ResponseError {
	if m != nil {
		return m.ErrorType
	}
	return RESPONSE_ERROR_INVALID
}

func (m *ResponseDetail) GetErrorProperties() []string {
	if m != nil {
		return m.ErrorProperties
	}
	return nil
}

func (m *ResponseDetail) GetOriginatingCode() string {
	if m != nil {
		return m.OriginatingCode
	}
	return ""
}

func (m *ResponseDetail) GetSubErrors() []*ResponseDetail {
	if m != nil {
		return m.SubErrors
	}
	return nil
}

func init() {
	proto.RegisterEnum("chtype.ResponseCategory", ResponseCategory_name, ResponseCategory_value)
	proto.RegisterEnum("chtype.ResponseError", ResponseError_name, ResponseError_value)
	proto.RegisterEnum("chtype.ResponseCode", ResponseCode_name, ResponseCode_value)
	proto.RegisterType((*ResponseDetail)(nil), "chtype.ResponseDetail")
}

func init() { proto.RegisterFile("response_codes.proto", fileDescriptor_e1fdc72718db4e4d) }

var fileDescriptor_e1fdc72718db4e4d = []byte{
	// 1430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x97, 0x3b, 0x68, 0x1c, 0xc7,
	0x1b, 0xc0, 0x2d, 0xc9, 0x7a, 0x8d, 0x65, 0xf9, 0xf3, 0x58, 0x8f, 0xb3, 0xfc, 0xd0, 0x49, 0xa7,
	0xd3, 0xd3, 0x96, 0xf0, 0xe3, 0xef, 0x7e, 0xb5, 0x33, 0x27, 0x2d, 0xde, 0xdb, 0xdd, 0xff, 0xec,
	0xec, 0x25, 0x72, 0xb3, 0x9c, 0xce, 0xeb, 0xd3, 0x81, 0x75, 0x2b, 0xee, 0x11, 0x70, 0x6f, 0x42,
	0x2a, 0x13, 0x42, 0x0a, 0x93, 0x22, 0x04, 0xe3, 0x22, 0x85, 0x71, 0x11, 0x82, 0x49, 0xe1, 0xc2,
	0xb8, 0x48, 0x61, 0x52, 0xb8, 0x30, 0x09, 0x84, 0x60, 0x12, 0x08, 0x26, 0xa4, 0x08, 0x49, 0x1b,
	0x12, 0x08, 0xfb, 0x3a, 0xed, 0x9d, 0x66, 0xa5, 0xab, 0xa4, 0x9b, 0xef, 0xf7, 0xcd, 0xcc, 0xf7,
	0x98, 0xef, 0xfb, 0x16, 0x8d, 0xd5, 0x9c, 0xfa, 0x9e, 0x5b, 0xad, 0x3b, 0x76, 0xc9, 0xbd, 0xed,
	0xd4, 0x57, 0xf7, 0x6a, 0x6e, 0xc3, 0xc5, 0x03, 0xa5, 0x9d, 0xc6, 0xbd, 0x3d, 0x67, 0xea, 0x72,
	0xb9, 0xd2, 0xd8, 0x69, 0x6e, 0xaf, 0x96, 0xdc, 0xdd, 0xb5, 0xb2, 0x5b, 0x76, 0xd7, 0x7c, 0xf1,
	0x76, 0xf3, 0x8e, 0xff, 0xcb, 0xff, 0xe1, 0xff, 0x17, 0xa8, 0x4d, 0x21, 0xa7, 0xda, 0xdc, 0x0d,
	0xfe, 0x9f, 0x7d, 0xde, 0x87, 0x46, 0x59, 0xb8, 0x37, 0x71, 0x1a, 0xc5, 0xca, 0x5d, 0x9c, 0x41,
	0x27, 0xdb, 0x4e, 0x4b, 0xf5, 0xa4, 0x7b, 0x16, 0x87, 0xd9, 0x48, 0xb4, 0x28, 0xbb, 0xb7, 0x1d,
	0xbc, 0x84, 0xa0, 0xe4, 0x56, 0xeb, 0xcd, 0x5d, 0xa7, 0x66, 0xef, 0x3a, 0xf5, 0x7a, 0xb1, 0xec,
	0xa4, 0x7a, 0x7d, 0xee, 0x54, 0xb4, 0x9e, 0x0f, 0x96, 0x3d, 0x74, 0xd7, 0xa9, 0x95, 0x76, 0x8a,
	0xd5, 0x46, 0x0b, 0xed, 0x0b, 0xd0, 0x68, 0x3d, 0x42, 0x6f, 0xa0, 0x91, 0x3b, 0xc5, 0xca, 0xdd,
	0x66, 0xcd, 0xb1, 0x3d, 0xc3, 0x52, 0xc7, 0xd3, 0x3d, 0x8b, 0xa3, 0x57, 0xcf, 0xac, 0x06, 0x76,
	0xae, 0xe6, 0x02, 0x19, 0xbf, 0xb7, 0xe7, 0xb0, 0x13, 0x77, 0xf6, 0x7f, 0xe0, 0xeb, 0x68, 0xa8,
	0x54, 0x6c, 0x38, 0x65, 0xb7, 0x76, 0x2f, 0xd5, 0xef, 0xeb, 0xa4, 0x22, 0x9d, 0xc8, 0x38, 0x39,
	0x94, 0xb3, 0x16, 0x89, 0xaf, 0x23, 0xe4, 0xd4, 0x6a, 0x6e, 0x2d, 0x38, 0x6b, 0xc0, 0xd7, 0x1b,
	0xef, 0xd4, 0xa3, 0x1e, 0xc1, 0x86, 0x7d, 0xd0, 0x3f, 0x6b, 0x09, 0x41, 0xa0, 0xb5, 0x57, 0x73,
	0xf7, 0x9c, 0x5a, 0xa3, 0xe2, 0xd4, 0x53, 0x83, 0xe9, 0x3e, 0xcf, 0x1c, 0x7f, 0xdd, 0x68, 0x2d,
	0x7b, 0xa8, 0x5b, 0xab, 0x94, 0x2b, 0xd5, 0x62, 0xa3, 0x52, 0x2d, 0x07, 0xce, 0x1c, 0x0a, 0x2c,
	0x8f, 0xad, 0xfb, 0xfe, 0xfc, 0x1f, 0x42, 0xf5, 0xe6, 0xb6, 0xed, 0xef, 0x50, 0x4f, 0x0d, 0xa7,
	0xfb, 0x16, 0x4f, 0x5c, 0x9d, 0xe8, 0xbc, 0x4b, 0x10, 0x20, 0x36, 0x5c, 0x6f, 0x6e, 0xfb, 0xd7,
	0xaa, 0x2f, 0xff, 0xd0, 0x8b, 0xa0, 0xd3, 0x42, 0x7c, 0x01, 0x9d, 0x65, 0xd4, 0x34, 0x74, 0xcd,
	0xa4, 0xb6, 0x2c, 0x71, 0xba, 0xa1, 0xb3, 0x2d, 0x5b, 0xd1, 0x0a, 0x92, 0xaa, 0x10, 0x38, 0x86,
	0xcf, 0xa3, 0xd4, 0x41, 0xb1, 0xbc, 0x29, 0xb1, 0x0d, 0x0a, 0x3d, 0x62, 0x69, 0x9e, 0xf2, 0x4d,
	0x9d, 0x40, 0xaf, 0x78, 0x6b, 0x89, 0x10, 0x46, 0x4d, 0x13, 0xfa, 0x70, 0x06, 0x4d, 0x0b, 0xb6,
	0xd6, 0xb5, 0x9c, 0xb2, 0x61, 0x31, 0x89, 0x2b, 0xba, 0x06, 0xc7, 0xf1, 0x2c, 0xba, 0x28, 0x84,
	0x34, 0x2a, 0x73, 0xa5, 0xa0, 0xf0, 0x2d, 0xe8, 0xc7, 0xe7, 0xd0, 0xe4, 0x41, 0x26, 0xc7, 0x24,
	0x8b, 0xc0, 0x80, 0x78, 0x83, 0x02, 0x65, 0x4a, 0x4e, 0x91, 0x83, 0x43, 0x06, 0x71, 0x1a, 0x9d,
	0x3f, 0xc8, 0x18, 0x4c, 0x97, 0xa9, 0x69, 0x2a, 0xda, 0x06, 0x0c, 0x89, 0x4d, 0xb1, 0xb4, 0x9b,
	0x9a, 0xfe, 0x9e, 0x06, 0xc3, 0xcb, 0xff, 0xf6, 0xa3, 0x93, 0x6d, 0x39, 0x80, 0xa7, 0xd0, 0x44,
	0x4b, 0x81, 0x32, 0xa6, 0xb3, 0x98, 0x4f, 0x27, 0xd1, 0x99, 0x0e, 0x99, 0xa6, 0x6b, 0x9e, 0x3b,
	0xe3, 0x77, 0x0d, 0x04, 0x52, 0x41, 0x52, 0x54, 0x69, 0x5d, 0xa5, 0x76, 0xce, 0xd2, 0x88, 0x09,
	0xbd, 0x82, 0x8d, 0x0d, 0x69, 0x4b, 0xd5, 0x25, 0x02, 0x7d, 0x38, 0x85, 0xc6, 0x3a, 0x64, 0xaa,
	0x92, 0x57, 0x38, 0x1c, 0x17, 0x68, 0xd1, 0xf7, 0x0d, 0x85, 0x51, 0x02, 0xfd, 0xf8, 0x22, 0x9a,
	0xea, 0x90, 0x59, 0x5a, 0xeb, 0x5c, 0x18, 0x10, 0xca, 0x4d, 0xcb, 0x30, 0x74, 0xc6, 0x29, 0x81,
	0x41, 0x81, 0x39, 0xaa, 0x6e, 0x72, 0x18, 0xc2, 0x67, 0xd1, 0x78, 0x87, 0xc0, 0xe4, 0xba, 0x4a,
	0x35, 0x18, 0x16, 0xdc, 0x34, 0x88, 0x17, 0x12, 0x28, 0x19, 0x8a, 0x7c, 0xd3, 0x32, 0xe0, 0x44,
	0x5b, 0x9c, 0x03, 0x51, 0x81, 0xaa, 0xba, 0xec, 0x25, 0xc1, 0x88, 0xc0, 0xc2, 0x28, 0xd3, 0x4e,
	0xb6, 0xa5, 0x69, 0x20, 0x23, 0x96, 0xa1, 0x7a, 0xf1, 0xa7, 0x30, 0x2a, 0xd0, 0xe4, 0x4a, 0x9e,
	0xea, 0x16, 0x87, 0x53, 0x02, 0x4d, 0x4d, 0xe7, 0x76, 0x4e, 0xb7, 0x34, 0x02, 0x20, 0xb8, 0x10,
	0x51, 0x4c, 0xc3, 0xf2, 0xdc, 0x72, 0xba, 0x2d, 0x65, 0x42, 0x43, 0x28, 0xcb, 0x2b, 0xa6, 0xe9,
	0xe5, 0x1c, 0x16, 0x9c, 0x4a, 0xa8, 0xac, 0x2a, 0x1a, 0x85, 0x33, 0x02, 0x55, 0xcb, 0xa4, 0x5e,
	0x06, 0x19, 0x16, 0x87, 0x31, 0x51, 0x40, 0x3c, 0x31, 0xa1, 0x05, 0x45, 0xa6, 0x30, 0x8e, 0xa7,
	0xd1, 0xb9, 0x4e, 0x57, 0xa8, 0x8c, 0x4a, 0x64, 0xcb, 0x26, 0x5e, 0x9e, 0x4d, 0x08, 0xbc, 0xcf,
	0x28, 0x67, 0x5b, 0x30, 0x29, 0xf0, 0xfe, 0xff, 0x2d, 0x6a, 0x51, 0x02, 0x29, 0xc1, 0x85, 0xa3,
	0xfc, 0x3f, 0xbb, 0xfc, 0xd7, 0x69, 0x34, 0xc2, 0xe2, 0x15, 0x3f, 0xbe, 0x8f, 0xac, 0x13, 0xda,
	0x96, 0xfd, 0xb8, 0x53, 0x94, 0xd3, 0xe1, 0xb7, 0x41, 0x3c, 0x8e, 0xa0, 0x5d, 0xa0, 0xdf, 0x84,
	0xd7, 0xa7, 0xf0, 0x85, 0x78, 0x8d, 0x09, 0x96, 0x6d, 0x43, 0x62, 0x5c, 0x91, 0x54, 0xf8, 0xda,
	0x8b, 0xc1, 0x44, 0xbb, 0x98, 0x51, 0xa2, 0x30, 0x2a, 0x73, 0xf8, 0x66, 0x12, 0x5f, 0x42, 0x0b,
	0x62, 0xa1, 0x6d, 0x72, 0x45, 0x55, 0xe3, 0x6f, 0xfc, 0xa5, 0x67, 0xfc, 0x58, 0x3b, 0x2d, 0xab,
	0x0a, 0xd5, 0x38, 0x7c, 0x31, 0x8d, 0x67, 0xe2, 0x15, 0x62, 0x5f, 0xd4, 0x7a, 0x7b, 0xf7, 0xd3,
	0x78, 0x11, 0x65, 0x0e, 0x43, 0x6c, 0x29, 0xaf, 0x5b, 0x1a, 0x87, 0x07, 0x69, 0x3c, 0x8f, 0x66,
	0x0e, 0x25, 0x65, 0x89, 0x11, 0x78, 0x98, 0xc6, 0x97, 0xd1, 0xe2, 0x91, 0x9c, 0xad, 0x59, 0xf9,
	0x75, 0xca, 0xe0, 0x51, 0x1a, 0xaf, 0xa0, 0xf9, 0xa3, 0x71, 0xe2, 0xe5, 0xfc, 0x93, 0x34, 0x5e,
	0x46, 0xd9, 0xa3, 0x61, 0xb9, 0x50, 0x80, 0x67, 0x5d, 0x6e, 0xcc, 0xb7, 0x0c, 0x0a, 0x2f, 0xd2,
	0x78, 0x09, 0xcd, 0x1d, 0xee, 0x86, 0xf0, 0x55, 0xbe, 0x4a, 0xe3, 0x2c, 0x4a, 0x1f, 0x8a, 0xde,
	0x52, 0x0c, 0x78, 0xd3, 0xc5, 0x55, 0x2d, 0xc6, 0xa8, 0x26, 0x6f, 0xc1, 0xdb, 0x43, 0x83, 0x90,
	0xf7, 0xfe, 0x86, 0xbd, 0xe9, 0xbb, 0x19, 0xbc, 0x8a, 0x96, 0xba, 0x20, 0xc3, 0xb2, 0xfb, 0x7d,
	0xd7, 0x7c, 0x50, 0x70, 0x7f, 0x9e, 0xc1, 0x37, 0xd0, 0x95, 0x6e, 0x78, 0xaf, 0x9c, 0xf8, 0x75,
	0x81, 0x7b, 0x55, 0xe3, 0xf7, 0x19, 0x3c, 0x8b, 0x2e, 0x08, 0xf5, 0x4c, 0x2a, 0x5b, 0xcc, 0x2b,
	0x75, 0x9f, 0x66, 0x12, 0xad, 0x8c, 0x98, 0xb0, 0x98, 0x7e, 0x9e, 0xc1, 0x0b, 0x68, 0xf6, 0x70,
	0xd2, 0x2f, 0xd5, 0x5f, 0x66, 0x12, 0xc3, 0xd6, 0x02, 0xc3, 0xd2, 0xfd, 0x55, 0x17, 0x68, 0x58,
	0xb0, 0x9f, 0x67, 0xf0, 0x15, 0x74, 0xe9, 0x70, 0x54, 0xd6, 0x35, 0x2e, 0xc9, 0xdc, 0x56, 0x4c,
	0xd3, 0xa2, 0x0c, 0xbe, 0xcd, 0xe0, 0xab, 0xe8, 0xf2, 0x11, 0x17, 0xb1, 0x4c, 0x83, 0xca, 0x9c,
	0x92, 0xd0, 0xca, 0xd7, 0x99, 0xc4, 0x04, 0x6d, 0xe9, 0xb4, 0xfa, 0xc4, 0x8f, 0x99, 0xc4, 0xd7,
	0xd7, 0x82, 0xa5, 0x82, 0x09, 0xbf, 0x76, 0xc1, 0x79, 0xaf, 0xe3, 0x8f, 0x0c, 0x9e, 0x8e, 0x55,
	0xe3, 0x38, 0xc7, 0x99, 0xa4, 0x99, 0xf0, 0xd3, 0x5c, 0x62, 0xb4, 0x7c, 0x20, 0xaa, 0xfa, 0x04,
	0xde, 0xcd, 0x25, 0x1e, 0x19, 0x90, 0x39, 0x49, 0x51, 0x29, 0x81, 0x3f, 0xe7, 0x12, 0x5f, 0x44,
	0xc0, 0xc5, 0xda, 0xcc, 0xdf, 0x73, 0x89, 0xd1, 0x0a, 0xd8, 0xfd, 0x6e, 0x76, 0x3f, 0x7b, 0x04,
	0xba, 0xdf, 0x32, 0x1f, 0x64, 0x13, 0x9f, 0x6e, 0x80, 0x06, 0xdd, 0xe4, 0x61, 0x36, 0x31, 0xfd,
	0x02, 0x2c, 0x1a, 0x41, 0x1e, 0x1d, 0x05, 0x86, 0x5d, 0x15, 0x9e, 0x1c, 0x05, 0x46, 0x8d, 0xfb,
	0x59, 0xf6, 0x60, 0xe9, 0x6f, 0x03, 0xdb, 0x1a, 0xe2, 0x8b, 0x6c, 0x17, 0x5e, 0xf2, 0x79, 0x78,
	0x95, 0x4d, 0x2c, 0x04, 0xa1, 0xf3, 0xdb, 0x0b, 0xcd, 0x9b, 0x6c, 0x62, 0x15, 0x8f, 0x7c, 0x20,
	0x53, 0x4a, 0xcc, 0xb0, 0x6e, 0xbc, 0xcd, 0x26, 0xa6, 0xd3, 0x35, 0x62, 0x52, 0x19, 0x1e, 0xcf,
	0x27, 0x9e, 0xef, 0x03, 0xb6, 0x64, 0xf1, 0x4d, 0xaa, 0xf1, 0x68, 0xb6, 0x7d, 0x3a, 0x7f, 0xb0,
	0xdf, 0x7a, 0xd3, 0x33, 0x7c, 0xb4, 0x20, 0xa8, 0x34, 0xba, 0xa6, 0x85, 0xb3, 0xfd, 0xa6, 0x52,
	0xa0, 0xf0, 0xc9, 0x02, 0xce, 0xc4, 0xa7, 0xe7, 0x7d, 0xc6, 0x1f, 0xd2, 0xfd, 0xb3, 0xe0, 0x9f,
	0x65, 0xc1, 0x95, 0x3d, 0x28, 0xea, 0xf8, 0x1f, 0xae, 0x24, 0xec, 0x12, 0x9f, 0x32, 0x3f, 0x5e,
	0x39, 0xd8, 0xe7, 0x7d, 0xc8, 0x9f, 0x34, 0xe0, 0xb3, 0x15, 0xc1, 0xdb, 0xf0, 0xc4, 0xbe, 0xdb,
	0x42, 0x27, 0x52, 0x02, 0x8f, 0x57, 0x04, 0x6f, 0x23, 0x38, 0xab, 0x35, 0xb1, 0x46, 0xa1, 0x79,
	0xba, 0x92, 0x70, 0xf1, 0x28, 0x89, 0x5e, 0xae, 0xe0, 0xa9, 0xce, 0x31, 0x26, 0x1a, 0x79, 0xde,
	0xad, 0xae, 0xab, 0xaf, 0x7f, 0xb9, 0x78, 0x0c, 0x8d, 0x96, 0xdc, 0xdd, 0xd5, 0xd2, 0x4e, 0xb1,
	0x56, 0x76, 0x76, 0x2a, 0x1f, 0x38, 0xeb, 0xc3, 0xb4, 0xda, 0xdc, 0x35, 0xbc, 0xaf, 0x65, 0xa3,
	0xe7, 0xd6, 0x52, 0xec, 0x53, 0x7b, 0x9f, 0x59, 0x8b, 0xbe, 0xb1, 0xef, 0x16, 0xab, 0xe5, 0xb5,
	0xe0, 0xab, 0x6d, 0x7b, 0xc0, 0x5f, 0xbc, 0xf6, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x45, 0x24,
	0x5c, 0xfe, 0xbc, 0x0f, 0x00, 0x00,
}
