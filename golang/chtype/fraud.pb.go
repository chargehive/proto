// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fraud.proto

package chtype

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SuggestedAction int32

const (
	SUGGESTED_ACTION_INVALID       SuggestedAction = 0
	SUGGESTED_ACTION_NO_SUGGESTION SuggestedAction = 1
	SUGGESTED_ACTION_REVIEW        SuggestedAction = 2
	SUGGESTED_ACTION_ALLOW         SuggestedAction = 3
	SUGGESTED_ACTION_DENY          SuggestedAction = 4
)

var SuggestedAction_name = map[int32]string{
	0: "SUGGESTED_ACTION_INVALID",
	1: "SUGGESTED_ACTION_NO_SUGGESTION",
	2: "SUGGESTED_ACTION_REVIEW",
	3: "SUGGESTED_ACTION_ALLOW",
	4: "SUGGESTED_ACTION_DENY",
}

var SuggestedAction_value = map[string]int32{
	"SUGGESTED_ACTION_INVALID":       0,
	"SUGGESTED_ACTION_NO_SUGGESTION": 1,
	"SUGGESTED_ACTION_REVIEW":        2,
	"SUGGESTED_ACTION_ALLOW":         3,
	"SUGGESTED_ACTION_DENY":          4,
}

func (x SuggestedAction) String() string {
	return proto.EnumName(SuggestedAction_name, int32(x))
}

func (SuggestedAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4990aeb1c634d577, []int{0}
}

type RiskLevel int32

const (
	RISK_LEVEL_INVALID     RiskLevel = 0
	RISK_LEVEL_NOT_RATED   RiskLevel = 1
	RISK_LEVEL_NEGLIGIBLE  RiskLevel = 10
	RISK_LEVEL_MINOR       RiskLevel = 30
	RISK_LEVEL_MODERATE    RiskLevel = 50
	RISK_LEVEL_SIGNIFICANT RiskLevel = 70
	RISK_LEVEL_SERVERE     RiskLevel = 90
)

var RiskLevel_name = map[int32]string{
	0:  "RISK_LEVEL_INVALID",
	1:  "RISK_LEVEL_NOT_RATED",
	10: "RISK_LEVEL_NEGLIGIBLE",
	30: "RISK_LEVEL_MINOR",
	50: "RISK_LEVEL_MODERATE",
	70: "RISK_LEVEL_SIGNIFICANT",
	90: "RISK_LEVEL_SERVERE",
}

var RiskLevel_value = map[string]int32{
	"RISK_LEVEL_INVALID":     0,
	"RISK_LEVEL_NOT_RATED":   1,
	"RISK_LEVEL_NEGLIGIBLE":  10,
	"RISK_LEVEL_MINOR":       30,
	"RISK_LEVEL_MODERATE":    50,
	"RISK_LEVEL_SIGNIFICANT": 70,
	"RISK_LEVEL_SERVERE":     90,
}

func (x RiskLevel) String() string {
	return proto.EnumName(RiskLevel_name, int32(x))
}

func (RiskLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4990aeb1c634d577, []int{1}
}

type FraudFactor_On int32

const (
	FRAUD_FACTOR_ON_INVALID              FraudFactor_On = 0
	FRAUD_FACTOR_ON_ADDRESS              FraudFactor_On = 1
	FRAUD_FACTOR_ON_BROWSER              FraudFactor_On = 2
	FRAUD_FACTOR_ON_IP                   FraudFactor_On = 3
	FRAUD_FACTOR_ON_COUNTRY              FraudFactor_On = 4
	FRAUD_FACTOR_ON_STATE                FraudFactor_On = 5
	FRAUD_FACTOR_ON_CITY                 FraudFactor_On = 6
	FRAUD_FACTOR_ON_DEVICE               FraudFactor_On = 7
	FRAUD_FACTOR_ON_EMAIL                FraudFactor_On = 8
	FRAUD_FACTOR_ON_EMAIL_DOMAIN         FraudFactor_On = 9
	FRAUD_FACTOR_ON_DATE                 FraudFactor_On = 10
	FRAUD_FACTOR_ON_MERCHANT             FraudFactor_On = 11
	FRAUD_FACTOR_ON_ISSUER               FraudFactor_On = 12
	FRAUD_FACTOR_ON_BIN                  FraudFactor_On = 13
	FRAUD_FACTOR_ON_METHOD               FraudFactor_On = 14
	FRAUD_FACTOR_ON_CUSTOMER             FraudFactor_On = 15
	FRAUD_FACTOR_ON_AMOUNT               FraudFactor_On = 16
	FRAUD_FACTOR_ON_PHONE                FraudFactor_On = 17
	FRAUD_FACTOR_ON_LANGUAGE             FraudFactor_On = 18
	FRAUD_FACTOR_ON_DISTANCE_TO_BILLING  FraudFactor_On = 19
	FRAUD_FACTOR_ON_DISTANCE_TO_SHIPPING FraudFactor_On = 20
	FRAUD_FACTOR_ON_DISTANCE_TO_IP       FraudFactor_On = 21
	FRAUD_FACTOR_ON_OTHER                FraudFactor_On = 22
)

var FraudFactor_On_name = map[int32]string{
	0:  "FRAUD_FACTOR_ON_INVALID",
	1:  "FRAUD_FACTOR_ON_ADDRESS",
	2:  "FRAUD_FACTOR_ON_BROWSER",
	3:  "FRAUD_FACTOR_ON_IP",
	4:  "FRAUD_FACTOR_ON_COUNTRY",
	5:  "FRAUD_FACTOR_ON_STATE",
	6:  "FRAUD_FACTOR_ON_CITY",
	7:  "FRAUD_FACTOR_ON_DEVICE",
	8:  "FRAUD_FACTOR_ON_EMAIL",
	9:  "FRAUD_FACTOR_ON_EMAIL_DOMAIN",
	10: "FRAUD_FACTOR_ON_DATE",
	11: "FRAUD_FACTOR_ON_MERCHANT",
	12: "FRAUD_FACTOR_ON_ISSUER",
	13: "FRAUD_FACTOR_ON_BIN",
	14: "FRAUD_FACTOR_ON_METHOD",
	15: "FRAUD_FACTOR_ON_CUSTOMER",
	16: "FRAUD_FACTOR_ON_AMOUNT",
	17: "FRAUD_FACTOR_ON_PHONE",
	18: "FRAUD_FACTOR_ON_LANGUAGE",
	19: "FRAUD_FACTOR_ON_DISTANCE_TO_BILLING",
	20: "FRAUD_FACTOR_ON_DISTANCE_TO_SHIPPING",
	21: "FRAUD_FACTOR_ON_DISTANCE_TO_IP",
	22: "FRAUD_FACTOR_ON_OTHER",
}

var FraudFactor_On_value = map[string]int32{
	"FRAUD_FACTOR_ON_INVALID":              0,
	"FRAUD_FACTOR_ON_ADDRESS":              1,
	"FRAUD_FACTOR_ON_BROWSER":              2,
	"FRAUD_FACTOR_ON_IP":                   3,
	"FRAUD_FACTOR_ON_COUNTRY":              4,
	"FRAUD_FACTOR_ON_STATE":                5,
	"FRAUD_FACTOR_ON_CITY":                 6,
	"FRAUD_FACTOR_ON_DEVICE":               7,
	"FRAUD_FACTOR_ON_EMAIL":                8,
	"FRAUD_FACTOR_ON_EMAIL_DOMAIN":         9,
	"FRAUD_FACTOR_ON_DATE":                 10,
	"FRAUD_FACTOR_ON_MERCHANT":             11,
	"FRAUD_FACTOR_ON_ISSUER":               12,
	"FRAUD_FACTOR_ON_BIN":                  13,
	"FRAUD_FACTOR_ON_METHOD":               14,
	"FRAUD_FACTOR_ON_CUSTOMER":             15,
	"FRAUD_FACTOR_ON_AMOUNT":               16,
	"FRAUD_FACTOR_ON_PHONE":                17,
	"FRAUD_FACTOR_ON_LANGUAGE":             18,
	"FRAUD_FACTOR_ON_DISTANCE_TO_BILLING":  19,
	"FRAUD_FACTOR_ON_DISTANCE_TO_SHIPPING": 20,
	"FRAUD_FACTOR_ON_DISTANCE_TO_IP":       21,
	"FRAUD_FACTOR_ON_OTHER":                22,
}

func (x FraudFactor_On) String() string {
	return proto.EnumName(FraudFactor_On_name, int32(x))
}

func (FraudFactor_On) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4990aeb1c634d577, []int{2, 0}
}

type FraudFactor_Factor int32

const (
	FRAUD_FACTOR_INVALID      FraudFactor_Factor = 0
	FRAUD_FACTOR_VERIFICATION FraudFactor_Factor = 1
	FRAUD_FACTOR_VALIDATION   FraudFactor_Factor = 2
	FRAUD_FACTOR_VELOCITY     FraudFactor_Factor = 3
	FRAUD_FACTOR_TRUST        FraudFactor_Factor = 4
	FRAUD_FACTOR_DURATION     FraudFactor_Factor = 5
	FRAUD_FACTOR_OTHER        FraudFactor_Factor = 6
)

var FraudFactor_Factor_name = map[int32]string{
	0: "FRAUD_FACTOR_INVALID",
	1: "FRAUD_FACTOR_VERIFICATION",
	2: "FRAUD_FACTOR_VALIDATION",
	3: "FRAUD_FACTOR_VELOCITY",
	4: "FRAUD_FACTOR_TRUST",
	5: "FRAUD_FACTOR_DURATION",
	6: "FRAUD_FACTOR_OTHER",
}

var FraudFactor_Factor_value = map[string]int32{
	"FRAUD_FACTOR_INVALID":      0,
	"FRAUD_FACTOR_VERIFICATION": 1,
	"FRAUD_FACTOR_VALIDATION":   2,
	"FRAUD_FACTOR_VELOCITY":     3,
	"FRAUD_FACTOR_TRUST":        4,
	"FRAUD_FACTOR_DURATION":     5,
	"FRAUD_FACTOR_OTHER":        6,
}

func (x FraudFactor_Factor) String() string {
	return proto.EnumName(FraudFactor_Factor_name, int32(x))
}

func (FraudFactor_Factor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4990aeb1c634d577, []int{2, 1}
}

type FraudResult struct {
	FraudCheckId         string               `protobuf:"bytes,1,opt,name=fraud_check_id,json=fraudCheckId,proto3" json:"fraud_check_id,omitempty"`
	OverallScore         *FraudScore          `protobuf:"bytes,2,opt,name=overall_score,json=overallScore,proto3" json:"overall_score,omitempty"`
	SubScores            []*FraudScore        `protobuf:"bytes,3,rep,name=sub_scores,json=subScores,proto3" json:"sub_scores,omitempty"`
	SuggestedAction      SuggestedAction      `protobuf:"varint,4,opt,name=suggested_action,json=suggestedAction,proto3,enum=chtype.SuggestedAction" json:"suggested_action,omitempty"`
	ScanTime             *timestamp.Timestamp `protobuf:"bytes,5,opt,name=scan_time,json=scanTime,proto3" json:"scan_time,omitempty"`
	ConnectorLibrary     string               `protobuf:"bytes,6,opt,name=connector_library,json=connectorLibrary,proto3" json:"connector_library,omitempty"`
	AdditionalData       map[string]string    `protobuf:"bytes,7,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	InfoLinks            map[string]string    `protobuf:"bytes,8,rep,name=info_links,json=infoLinks,proto3" json:"info_links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FraudResult) Reset()         { *m = FraudResult{} }
func (m *FraudResult) String() string { return proto.CompactTextString(m) }
func (*FraudResult) ProtoMessage()    {}
func (*FraudResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_4990aeb1c634d577, []int{0}
}
func (m *FraudResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FraudResult.Unmarshal(m, b)
}
func (m *FraudResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FraudResult.Marshal(b, m, deterministic)
}
func (m *FraudResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FraudResult.Merge(m, src)
}
func (m *FraudResult) XXX_Size() int {
	return xxx_messageInfo_FraudResult.Size(m)
}
func (m *FraudResult) XXX_DiscardUnknown() {
	xxx_messageInfo_FraudResult.DiscardUnknown(m)
}

var xxx_messageInfo_FraudResult proto.InternalMessageInfo

func (m *FraudResult) GetFraudCheckId() string {
	if m != nil {
		return m.FraudCheckId
	}
	return ""
}

func (m *FraudResult) GetOverallScore() *FraudScore {
	if m != nil {
		return m.OverallScore
	}
	return nil
}

func (m *FraudResult) GetSubScores() []*FraudScore {
	if m != nil {
		return m.SubScores
	}
	return nil
}

func (m *FraudResult) GetSuggestedAction() SuggestedAction {
	if m != nil {
		return m.SuggestedAction
	}
	return SUGGESTED_ACTION_INVALID
}

func (m *FraudResult) GetScanTime() *timestamp.Timestamp {
	if m != nil {
		return m.ScanTime
	}
	return nil
}

func (m *FraudResult) GetConnectorLibrary() string {
	if m != nil {
		return m.ConnectorLibrary
	}
	return ""
}

func (m *FraudResult) GetAdditionalData() map[string]string {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

func (m *FraudResult) GetInfoLinks() map[string]string {
	if m != nil {
		return m.InfoLinks
	}
	return nil
}

type FraudScore struct {
	Score                float32           `protobuf:"fixed32,1,opt,name=score,proto3" json:"score,omitempty"`
	RiskLevel            RiskLevel         `protobuf:"varint,2,opt,name=risk_level,json=riskLevel,proto3,enum=chtype.RiskLevel" json:"risk_level,omitempty"`
	Factor               *FraudFactor      `protobuf:"bytes,4,opt,name=factor,proto3" json:"factor,omitempty"`
	Summary              string            `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`
	Data                 map[string]string `protobuf:"bytes,7,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FraudScore) Reset()         { *m = FraudScore{} }
func (m *FraudScore) String() string { return proto.CompactTextString(m) }
func (*FraudScore) ProtoMessage()    {}
func (*FraudScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_4990aeb1c634d577, []int{1}
}
func (m *FraudScore) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FraudScore.Unmarshal(m, b)
}
func (m *FraudScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FraudScore.Marshal(b, m, deterministic)
}
func (m *FraudScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FraudScore.Merge(m, src)
}
func (m *FraudScore) XXX_Size() int {
	return xxx_messageInfo_FraudScore.Size(m)
}
func (m *FraudScore) XXX_DiscardUnknown() {
	xxx_messageInfo_FraudScore.DiscardUnknown(m)
}

var xxx_messageInfo_FraudScore proto.InternalMessageInfo

func (m *FraudScore) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *FraudScore) GetRiskLevel() RiskLevel {
	if m != nil {
		return m.RiskLevel
	}
	return RISK_LEVEL_INVALID
}

func (m *FraudScore) GetFactor() *FraudFactor {
	if m != nil {
		return m.Factor
	}
	return nil
}

func (m *FraudScore) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *FraudScore) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type FraudFactor struct {
	On                   FraudFactor_On     `protobuf:"varint,1,opt,name=on,proto3,enum=chtype.FraudFactor_On" json:"on,omitempty"`
	Factor               FraudFactor_Factor `protobuf:"varint,2,opt,name=factor,proto3,enum=chtype.FraudFactor_Factor" json:"factor,omitempty"`
	OtherOn              string             `protobuf:"bytes,3,opt,name=other_on,json=otherOn,proto3" json:"other_on,omitempty"`
	OtherFactor          string             `protobuf:"bytes,4,opt,name=other_factor,json=otherFactor,proto3" json:"other_factor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FraudFactor) Reset()         { *m = FraudFactor{} }
func (m *FraudFactor) String() string { return proto.CompactTextString(m) }
func (*FraudFactor) ProtoMessage()    {}
func (*FraudFactor) Descriptor() ([]byte, []int) {
	return fileDescriptor_4990aeb1c634d577, []int{2}
}
func (m *FraudFactor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FraudFactor.Unmarshal(m, b)
}
func (m *FraudFactor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FraudFactor.Marshal(b, m, deterministic)
}
func (m *FraudFactor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FraudFactor.Merge(m, src)
}
func (m *FraudFactor) XXX_Size() int {
	return xxx_messageInfo_FraudFactor.Size(m)
}
func (m *FraudFactor) XXX_DiscardUnknown() {
	xxx_messageInfo_FraudFactor.DiscardUnknown(m)
}

var xxx_messageInfo_FraudFactor proto.InternalMessageInfo

func (m *FraudFactor) GetOn() FraudFactor_On {
	if m != nil {
		return m.On
	}
	return FRAUD_FACTOR_ON_INVALID
}

func (m *FraudFactor) GetFactor() FraudFactor_Factor {
	if m != nil {
		return m.Factor
	}
	return FRAUD_FACTOR_INVALID
}

func (m *FraudFactor) GetOtherOn() string {
	if m != nil {
		return m.OtherOn
	}
	return ""
}

func (m *FraudFactor) GetOtherFactor() string {
	if m != nil {
		return m.OtherFactor
	}
	return ""
}

func init() {
	proto.RegisterEnum("chtype.SuggestedAction", SuggestedAction_name, SuggestedAction_value)
	golang_proto.RegisterEnum("chtype.SuggestedAction", SuggestedAction_name, SuggestedAction_value)
	proto.RegisterEnum("chtype.RiskLevel", RiskLevel_name, RiskLevel_value)
	golang_proto.RegisterEnum("chtype.RiskLevel", RiskLevel_name, RiskLevel_value)
	proto.RegisterEnum("chtype.FraudFactor_On", FraudFactor_On_name, FraudFactor_On_value)
	golang_proto.RegisterEnum("chtype.FraudFactor_On", FraudFactor_On_name, FraudFactor_On_value)
	proto.RegisterEnum("chtype.FraudFactor_Factor", FraudFactor_Factor_name, FraudFactor_Factor_value)
	golang_proto.RegisterEnum("chtype.FraudFactor_Factor", FraudFactor_Factor_name, FraudFactor_Factor_value)
	proto.RegisterType((*FraudResult)(nil), "chtype.FraudResult")
	golang_proto.RegisterType((*FraudResult)(nil), "chtype.FraudResult")
	proto.RegisterMapType((map[string]string)(nil), "chtype.FraudResult.AdditionalDataEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "chtype.FraudResult.AdditionalDataEntry")
	proto.RegisterMapType((map[string]string)(nil), "chtype.FraudResult.InfoLinksEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "chtype.FraudResult.InfoLinksEntry")
	proto.RegisterType((*FraudScore)(nil), "chtype.FraudScore")
	golang_proto.RegisterType((*FraudScore)(nil), "chtype.FraudScore")
	proto.RegisterMapType((map[string]string)(nil), "chtype.FraudScore.DataEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "chtype.FraudScore.DataEntry")
	proto.RegisterType((*FraudFactor)(nil), "chtype.FraudFactor")
	golang_proto.RegisterType((*FraudFactor)(nil), "chtype.FraudFactor")
}

func init() { proto.RegisterFile("fraud.proto", fileDescriptor_4990aeb1c634d577) }
func init() { golang_proto.RegisterFile("fraud.proto", fileDescriptor_4990aeb1c634d577) }

var fileDescriptor_4990aeb1c634d577 = []byte{
	// 1080 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x51, 0x6f, 0xe2, 0x46,
	0x10, 0x3e, 0x20, 0xe1, 0xc2, 0x90, 0x23, 0x9b, 0x4d, 0x2e, 0x71, 0x68, 0x9a, 0xa6, 0xf4, 0xd4,
	0x4b, 0xef, 0x54, 0x72, 0xe5, 0x1e, 0x52, 0x55, 0x7d, 0x71, 0xf0, 0x42, 0x56, 0x35, 0x36, 0x5a,
	0x1b, 0xa2, 0xdc, 0x8b, 0x65, 0xc0, 0x01, 0x2b, 0x8e, 0x1d, 0xd9, 0x26, 0x52, 0xfe, 0x40, 0xff,
	0x45, 0x9f, 0xfb, 0xd2, 0x7f, 0xd0, 0x97, 0x3e, 0xf4, 0x07, 0xf4, 0x1f, 0x54, 0x55, 0xff, 0x48,
	0xb5, 0x6b, 0x48, 0x00, 0xbb, 0x27, 0xb5, 0x6f, 0x3b, 0xf3, 0xcd, 0x7c, 0x3b, 0xdf, 0xcc, 0x2c,
	0x18, 0xca, 0xd7, 0xa1, 0x3d, 0x1d, 0xd5, 0xef, 0xc2, 0x20, 0x0e, 0x70, 0x71, 0x38, 0x89, 0x1f,
	0xee, 0x9c, 0xea, 0xd7, 0x63, 0x37, 0x9e, 0x4c, 0x07, 0xf5, 0x61, 0x70, 0x7b, 0x3a, 0x0e, 0xc6,
	0xc1, 0xa9, 0x80, 0x07, 0xd3, 0x6b, 0x61, 0x09, 0x43, 0x9c, 0x92, 0xb4, 0xea, 0x67, 0xe3, 0x20,
	0x18, 0x7b, 0xce, 0x53, 0x54, 0xec, 0xde, 0x3a, 0x51, 0x6c, 0xdf, 0xde, 0x25, 0x01, 0xb5, 0x3f,
	0xd7, 0xa0, 0xdc, 0xe2, 0xf7, 0x30, 0x27, 0x9a, 0x7a, 0x31, 0x7e, 0x05, 0x15, 0x71, 0xad, 0x35,
	0x9c, 0x38, 0xc3, 0x1b, 0xcb, 0x1d, 0x49, 0xb9, 0xe3, 0xdc, 0x49, 0x89, 0x6d, 0x0a, 0x6f, 0x93,
	0x3b, 0xe9, 0x08, 0x9f, 0xc1, 0x8b, 0xe0, 0xde, 0x09, 0x6d, 0xcf, 0xb3, 0xa2, 0x61, 0x10, 0x3a,
	0x52, 0xfe, 0x38, 0x77, 0x52, 0x6e, 0xe0, 0x7a, 0x52, 0x65, 0x5d, 0x30, 0x1a, 0x1c, 0x61, 0x9b,
	0xb3, 0x40, 0x61, 0xe1, 0x6f, 0x00, 0xa2, 0xe9, 0x20, 0x49, 0x8a, 0xa4, 0xc2, 0x71, 0xe1, 0x5f,
	0xb2, 0x4a, 0xd1, 0x74, 0x20, 0x4e, 0x11, 0x3e, 0x07, 0x14, 0x4d, 0xc7, 0x63, 0x27, 0x8a, 0x9d,
	0x91, 0x65, 0x0f, 0x63, 0x37, 0xf0, 0xa5, 0xb5, 0xe3, 0xdc, 0x49, 0xa5, 0xb1, 0x3f, 0x4f, 0x34,
	0xe6, 0xb8, 0x2c, 0x60, 0xb6, 0x15, 0x2d, 0x3b, 0xf0, 0x19, 0x94, 0xa2, 0xa1, 0xed, 0x5b, 0x5c,
	0xbd, 0xb4, 0x2e, 0x6a, 0xad, 0xd6, 0x93, 0xd6, 0xd4, 0xe7, 0xad, 0xa9, 0x9b, 0xf3, 0xd6, 0xb0,
	0x0d, 0x1e, 0xcc, 0x4d, 0xfc, 0x16, 0xb6, 0x87, 0x81, 0xef, 0x3b, 0xc3, 0x38, 0x08, 0x2d, 0xcf,
	0x1d, 0x84, 0x76, 0xf8, 0x20, 0x15, 0x45, 0x47, 0xd0, 0x23, 0xa0, 0x26, 0x7e, 0xdc, 0x85, 0x2d,
	0x7b, 0x34, 0x72, 0xf9, 0x8d, 0xb6, 0x67, 0x8d, 0xec, 0xd8, 0x96, 0x9e, 0x0b, 0x85, 0xaf, 0x97,
	0x14, 0x26, 0x9d, 0xae, 0xcb, 0x8f, 0xa1, 0x8a, 0x1d, 0xdb, 0xc4, 0x8f, 0xc3, 0x07, 0x56, 0xb1,
	0x97, 0x9c, 0x58, 0x06, 0x70, 0xfd, 0xeb, 0xc0, 0xf2, 0x5c, 0xff, 0x26, 0x92, 0x36, 0x04, 0x59,
	0x2d, 0x8b, 0x8c, 0xfa, 0xd7, 0x81, 0xca, 0x83, 0x12, 0x9e, 0x92, 0x3b, 0xb7, 0xab, 0x32, 0xec,
	0x64, 0xdc, 0x84, 0x11, 0x14, 0x6e, 0x9c, 0x87, 0xd9, 0x70, 0xf9, 0x11, 0xef, 0xc2, 0xfa, 0xbd,
	0xed, 0x4d, 0x93, 0x59, 0x96, 0x58, 0x62, 0x7c, 0x97, 0xff, 0x36, 0x57, 0xfd, 0x1e, 0x2a, 0xcb,
	0xfc, 0xff, 0x25, 0xbb, 0xf6, 0x63, 0x1e, 0xe0, 0x69, 0xb2, 0x3c, 0x30, 0x59, 0x19, 0x9e, 0x9c,
	0x67, 0x89, 0x81, 0xdf, 0x01, 0x84, 0x6e, 0x74, 0x63, 0x79, 0xce, 0xbd, 0xe3, 0x09, 0x8e, 0x4a,
	0x63, 0x7b, 0x2e, 0x94, 0xb9, 0xd1, 0x8d, 0xca, 0x01, 0x56, 0x0a, 0xe7, 0x47, 0xfc, 0x16, 0x8a,
	0xd7, 0x36, 0xef, 0xbe, 0x58, 0x86, 0x72, 0x63, 0x67, 0xa9, 0x2d, 0x2d, 0x01, 0xb1, 0x59, 0x08,
	0x96, 0xe0, 0x79, 0x34, 0xbd, 0xbd, 0x7d, 0x1a, 0xde, 0xdc, 0xc4, 0xef, 0x60, 0x6d, 0x61, 0x50,
	0x87, 0xe9, 0x55, 0xac, 0x3f, 0x4d, 0x47, 0x44, 0x56, 0xcf, 0xa0, 0xf4, 0xbf, 0xda, 0x58, 0xfb,
	0x69, 0x63, 0xf6, 0xd4, 0x92, 0xe2, 0xf0, 0x97, 0x90, 0x0f, 0x7c, 0x91, 0x5a, 0x69, 0xec, 0x65,
	0x54, 0x5f, 0xd7, 0x7d, 0x96, 0x0f, 0x7c, 0xdc, 0x78, 0x54, 0x9a, 0xf4, 0xa5, 0x9a, 0x15, 0xbb,
	0x22, 0xf8, 0x00, 0x36, 0x82, 0x78, 0xe2, 0x84, 0x56, 0xe0, 0x4b, 0x85, 0x44, 0xb1, 0xb0, 0x75,
	0x1f, 0x7f, 0x0e, 0x9b, 0x09, 0xb4, 0xd0, 0xbe, 0x12, 0x2b, 0x0b, 0x5f, 0xc2, 0x52, 0xfb, 0x65,
	0x1d, 0xf2, 0xba, 0x8f, 0x3f, 0x81, 0xfd, 0x16, 0x93, 0x7b, 0x8a, 0xd5, 0x92, 0x9b, 0xa6, 0xce,
	0x2c, 0x5d, 0xb3, 0xa8, 0xd6, 0x97, 0x55, 0xaa, 0xa0, 0x67, 0x59, 0xa0, 0xac, 0x28, 0x8c, 0x18,
	0x06, 0xca, 0x65, 0x81, 0xe7, 0x4c, 0xbf, 0x34, 0x08, 0x43, 0x79, 0xbc, 0x07, 0x38, 0x45, 0xdb,
	0x45, 0x85, 0xac, 0xa4, 0xa6, 0xde, 0xd3, 0x4c, 0x76, 0x85, 0xd6, 0xf0, 0x01, 0xbc, 0x5c, 0x05,
	0x0d, 0x53, 0x36, 0x09, 0x5a, 0xc7, 0x12, 0xec, 0xa6, 0xf2, 0xa8, 0x79, 0x85, 0x8a, 0xb8, 0x0a,
	0x7b, 0xab, 0x88, 0x42, 0xfa, 0xb4, 0x49, 0xd0, 0xf3, 0x2c, 0x42, 0xd2, 0x91, 0xa9, 0x8a, 0x36,
	0xf0, 0x31, 0x1c, 0x66, 0x42, 0x96, 0xa2, 0x77, 0x64, 0xaa, 0xa1, 0x52, 0xd6, 0x95, 0x0a, 0x2f,
	0x06, 0xf0, 0x21, 0x48, 0xab, 0x48, 0x87, 0xb0, 0xe6, 0x85, 0xac, 0x99, 0xa8, 0x9c, 0x55, 0x10,
	0x35, 0x8c, 0x1e, 0x61, 0x68, 0x13, 0xef, 0xc3, 0x4e, 0xaa, 0x67, 0x54, 0x43, 0x2f, 0xb2, 0x92,
	0x3a, 0xc4, 0xbc, 0xd0, 0x15, 0x54, 0xc9, 0xba, 0xae, 0xd9, 0x33, 0x4c, 0xbd, 0x43, 0x18, 0xda,
	0xca, 0xca, 0x94, 0x3b, 0xbc, 0xa5, 0x08, 0x65, 0xe9, 0xef, 0x5e, 0xe8, 0x1a, 0x41, 0xdb, 0x59,
	0xa4, 0xaa, 0xac, 0xb5, 0x7b, 0x72, 0x9b, 0x20, 0x8c, 0x5f, 0xc3, 0x17, 0x29, 0xed, 0xd4, 0x30,
	0x65, 0xad, 0x49, 0x2c, 0x53, 0xb7, 0xce, 0xa9, 0xaa, 0x52, 0xad, 0x8d, 0x76, 0xf0, 0x09, 0xbc,
	0xfa, 0x58, 0xa0, 0x71, 0x41, 0xbb, 0x5d, 0x1e, 0xb9, 0x8b, 0x6b, 0x70, 0xf4, 0xb1, 0x48, 0xda,
	0x45, 0x2f, 0xb3, 0xea, 0xd5, 0xcd, 0x0b, 0xc2, 0xd0, 0x5e, 0xed, 0xf7, 0x1c, 0x14, 0x5b, 0xf3,
	0x87, 0xbe, 0x3c, 0x98, 0xa7, 0x7d, 0xfd, 0x14, 0x0e, 0x96, 0x90, 0x3e, 0x61, 0xb4, 0x45, 0x9b,
	0xb2, 0x49, 0x75, 0x2d, 0x63, 0x63, 0x45, 0x5a, 0x02, 0xe6, 0x53, 0x77, 0xf7, 0x89, 0xaa, 0x8b,
	0x15, 0x2b, 0xa4, 0x96, 0xd9, 0x64, 0x3d, 0xc3, 0xcc, 0xd8, 0x57, 0xa5, 0xc7, 0x12, 0xb6, 0xf5,
	0xf4, 0xfe, 0x0b, 0x19, 0xc5, 0x37, 0x3f, 0xe7, 0x60, 0x6b, 0xe5, 0x9f, 0x8c, 0x8f, 0xc2, 0xe8,
	0xb5, 0xdb, 0xc4, 0x30, 0x89, 0x62, 0xc9, 0x4d, 0xce, 0xb0, 0xa0, 0xa9, 0x06, 0x47, 0x29, 0x54,
	0xd3, 0xad, 0x99, 0xef, 0x51, 0x58, 0x2a, 0x86, 0x91, 0x3e, 0x25, 0x97, 0x28, 0xcf, 0x17, 0x24,
	0x05, 0xca, 0xaa, 0xaa, 0x5f, 0xa2, 0x02, 0x57, 0x90, 0xc2, 0x14, 0xa2, 0x5d, 0xa1, 0xb5, 0x37,
	0xbf, 0xe6, 0xa0, 0xf4, 0xf8, 0xa3, 0xcc, 0xf5, 0x30, 0x6a, 0xfc, 0x60, 0xa9, 0xa4, 0x4f, 0xd4,
	0x85, 0xea, 0x24, 0xd8, 0x5d, 0xf0, 0x6b, 0xba, 0x69, 0x31, 0xd9, 0x24, 0x0a, 0xca, 0x71, 0xea,
	0x45, 0x84, 0xb4, 0x55, 0xda, 0xa6, 0xe7, 0x2a, 0x7f, 0x3f, 0xbb, 0x80, 0x16, 0xa0, 0x0e, 0xd5,
	0x74, 0x86, 0x8e, 0xf8, 0xdb, 0x58, 0xf4, 0xea, 0x0a, 0xe1, 0x54, 0xa8, 0xc1, 0x05, 0x2c, 0x00,
	0x06, 0x6d, 0x6b, 0x62, 0xa8, 0x9a, 0x89, 0x5a, 0x2b, 0x75, 0x19, 0x84, 0xf5, 0x09, 0x23, 0xe8,
	0xc3, 0xf9, 0xfb, 0x3f, 0xfe, 0x3a, 0x7a, 0xf6, 0xdb, 0xdf, 0x47, 0xb9, 0x0f, 0x5f, 0x2d, 0x7c,
	0x4c, 0x0d, 0x27, 0x76, 0x38, 0x76, 0x26, 0xee, 0xfd, 0xec, 0x63, 0xe9, 0x74, 0x1c, 0x78, 0xb6,
	0x3f, 0x3e, 0x4d, 0x7e, 0x6b, 0x07, 0x45, 0xe1, 0x7c, 0xff, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x0a, 0xd2, 0xfd, 0xf7, 0x95, 0x09, 0x00, 0x00,
}
